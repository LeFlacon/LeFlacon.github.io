<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据结构第八次作业（c++实现AVL树，插入删除旋转图解）]]></title>
    <url>%2Fa534447f%2F</url>
    <content type="text"><![CDATA[题目： 编写函数，计算AVL树的高度，要求说明该函数是所有算法中最优的 编写函数，返回AVL树中距离根节点最近的叶节点的值 AVL树：定义：空二叉树是AVL树 如果T是一棵非空的二叉树，TL和TR分别是其左子树和右子树，那么满足以下条件，T是一棵AVL树： 1.TL和TR是AVL树 2.|hL-hR|≤1，hL和hR分别是左子树和右子树的高度 AVL树的特性：n个元素（节点）的AVL树的高度是O(logn) 对于每一个n（n≥0）值，都存在一棵AVL树（保证任何时刻，插入操作都是可完成的） 一棵n元素的AVL搜索树能在O(高度)=O(logn)的时间内完成搜索 将一个新元素插入到一棵n元素的AVL搜索树中，可得到一棵n+1元素的AVL树，这种插入过程可以在O(logn)时间内完成 从一棵n元素的AVL搜索树中删除一个元素，可得到一棵n-1元素的AVL树，这种删除过程可以在O(logn)时间内完成 AVL树搜索：与一般的二叉搜索树BST一致 从根节点开始将key与节点值比较，如果key小于节点值，进入左子树；如果key大于节点值，进入右子树；直到找到或子树为空停止 AVL树插入：AVL树旋转：下面是特地配色了的旋转图解(｡ì _ í｡) 1）LL型 右单旋 123456789template&lt;class T&gt;void AVLTree&lt;T&gt;::rotate_right(Node&lt;T&gt; *&amp;t)&#123; Node&lt;T&gt; *p=t-&gt;lchild; t-&gt;lchild=p-&gt;rchild; p-&gt;rchild=t; t-&gt;height=max(get_height(t-&gt;lchild),get_height(t-&gt;rchild))+1; p-&gt;height=max(get_height(p-&gt;lchild),t-&gt;height)+1; t=p;&#125; 2）RR型 左单旋 123456789template&lt;class T&gt;void AVLTree&lt;T&gt;::rotate_left(Node&lt;T&gt; *&amp;t)&#123; Node&lt;T&gt; *p=t-&gt;rchild; t-&gt;rchild=p-&gt;lchild; p-&gt;lchild=t; t-&gt;height=max(get_height(t-&gt;lchild),get_height(t-&gt;rchild))+1; p-&gt;height=max(get_height(p-&gt;rchild),t-&gt;height)+1; t=p;&#125; 3）RL型 先右后左旋 12345template&lt;class T&gt;void AVLTree&lt;T&gt;::right_left(Node&lt;T&gt; *&amp;t)&#123; rotate_right(t-&gt;rchild); rotate_left(t);&#125; 4）LR型 先左后右旋 12345template&lt;class T&gt;void AVLTree&lt;T&gt;::left_right(Node&lt;T&gt; *&amp;t)&#123; rotate_left(t-&gt;lchild); rotate_right(t);&#125; AVL树删除12345if(e&lt;t-&gt;data)remove(e,t-&gt;lchild);else if(e&gt;t-&gt;data)remove(e,t-&gt;rchild);else&#123; //删除&#125; 如果要删除的节点不为叶子节点那么把该节点右子树里最小的左儿子（也就是左儿子的左儿子的左儿子……）移到该节点，然后删除那个最小的节点，如下图： 123456if(t-&gt;lchild!=NULL&amp;&amp;t-&gt;rchild!=NULL)&#123; Node *p=t-&gt;rchild; while(p-&gt;lchild!=NULL)p=p-&gt;lchild; t-&gt;data=p-&gt;data; remove(t-&gt;rchild,p-&gt;data);&#125; 如果要删除的节点为叶子节点直接delete即可 1234Node&lt;T&gt; *p=t-&gt;lchild==NULL?t-&gt;rchild:t-&gt;lchild;delete t;t=p;return; 删除后如果失去平衡要重新调整调整原理和判断条件都和插入一样，最后更新一下高度即可 1234567891011if(get_height(t-&gt;lchild)-get_height(t-&gt;rchild)==2)&#123; if(get_height(t-&gt;lchild-&gt;lchild)&gt;get_height(t-&gt;lchild-&gt;rchild)) rotate_right(t); else left_right(t);&#125;else if(get_height(t-&gt;rchild)-get_height(t-&gt;lchild)==2)&#123; if(get_height(t-&gt;rchild-&gt;lchild)&gt;get_height(t-&gt;rchild-&gt;rchild)) right_left(t); else rotate_left(t);&#125;t-&gt;height=max(get_height(t-&gt;lchild),get_height(t-&gt;rchild))+1; AVL树的高度树的高度就是 左右子树取高的那个高度再加一 一直递归即可 12345678template&lt;class T&gt;int AVLTree&lt;T&gt;::tree_height(Node&lt;T&gt; *t)&#123; if(t==NULL)return 0; int lh=0,rh=0; lh=tree_height(t-&gt;lchild)+1; rh=tree_height(t-&gt;rchild)+1; return max(lh,rh);&#125; AVL树中距离根节点最近的叶节点的值第二个题说返回AVL树中距离根节点最近的叶节点的值，但是距离相同的最近的可以有很多。。我也不知道要干啥，所以就写了两个版本，一种是按照最左边优先（也就是序号小的优先）输出一个，还有一种是把距离最小的全部输出 距离最近的相同的按照最左边优先只输出一个思路就是一个dfs，如果找到了叶节点就直接输出，如果不是叶节点就比较它左子树和右子树的高度，调用上一题写的那个函数即可，向高度低的那个子树继续 有一点要注意的是如果当前左右子树高度出现了0/1或1/0的情况，这时候就不能直接取小的那个了，这样就会丢失答案，所以如果有一个为0的话应当取高度为1的那个输出，也就是叶子 123456789101112131415161718template&lt;class T&gt;void AVLTree&lt;T&gt;::get_near1(Node&lt;T&gt; *t)&#123; if(t==NULL)return; if(t-&gt;lchild==NULL&amp;&amp;t-&gt;rchild==NULL)&#123; cout&lt;&lt;t-&gt;data&lt;&lt;" "; return; &#125; int lh=0,rh=0; lh=tree_height(t-&gt;lchild); rh=tree_height(t-&gt;rchild); // cout&lt;&lt;lh&lt;&lt;" "&lt;&lt;rh&lt;&lt;endl; if(lh&lt;=rh&amp;&amp;lh!=0)get_near1(t-&gt;lchild); else if(rh&lt;lh&amp;&amp;rh!=0)get_near1(t-&gt;rchild); else&#123;//有一个为0 get_near1(t-&gt;lchild); get_near1(t-&gt;rchild); &#125;&#125; 距离最近的全部输出思路同上，要输出所有距离最近的只要修改一下判断条件即可，上面那个函数左右子树同高的时候是只遍历左子树，这里同高两个都遍历 1234567891011121314151617template&lt;class T&gt;void AVLTree&lt;T&gt;::get_near2(Node&lt;T&gt; *t)&#123; if(t==NULL)return; if(t-&gt;lchild==NULL&amp;&amp;t-&gt;rchild==NULL)&#123; cout&lt;&lt;t-&gt;data&lt;&lt;" "; return; &#125; int lh=0,rh=0; lh=tree_height(t-&gt;lchild); rh=tree_height(t-&gt;rchild); if(lh&lt;rh&amp;&amp;lh!=0)get_near2(t-&gt;lchild); else if(lh&gt;rh&amp;&amp;rh!=0)get_near2(t-&gt;rchild); else&#123; get_near2(t-&gt;lchild); get_near2(t-&gt;rchild); &#125;&#125; 运行效果 代码include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;using namespace std;template&lt;class T&gt;struct Node&#123; T data; Node *lchild; Node *rchild; int height; Node(const T &amp;e,Node *lc,Node *rc,int h=0) :data(e),lchild(lc),rchild(rc),height(h)&#123;&#125;&#125;;template&lt;class T&gt;class AVLTree&#123; private: Node&lt;T&gt; *root; void insert(const T &amp;x,Node&lt;T&gt; *&amp;t); void remove(T e,Node&lt;T&gt; *&amp;t); void set_empty(); public: AVLTree()&#123; root=NULL; &#125; ~AVLTree()&#123; set_empty(root); &#125; bool is_empty(); void set_empty(Node&lt;T&gt; *t); T find_min(Node&lt;T&gt; *t); T find_max(Node&lt;T&gt; *t); int get_height(Node&lt;T&gt; *t); Node&lt;T&gt;* get_root(); void insert(const T &amp;x); void rotate_right(Node&lt;T&gt; *&amp;t); void rotate_left(Node&lt;T&gt; *&amp;t); void right_left(Node&lt;T&gt; *&amp;t); void left_right(Node&lt;T&gt; *&amp;t); void show_smaller(Node&lt;T&gt; *t); void show_bigger(Node&lt;T&gt; *t); void remove(T e); int tree_height(Node&lt;T&gt; *t); void get_near1(Node&lt;T&gt; *t); void get_near2(Node&lt;T&gt; *t);&#125;;template&lt;class T&gt;bool AVLTree&lt;T&gt;::is_empty()&#123; return root==NULL;&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::set_empty(Node&lt;T&gt; *t)&#123; if(t!=NULL)&#123; set_empty(t-&gt;lchild); set_empty(t-&gt;rchild); delete t; &#125;&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::set_empty()&#123; this-&gt;set_empty(root);&#125;template&lt;class T&gt;int AVLTree&lt;T&gt;::get_height(Node&lt;T&gt; *t)&#123; return t==NULL?-1:t-&gt;height;&#125;template&lt;class T&gt;Node&lt;T&gt;* AVLTree&lt;T&gt;::get_root()&#123; return root;&#125;template&lt;class T&gt;T AVLTree&lt;T&gt;::find_max(Node&lt;T&gt; *t)&#123; if(t-&gt;rchild==NULL)return t-&gt;data; else return find_max(t-&gt;rchild);&#125;template&lt;class T&gt;T AVLTree&lt;T&gt;::find_min(Node&lt;T&gt; *t)&#123; if(t-&gt;lchild==NULL)return t-&gt;data; else return find_min(t-&gt;lchild);&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::insert(const T &amp;x,Node&lt;T&gt; *&amp;t)&#123; if(t==NULL)&#123; t=new Node&lt;T&gt;(x,NULL,NULL); &#125; else if(x&lt;t-&gt;data)&#123; insert(x,t-&gt;lchild); if(get_height(t-&gt;lchild)-get_height(t-&gt;rchild)==2)&#123; if(get_height(t-&gt;lchild-&gt;lchild)&gt;get_height(t-&gt;lchild-&gt;rchild)) rotate_right(t); else left_right(t); &#125; &#125; else if(x&gt;t-&gt;data)&#123; insert(x,t-&gt;rchild); if(get_height(t-&gt;rchild)-get_height(t-&gt;lchild)==2)&#123; if(get_height(t-&gt;rchild-&gt;lchild)&gt;get_height(t-&gt;rchild-&gt;rchild)) right_left(t); else rotate_left(t); &#125; &#125; //cout&lt;&lt;get_height(t-&gt;lchild)&lt;&lt;" "&lt;&lt;get_height(t-&gt;rchild)&lt;&lt;endl; t-&gt;height=max(get_height(t-&gt;lchild),get_height(t-&gt;rchild))+1;&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::insert(const T &amp;x)&#123; insert(x,root);&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::rotate_right(Node&lt;T&gt; *&amp;t)&#123; Node&lt;T&gt; *p=t-&gt;lchild; t-&gt;lchild=p-&gt;rchild; p-&gt;rchild=t; t-&gt;height=max(get_height(t-&gt;lchild),get_height(t-&gt;rchild))+1; p-&gt;height=max(get_height(p-&gt;lchild),t-&gt;height)+1; t=p;&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::rotate_left(Node&lt;T&gt; *&amp;t)&#123; Node&lt;T&gt; *p=t-&gt;rchild; t-&gt;rchild=p-&gt;lchild; p-&gt;lchild=t; t-&gt;height=max(get_height(t-&gt;lchild),get_height(t-&gt;rchild))+1; p-&gt;height=max(get_height(p-&gt;rchild),t-&gt;height)+1; t=p;&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::left_right(Node&lt;T&gt; *&amp;t)&#123; rotate_left(t-&gt;lchild); rotate_right(t);&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::right_left(Node&lt;T&gt; *&amp;t)&#123; rotate_right(t-&gt;rchild); rotate_left(t);&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::remove(T e,Node&lt;T&gt; *&amp;t)&#123; if(t==NULL)return; if(e&lt;t-&gt;data)remove(e,t-&gt;lchild); else if(e&gt;t-&gt;data)remove(e,t-&gt;rchild); else&#123; if(t-&gt;lchild!=NULL&amp;&amp;t-&gt;rchild!=NULL)&#123; Node&lt;T&gt; *p=t-&gt;rchild; while(p-&gt;lchild!=NULL)p=p-&gt;lchild; t-&gt;data=p-&gt;data; remove(p-&gt;data,t-&gt;rchild); &#125; else&#123; Node&lt;T&gt; *p=t-&gt;lchild==NULL?t-&gt;rchild:t-&gt;lchild; // cout&lt;&lt;t-&gt;data&lt;&lt;endl; delete t; t=p; return; &#125; &#125; if(get_height(t-&gt;lchild)-get_height(t-&gt;rchild)==2)&#123; if(get_height(t-&gt;lchild-&gt;lchild)&gt;get_height(t-&gt;lchild-&gt;rchild)) rotate_right(t); else left_right(t); &#125; else if(get_height(t-&gt;rchild)-get_height(t-&gt;lchild)==2)&#123; if(get_height(t-&gt;rchild-&gt;lchild)&gt;get_height(t-&gt;rchild-&gt;rchild)) right_left(t); else rotate_left(t); &#125; t-&gt;height=max(get_height(t-&gt;lchild),get_height(t-&gt;rchild))+1;&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::remove(T e)&#123; remove(e,root);&#125;template&lt;class T&gt;int AVLTree&lt;T&gt;::tree_height(Node&lt;T&gt; *t)&#123; if(t==NULL)return 0; int lh=0,rh=0; lh=tree_height(t-&gt;lchild)+1; rh=tree_height(t-&gt;rchild)+1; return max(lh,rh);&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::get_near1(Node&lt;T&gt; *t)&#123; if(t==NULL)return; if(t-&gt;lchild==NULL&amp;&amp;t-&gt;rchild==NULL)&#123; cout&lt;&lt;t-&gt;data&lt;&lt;" "; return; &#125; int lh=0,rh=0; lh=tree_height(t-&gt;lchild); rh=tree_height(t-&gt;rchild); // cout&lt;&lt;lh&lt;&lt;" "&lt;&lt;rh&lt;&lt;endl; if(lh&lt;=rh&amp;&amp;lh!=0)get_near1(t-&gt;lchild); else if(rh&lt;lh&amp;&amp;rh!=0)get_near1(t-&gt;rchild); else&#123;//有一个为0 get_near1(t-&gt;lchild); get_near1(t-&gt;rchild); &#125;&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::get_near2(Node&lt;T&gt; *t)&#123; if(t==NULL)return; if(t-&gt;lchild==NULL&amp;&amp;t-&gt;rchild==NULL)&#123; cout&lt;&lt;t-&gt;data&lt;&lt;" "; return; &#125; int lh=0,rh=0; lh=tree_height(t-&gt;lchild); rh=tree_height(t-&gt;rchild); if(lh&lt;rh&amp;&amp;lh!=0)get_near2(t-&gt;lchild); else if(lh&gt;rh&amp;&amp;rh!=0)get_near2(t-&gt;rchild); else&#123; get_near2(t-&gt;lchild); get_near2(t-&gt;rchild); &#125;&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::show_smaller(Node&lt;T&gt; *t)&#123; if(t!=NULL)&#123; show_smaller(t-&gt;rchild); cout&lt;&lt;t-&gt;data&lt;&lt;" "; show_smaller(t-&gt;lchild); &#125;&#125;template&lt;class T&gt;void AVLTree&lt;T&gt;::show_bigger(Node&lt;T&gt; *t)&#123; if(t!=NULL)&#123; show_bigger(t-&gt;lchild); cout&lt;&lt;t-&gt;data&lt;&lt;" "; show_bigger(t-&gt;rchild); &#125;&#125;int main()&#123; AVLTree&lt;int&gt; avl; srand(time(NULL)); int tmp; cout&lt;&lt;endl&lt;&lt;"-----插入随机数-----"&lt;&lt;endl&lt;&lt;endl; for(int i=0;i&lt;100;i++)&#123; tmp=rand()%2333; cout&lt;&lt;tmp&lt;&lt;" "; avl.insert(tmp); &#125; cout&lt;&lt;endl; cout&lt;&lt;endl&lt;&lt;"-----从小到大输出-----"&lt;&lt;endl&lt;&lt;endl; avl.show_bigger(avl.get_root()); cout&lt;&lt;endl; cout&lt;&lt;endl&lt;&lt;"-----从大到小输出-----"&lt;&lt;endl&lt;&lt;endl; avl.show_smaller(avl.get_root()); cout&lt;&lt;endl; cout&lt;&lt;endl&lt;&lt;"-----树的高度-----"&lt;&lt;endl&lt;&lt;endl; cout&lt;&lt;avl.tree_height(avl.get_root())&lt;&lt;endl; cout&lt;&lt;endl&lt;&lt;"-----删除最后一个插入的随机数-----"&lt;&lt;endl&lt;&lt;endl; avl.remove(tmp); avl.show_bigger(avl.get_root()); cout&lt;&lt;endl; cout&lt;&lt;endl&lt;&lt;"-----距离根最近的叶节点的值-----"&lt;&lt;endl&lt;&lt;endl; avl.get_near1(avl.get_root()); cout&lt;&lt;endl&lt;&lt;endl; avl.get_near2(avl.get_root()); cout&lt;&lt;endl&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java第六次作业（JFrame 计算器）]]></title>
    <url>%2F16b7bd4f%2F</url>
    <content type="text"><![CDATA[写bug和补作业的一天又一天 本来写的差不多了的。。但是我作死的觉得一个有灵魂的计算器。。一定要会叫“归零”“归零”“归零”“归零”“归零”“归零”。。所以研究了一下怎么播放声音注入灵魂。。然后。。各种方法都失败了，说啥AudioClip废弃了。。算了懒得搞了。。失去灵魂 题目：创建一个Frame，完成一个计算器的功能 思路：1.初始化Main继承自JFrame 1）布局首先确定布局，如下图 2）变量根据上面需要的东西，就可以写出一堆变量 按键我分了三个部分 1234private final String[] main_option=&#123;"7","8","9","/","sqrt","4","5","6", "*","%","1","2","3","-","1/x","+/-","0",".","+","="&#125;;private final String[] command_option=&#123;"Back","CE","C"&#125;;private final String[] other_option=&#123;" ","sin","MC","cos","MR","tan","MS","ln","M+","log10"&#125;; 按钮，显示输入和结果的文本框 1234private JButton main_button[]=new JButton[main_option.length];private JButton command_button[]=new JButton[command_option.length];private JButton other_button[]=new JButton[other_option.length];private JTextField tf=new JTextField("0"); 此外，还有下面几个变量 12345private boolean is_first_num=true;//记录是否开始输入数字private double ans_number=0.0;//保存运算结果private String operator="=";//保存操作符private boolean legal=true;//是否合法private double store_number=0.0;//保存M系列功能键存储的数 3）布局实现用一些panel实现布局，具体见init()函数 main_button和command_button对应的main_panel和command_panel放一个panel1里，这样这两个就可以变成一块，仔放到最大的panel中间getContentPane().add(panel1,BorderLayout.CENTER);，同理，文本框对应的panel放north，其他other放west @网格布局 GridLayout()： 创建具有默认值的网格布局，即每个组件占据一行一列。 GridLayout(int rows, int cols)： 创建具有指定行数和列数的网格布局。Rows为行数，cols为列数。 GridLayout(int rows, int cols, int hgap, int vgap)： 创建具有指定行数、列数以及组件水平、纵向一定间距的网格布局。 4）事件监听器初始化的时候为按钮添加事件监听器 123456789for(int i=0;i&lt;main_option.length;i++)&#123; main_button[i].addActionListener(this);&#125;for(int i=0;i&lt;command_option.length;i++)&#123; command_button[i].addActionListener(this);&#125;for(int i=0;i&lt;other_option.length;i++) &#123; other_button[i].addActionListener(this);&#125; 2.actionPerformed事件监听器函数，处理单击不同按钮时触发的事件 123456789101112131415161718192021public void actionPerformed(ActionEvent e)&#123; String cur_button=e.getActionCommand(); if(cur_button.equals(command_option[0]))&#123; set_back(); &#125; else if(cur_button.equals(command_option[1]))&#123; tf.setText("0"); &#125; else if(cur_button.equals(command_option[2]))&#123; set_c(); &#125; else if("0123456789.".indexOf(cur_button)&gt;=0)&#123; set_number(cur_button); &#125; else if(cur_button.indexOf("M")!=-1)&#123; set_m(cur_button); &#125; else&#123; set_cal(cur_button); &#125;&#125; 这里有五个set_xxx的函数，分别对应不同的功能 3.功能函数五个set_xxx的函数和一个附加的获取数字的函数 123456private void set_back();//回退private void set_number(String text);//设置数字private void set_m(String cur_button);//存储功能键private void set_c();//全部清零private void set_cal(String cur_button);//其他求值运算符private double get_text_number();//获取输入数字 设置数字set_number这个函数中要注意对小数点的处理，如果有小数点了就不能再加了，这样从文本框中读取数据时才不会出错 运算逻辑就是如果输入数字就输入数字，初始化操作符为“=”，如果按了某操作符，那么先执行初始化的等于，再将该按下的操作符保存，输入另一个数，在按下下一个操作符时，这时候调用的操作符就是上一次按的那个，就可以完成对前两个数字的运算，并将结果更新到文本框中 输出结果的时候还要控制一下小数形式还是整数形式，实现如下 12345678910long t1;double t2;t1=(long)ans_number;t2=ans_number-t1;if(t2==0)&#123; tf.setText(String.valueOf(t1));&#125;else&#123; tf.setText(String.valueOf(ans_number));&#125; 4.main函数调用这个计算器的类，可视，然后设置用户单击窗口的关闭按钮时程序执行的操作是退出 123Main main_cal=new Main();main_cal.setVisible(true);main_cal.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 运行效果： 代码：]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[QT 简易浏览器+截图]]></title>
    <url>%2Ffb59c576%2F</url>
    <content type="text"><![CDATA[之前小学期的代码。。大作业做的这个实话实说没啥功能并不好用的浏览器。。这个当时没写实现说明来着。。那就没有说明啦 架构 效果isafari，当时随手用心取的名字。。 这是一个基于Qt WebEngine Widgets的浏览器； 目前具有多窗口网页浏览/网页缩放/工具栏显示隐藏/工具栏风格设置/fusion风格/macintosh风格/windows风格/网页内容查找/历史记录/全网页截图/截图到剪切板/截图到文件/的功能 ； 截图功能是利用QPixmap里的函数实现的；别的网页相关的功能是利用QWebView里的函数实现的； 下面两张图一个是webview自带的右键菜单，第二个是在工具栏中选择后可以实现截图到剪切板和截图保存到文件的右键菜单 查找功能 网页中对应的字会变底色 历史记录 按下文字后可以跳转到对应的链接； 尚待开发的功能：新建空白页/历史记录的继承/支持下载功能/网页区域截图等； 遇到的问题和解决1.mac系统下icon的设置1.用app icon gear生成png文件； 2.文件名必须按照icon_32x32.png格式； 3.将文件放到任意文件夹中，命名为xx.iconset； 4.在终端输入iconutil -c icns “/Users/bibi/Desktop/xx.iconset”生成icns图标； 2.打开新窗口后地址栏地址不变添加函数内第一行那句话即可； 3.无法播放视频 4.无法下载！！！没解决。。太麻烦了 5.更换网页图标的功能并没有显示出具体效果原因不明，或许不是代码的锅吧。。 其他用这个浏览器浏览自己网站的时候发现。。被记录的信息是这样的 代码https://github.com/LeFlacon/QT-simple-practice/tree/master/liulanqi]]></content>
      <categories>
        <category>QT</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[QT 涂鸦程序，放大]]></title>
    <url>%2Fafb3d1ef%2F</url>
    <content type="text"><![CDATA[之前小学期的代码。。这个说明我竟然连个rtfd都没留。。只有一个pdf版的。。而且每句话结尾都是分号。。什么毛病-_-# 题目基于Qt鼠标事件和2D绘图，实现一个涂鸦程序，可在“画布”上绘出鼠标左键按下后拖动的轨迹 选做：添加“放大”按钮，可实现放大功能，并能在放大后的画布上继续作图 效果 实现思路1.新建了一个myLine结构，这个结构包括QPoint startp和QPoint endp，用一个vector来存这些点; 两个全局变量量，bool isPressed来记录⿏标是否按下，int scale来记录当前是否放⼤; 2.实现绘图功能的基本函数先在构造函数中把鼠标的拖动设置好this- &gt;setMouseTracking(true); isPressed初始设置成false，⿏鼠标没有按下; void paintEvent(QPaintEvent *p); 设置好QPainter和Qpen，循环lines中的每一个点，⽤drawLine()函数画出来; void mousePressEvent(QMouseEvent *e); 鼠标按下，把⿏标的坐标给startp和endp，ispressed标记为true;void mouseMoveEvent(QMouseEvent *e); 若ispressed标记为true，就要记录⿏标拖动的路径，获取坐标存⼊endp中，把新的myline存⼊ vector中，然后update()更新界面把画的显示出来，startp=endp，这样这⼀次的尾坐标就是下一次的头坐标，使点变成连续的线;void mouseReleaseEvent(QMouseEvent *e);鼠标释放，ispressed改为false; 3.实现放⼤大功能一个槽函数fangda()，在widget.cpp构造函数中生成按钮时，把按钮的clicked()信号和这个槽函数联系; 因为要放大之前画的所有东⻄西，所以循环vector中的每个点，把他们的startp和endp的坐标都乘2，这样就可以实现整体的放大，然后调⽤repaint()立即显示放⼤后的图; 然后回到paintevent函数中，加上⼀句如果scale不等于1，就把scale置1，以便下次放⼤时⽤; 4.问题记录按下放⼤按钮后，改变了之前的坐标，但update()无法实现⻢上更新画布的操作，要等到下一次画才能显示出放大效果，这里用repaint()即可实现按下按钮就放大; 架构 代码https://github.com/LeFlacon/QT-simple-practice/tree/master/draw]]></content>
      <categories>
        <category>QT</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[QT 文本编辑器]]></title>
    <url>%2Fcf72cda3%2F</url>
    <content type="text"><![CDATA[之前小学期的代码。。当时写的说明文件还没用md格式，写的也乱七八糟的。。唉真麻烦 题目基于QMainWindow类和QTextEdit类实现一个文本编辑器，要求至少包含以下功能：新建、打开、关闭、保存、另存为、查找菜单栏和工具栏都要有相应图标 效果 【菜单栏】：1234[文件]—新建/打开/保存/另存为[编辑]—撤销/重做—剪切/复制/粘贴/删除—全选/全部删除—查找[格式]—字体/颜色[帮助]—关于 【状态栏】：左下角“欢迎使用建议文本编辑器”在打开文本编辑器时出现五秒，然后消失；右下角“…”一直存在； 【工具栏】：分别为菜单栏中对应的新建/打开/保存/另存为/字体/撤销/重做/查找/关于；因为有些功能没有找到适合的图标所以没有加入到工具栏中； 【其他按钮功能】：统计行数和字数按钮（其中中英文都按一个字符来算）； 架构 具体实现1.先设置菜单栏并添加各个动作，关于菜单栏的动作无法使用中文输入的问题，我的解决方法是：直接输入英文，比如输入xinjian，然后会生成actionxinjian，然后在右下角更改动作的text属性输入“新建”即可； 2.在ui界面添加textEdit，并设置窗体垂直布局管理，这样textedit大小可随窗体一起改变； 3.图标添加图标资源文件，在动作编辑器中为动作添加图标和快捷键； 4.状态栏设置状态栏ui-&gt;statusBar； 其中一直显示的通过addPermanentWidget实现； 显示五秒的通过设置showMessage的参数5000ms实现； 5.textEdit中自带复制/粘贴/撤销/重做/剪切/全选槽函数，可以直接与对应动作关联，因此这些函数在此不详细展开；￼ 其中全删函数通过全选加删除选取两个函数组合来实现；但是此处有一个问题，qt并没有提供delete（）相关的槽函数，笔者能力有限，所以此处暂且用cut（）来代替实现删除选区的功能； 6.在mainwindow.h声明一些文件菜单下的功能函数，然后在mainwindow.cpp中完成对这些功能函数的定义 ；载入文件/打开文件/保存函数； 关于查找功能的实现：先初始化查找的对话框findDialog，并添加一个输入查找字符的lineEdit和“查找下一个”的按钮，然后通过textEdit提供的find（）函数来实现查找，这里设置的方向是backward，从后往前找，如果没有找到就跳出没有找到的messagebox 关于保存的逻辑问题，思路如下： 首先设置bool型变量isSaved来记录文件是否保存过，int型变量num代表textEdit中的字数； saveFile();保存文件窗口 file_Save();如果文件没有保存过就执行file_SaveAs()另存为，如果保存过就直接saveFile()跳出保存文件窗口 file_SaveOrNot();跳出messagebox文件未保存，是否保存，如果是则调用file_Save() file_SaveAs();另存为 然后重写colseEvent（关闭文本编辑器时的事件处理函数），先更新当前字数num，如果isModified（）且字数num不等于0说明写入了内容，就调用file_SaveOrNot()问是否保存，如果按Yes则调用file_Save()，如果按No就不保存当前的直接退出，如果按取消就不接受事件，会回到原来的文本编辑器窗口； 7.设置txt文本拖入事件；这里有一个要注意的地方是： 如果把txt直接拖入textEdit中会显示文件的路径，达不到显示txt文件里内容的效果，所以在构造函数中先设置： 12ui-&gt;textEdit-&gt;setAcceptDrops(false);setAcceptDrops(true); 即textEdit不接受drop事件，而窗体可以接受； 8.把各个动作转到槽，actionxxx_triggered()； 在槽函数中调用相应的功能函数即可； 其中设置字体和颜色这两个功能没有写功能函数，是直接写在对应槽函数中实现的； 但是其中设置字体的部分无法到达预期效果，经过各种调试和实验发现，如果在构造函数中将字体初始设置为（黑体，16号）ui-&gt;textEdit-&gt;setCurrentFont(QFont(tr(“黑体”),16));选中文字，然后打开fontdialog设置好自己选择的字体后，textedit中的字体会从（黑体，16）变成默认的字体和默认的13号，并没有根据选中的设置来，而咨询了同学同样的代码在她的qt中则可以实现更换字体的功能，尚不清楚问题所在； 我的代码如下： ￼ 9.帮助-关于写一个massagebox输出一些基本信息即可 10.统计字数和行数的按钮在.h文件里设置两个int型变量num和linenum，先获取textEdit的内容到document变量中，然后用lineCount（）函数得到行数，再获取内容到string中，用length（）获取字数，其中记录字数的编码格式为（UTF-8），英文和中文都按一个字符来算，用一个messagebox输出结果即可； 代码https://github.com/LeFlacon/QT-simple-practice/tree/master/txt]]></content>
      <categories>
        <category>QT</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[QT 登陆对话框输入用户名密码]]></title>
    <url>%2F53180a5f%2F</url>
    <content type="text"><![CDATA[之前小学期的代码。。懒得写注释了。。丢上来先 题目程序运行开始出现一个对话框，在弹出对话框中填写用户名和密码，按下登录按钮，如果用户名和密码均正确则进入主窗口，如果有错则弹出警告对话框。如果直接关闭这个对话框，便不能进入主窗口，整个程序也将退出。进入主窗口后，按下显示对话框按钮，会弹出一个对话框（和之前登陆对话框不同），关闭这个对话框，会回到主窗口。 架构 运行效果如果输入密码正确就可以直接登录进入主窗口 如果输入错误就会提示错误 代码https://github.com/LeFlacon/QT-simple-practice/tree/master/denglu]]></content>
      <categories>
        <category>QT</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构第七次作业（最大堆，Python和c++实现霍夫曼编码）]]></title>
    <url>%2F6e0586a2%2F</url>
    <content type="text"><![CDATA[没法读文件也没法写文件的sublime。。更不要说处理二进制文件了。。唉那么霍夫曼编码就用Python写一发吧，写了一半的c++版本也丢上来了φ(･_･ 作业一：题目：根据下面的假设，重新编写maxHeap的方法 1）在创建堆时，创建者应该提供两个元素maxElement和minElement，堆中没有元素比maxElement大，也没有元素比minElement小 2）一个n元素的堆需要一个数组heap[0:2n+1] 3）n个元素按本节所描述的方法存储在heap[1:n]中 4）maxElement存储在heap[0]中 5）minElement存储在heap[n+1:2n+1]中 这些假设应该使push和pop的代码简化。通过实验将本练习的实现与本节的实现做比较。 思路：极大值极小值，还是“哨兵”的那个原理 设置heap[0]=maxElem和heap[n+1:2n+1]=minElem Pushpush中while的比较本来要比较两次，现在有了这个heap[0]，只需一个x&gt;heap[i/2]即可，因为无论如何x最后都小于heap[1/2]=heap[0]，然后跳出while，push到根节点 123456789101112template&lt;class T&gt;MaxHeap_&lt;T&gt;&amp; MaxHeap_&lt;T&gt;::Push(const T&amp; x)&#123; if(CurrentSize==MaxSize)cout&lt;&lt;"满"&lt;&lt;endl; int i=++CurrentSize; //while(i!=1&amp;&amp;x&gt;heap[i/2])&#123;修改这句判断条件 while(x&gt;heap[i/2])&#123; heap[i]=heap[i/2]; i/=2; &#125; heap[i]=x; return *this;&#125; pop同理，加了一堆最小值，就可以在比较的时候设置下限 本来既要比较ci和CurrentSize又要比较y和heap[ci]，有了极小值之后，只要比较y和heap[ci]这两个就可以了，因为如果儿子到了无穷小就说明父节点以及不能向下了 1234567891011121314151617181920212223242526272829template&lt;class T&gt;MaxHeap&lt;T&gt;&amp; MaxHeap&lt;T&gt;::Pop(T&amp; x)&#123; if(CurrentSize==0)&#123; cout&lt;&lt;"空"&lt;&lt;endl; return *this; &#125; x=heap[1]; T y=heap[CurrentSize--]; heap[CurrentSize--]=-INF;//增加这句，把最后一个点移到开头后最后一个点位置及时置为极小值 int i=1,ci=2; /*原先是靠CurrentSize来控制下限 while(ci&lt;=CurrentSize)&#123; if(ci&lt;CurrentSize&amp;&amp;heap[ci]&lt;heap[ci+1])ci++; if(y&gt;=heap[ci])break; heap[i]=heap[ci]; i=ci; ci*=2; &#125; */ //修改为如下直接靠heap[i]的值来控制条件，比较次数减半 while(heap[ci]&gt;y)&#123; if(heap[ci]&lt;heap[ci+1])ci++; heap[i]=heap[ci]; i=ci; ci*=2; &#125; heap[i]=y; return *this;&#125; 运行效果：数据采用随机生成的方式，多次测试都是方法二比方法一快 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int MAXN=1e9;template&lt;class T&gt;class MaxHeap&#123; public: MaxHeap(int MaxHeapSize=MAXN); //~MaxHeap()&#123;delete [] heap;heap=NULL;&#125; int Size()const &#123;return CurrentSize;&#125; T Max()&#123; if(CurrentSize==0)cout&lt;&lt;"空"&lt;&lt;endl; return heap[1]; &#125; MaxHeap&lt;T&gt;&amp; Push(const T&amp; x); MaxHeap&lt;T&gt;&amp; Pop(T&amp; x); void Initialize(T a[],int size,int ArraySize); void show(); private: int CurrentSize,MaxSize; T *heap;&#125;; template&lt;class T&gt;MaxHeap&lt;T&gt;::MaxHeap(int MaxHeapSize)&#123; MaxSize=MaxHeapSize; heap=new T[MaxSize+1]; CurrentSize=0;&#125;template&lt;class T&gt;MaxHeap&lt;T&gt;&amp; MaxHeap&lt;T&gt;::Push(const T&amp; x)&#123; if(CurrentSize==MaxSize)cout&lt;&lt;"满"&lt;&lt;endl; int i=++CurrentSize; while(i!=1&amp;&amp;x&gt;heap[i/2])&#123; heap[i]=heap[i/2]; i/=2; &#125; heap[i]=x; return *this;&#125;template&lt;class T&gt;MaxHeap&lt;T&gt;&amp; MaxHeap&lt;T&gt;::Pop(T&amp; x)&#123; if(CurrentSize==0)&#123; cout&lt;&lt;"空"&lt;&lt;endl; return *this; &#125; x=heap[1]; T y=heap[CurrentSize--]; int i=1,ci=2; while(ci&lt;=CurrentSize)&#123; if(ci&lt;CurrentSize&amp;&amp;heap[ci]&lt;heap[ci+1])ci++; if(y&gt;=heap[ci])break; heap[i]=heap[ci]; i=ci; ci*=2; &#125; heap[i]=y; return *this;&#125;template&lt;class T&gt;void MaxHeap&lt;T&gt;::Initialize(T a[],int size,int ArraySize)&#123; delete [] heap; heap=a; CurrentSize=size; MaxSize=ArraySize; for(int i=CurrentSize/2;i&gt;=1;i--)&#123; T y=heap[i]; int c=2*i; while(c&lt;=CurrentSize)&#123; if(c&lt;CurrentSize&amp;&amp;heap[c]&lt;heap[c+1])c++; if(y&gt;=heap[c])break; heap[c/2]=heap[c]; c*=2; &#125; heap[c/2]=y; &#125;&#125;template&lt;class T&gt;void MaxHeap&lt;T&gt;::show()&#123; if(CurrentSize==0)&#123; cout&lt;&lt;"空"&lt;&lt;endl; return; &#125; for(int i=1;i&lt;CurrentSize;i++)cout&lt;&lt;heap[i]&lt;&lt;" "; cout&lt;&lt;heap[CurrentSize]&lt;&lt;endl;&#125;template&lt;class T&gt;void HeapSort(T a[],int n)&#123; MaxHeap&lt;T&gt; H(1); H.Initialize(a,n,n); T x; for(int i=n-1;i&gt;=1;i--)&#123; H.Pop(x); a[i+1]=x; &#125;&#125;const int INF=0x3f3f3f3f;template&lt;class T&gt;class MaxHeap_&#123; public: MaxHeap_(int n=MAXN,int maxx=0,int minn=0); //~MaxHeap()&#123;delete [] heap;heap=NULL;&#125; int Size()const &#123;return CurrentSize;&#125; T Max()&#123; if(CurrentSize==0)cout&lt;&lt;"空"&lt;&lt;endl; return heap[1]; &#125; MaxHeap_&lt;T&gt;&amp; Push(const T&amp; x); MaxHeap_&lt;T&gt;&amp; Pop(T&amp; x); void show(); private: int CurrentSize,MaxSize; T maxElem,minElem; T *heap;&#125;; template&lt;class T&gt;MaxHeap_&lt;T&gt;::MaxHeap_(int n,int maxx,int minn)&#123; MaxSize=2*n+1; heap=new T[MaxSize+1]; CurrentSize=0; maxElem=maxx; minElem=minn; heap[0]=maxElem; for(int i=n+1;i&lt;=2*n+1;i++)heap[i]=minElem;&#125;template&lt;class T&gt;MaxHeap_&lt;T&gt;&amp; MaxHeap_&lt;T&gt;::Push(const T&amp; x)&#123; if(CurrentSize==MaxSize)cout&lt;&lt;"满"&lt;&lt;endl; int i=++CurrentSize; while(x&gt;heap[i/2])&#123; heap[i]=heap[i/2]; i/=2; &#125; heap[i]=x; return *this;&#125;template&lt;class T&gt;MaxHeap_&lt;T&gt;&amp; MaxHeap_&lt;T&gt;::Pop(T&amp; x)&#123; if(CurrentSize==0)&#123; cout&lt;&lt;"空"&lt;&lt;endl; return *this; &#125; x=heap[1]; T y=heap[CurrentSize]; heap[CurrentSize--]=-INF; int i=1,ci=2; while(heap[ci]&gt;y)&#123; if(heap[ci]&lt;heap[ci+1])ci++; heap[i]=heap[ci]; i=ci; ci*=2; &#125; heap[i]=y; return *this;&#125;template&lt;class T&gt;void MaxHeap_&lt;T&gt;::show()&#123; if(CurrentSize==0)&#123; cout&lt;&lt;"空"&lt;&lt;endl; return; &#125; for(int i=1;i&lt;CurrentSize;i++)cout&lt;&lt;heap[i]&lt;&lt;" "; cout&lt;&lt;heap[CurrentSize]&lt;&lt;endl;&#125;template&lt;class T&gt;void show(T a[],int n)&#123; for(int i=1;i&lt;n;i++)cout&lt;&lt;a[i]&lt;&lt;" "; cout&lt;&lt;a[n]&lt;&lt;endl; return;&#125;int main()&#123; clock_t t1,t2; int n; cout&lt;&lt;"请输入数字个数n："; cin&gt;&gt;n; int a[n],b[n]; srand(time(NULL)); for(int i=1;i&lt;=n;i++)&#123; a[i]=rand()%INF; b[i]=a[i]; &#125; MaxHeap&lt;int&gt; A(n); MaxHeap_&lt;int&gt; B(n,INF,-INF); //show(a,n); cout&lt;&lt;endl&lt;&lt;"-----测试Push方法-----"&lt;&lt;endl&lt;&lt;endl; t1=clock(); for(int i=1;i&lt;=n;i++)A.Push(a[i]); //A.show(); t2=clock(); cout&lt;&lt;"方法一用时： "&lt;&lt;(t2-t1)&lt;&lt;" CLOCKS_PER_SEC"&lt;&lt;endl&lt;&lt;endl; t1=clock(); for(int i=1;i&lt;=n;i++)B.Push(a[i]); //B.show(); t2=clock(); cout&lt;&lt;"方法二用时： "&lt;&lt;(t2-t1)&lt;&lt;" CLOCKS_PER_SEC"&lt;&lt;endl&lt;&lt;endl; cout&lt;&lt;endl&lt;&lt;"-----测试Pop方法-----"&lt;&lt;endl&lt;&lt;endl; t1=clock(); for(int i=1;i&lt;=n;i++)A.Pop(a[i]); //A.show(); t2=clock(); cout&lt;&lt;"方法一用时： "&lt;&lt;(t2-t1)&lt;&lt;" CLOCKS_PER_SEC"&lt;&lt;endl&lt;&lt;endl; t1=clock(); for(int i=1;i&lt;=n;i++)&#123; B.Pop(a[i]); //B.show(); &#125; t2=clock(); cout&lt;&lt;"方法二用时： "&lt;&lt;(t2-t1)&lt;&lt;" CLOCKS_PER_SEC"&lt;&lt;endl&lt;&lt;endl; return 0;&#125; 作业二：题目：设计一个完整的基于霍夫曼编码的压缩-解压缩软件包，测试你的代码 霍夫曼编码考虑字符的出现频率进行编码 1）获取不同字符的频率2）构造霍夫曼树选择两个w值最小的树合并，权重相加作为新的权重，重复，直至只剩一棵树 霍夫曼树 是一棵二叉树 叶节点是具有不同权值的元素 其他节点仅用于计算，没有实际意义 从根到叶的路径（左0右1）即是该叶的编码 3）遍历根到外部节点路径➔每个字符编码4）用编码替换文本中的字霍夫曼编码的基本思想：让权值高的叶节点尽量靠近根，这样它的路径就能尽量短 1.PythonPython实现思路：一个虚基类HuffNode 继承自HuffNode的类LeafNode，代表叶节点，叶节点没有儿子，isleaf()结果为True，继承自HuffNode的类OtherNode，代表其他节点，其他节点有儿子，isleaf()结果为False 一个霍夫曼树的类，有个encode成员函数实现编码，编码的结果存入字典char_times={}中 压缩先求的所有字符出现的次数 建树就是每次取两个权值最小的节点，先按权值排个序即可list_HuffTree.sort(key=lambda x: x.get_times()) 压缩的结果写入文件的步骤为： 1）写入叶子结点个数，即字符种数2）写入字典中存储的字符和对应的霍夫曼编码3）对原文件中的每一个字符输出其编码 解压缩先按上面的顺序读入1）2），然后就可以开始建树了，建好树之后解码输出，具体见代码 运行效果：1）压缩随便打的几个乱七八糟的字符qwertyuiopasdfghjkldwheduiewhuiudgghjczbcnjbxHvhbkasdhkjssajdakhkHKDWNCYUIYN@EIUq3847c89374n8q4q78&amp;N^*$(@*NCOINSLKMJDHNSJHNKSdahhhhhhhhhhhhhhhhhhh 2）压缩本篇博文 字节数确实变少了 out.txt中的内容如下：（700+行） 然后对压缩后的结果out.txt进行解压缩 还原的一丝不苟，撒花(=ﾟωﾟ)ﾉ🌹 代码：顺便也丢到github上了。。 https://github.com/LeFlacon/Simple-Python-Practice/blob/master/hfm.pyimport siximport sysclass HuffNode(object): def get_times(self): raise NotImplementedError( "抽象类没有定义获取次数的函数") def isleaf(self): raise NotImplementedError( "抽象类没有定义判断是否为叶节点的函数")class LeafNode(HuffNode): def __init__(self,c=0,times=0,): super(LeafNode, self).__init__() self.c=c self.times=times def isleaf(self): return True def get_times(self): return self.times def get_c(self): return self.cclass OtherNode(HuffNode): def __init__(self,lchild=None,rchild=None): super(OtherNode,self).__init__() self.times=lchild.get_times()+rchild.get_times() self.lchild=lchild self.rchild=rchild def isleaf(self): return False def get_times(self): return self.times def get_lchild(self): return self.lchild def get_rchild(self): return self.rchildclass HuffTree(object): def __init__(self,flag,c=0,times=0,left_tree=None,right_tree=None): super(HuffTree, self).__init__() if flag==0: self.root=LeafNode(c,times) else: self.root=OtherNode(left_tree.get_root(), right_tree.get_root()) def get_root(self): return self.root def get_times(self): return self.root.get_times() def encode(self,root,code,char_times): if root.isleaf(): char_times[root.get_c()]=code # print(("it = %c and times = %d code = %s")%(chr(root.get_c()),root.get_times(),code)) return None else: self.encode(root.get_lchild(),code+'0',char_times) self.encode(root.get_rchild(),code+'1',char_times)def build(list_HuffTree): while len(list_HuffTree)&gt;1: list_HuffTree.sort(key=lambda x: x.get_times()) n1=list_HuffTree[0] n2=list_HuffTree[1] list_HuffTree=list_HuffTree[2:] new_HuffTree=HuffTree(1,0,0,n1,n2) list_HuffTree.append(new_HuffTree) return list_HuffTree[0]def yasuo(in_file_name,out_file_name): f=open(in_file_name,'rb') data=f.read() size=f.tell() char_times=&#123;&#125; for x in range(size): tmp=data[x] if tmp in char_times.keys(): char_times[tmp]=char_times[tmp]+1 else: char_times[tmp]=1 # for tmp in char_times.keys(): # print(tmp,' : ',char_times[tmp]) list_HuffTree = [] for x in char_times.keys(): leaf_=HuffTree(0,x,char_times[x],None,None) list_HuffTree.append(leaf_) leaf_num=len(char_times.keys()) a4=leaf_num&amp;255 leaf_num=leaf_num&gt;&gt;8 a3=leaf_num&amp;255 leaf_num=leaf_num&gt;&gt;8 a2=leaf_num&amp;255 leaf_num=leaf_num&gt;&gt;8 a1=leaf_num&amp;255 output=open(out_file_name,'wb') output.write(six.int2byte(a1)) output.write(six.int2byte(a2)) output.write(six.int2byte(a3)) output.write(six.int2byte(a4)) for x in char_times.keys(): output.write(six.int2byte(x)) tmpp=char_times[x] a4=tmpp&amp;255 tmpp=tmpp&gt;&gt;8 a3=tmpp&amp;255 tmpp=tmpp&gt;&gt;8 a2=tmpp&amp;255 tmpp=tmpp&gt;&gt;8 a1=tmpp&amp;255 output.write(six.int2byte(a1)) output.write(six.int2byte(a2)) output.write(six.int2byte(a3)) output.write(six.int2byte(a4)) HTree=build(list_HuffTree) HTree.encode(HTree.get_root(),'',char_times) code='' for i in range(size): key=data[i] code=code+char_times[key] ans=0 while len(code)&gt;8: for x in range(8): ans=ans&lt;&lt;1 if code[x]=='1': ans=ans|1 code=code[8:] output.write(six.int2byte(ans)) ans=0 output.write(six.int2byte(len(code))) ans=0 for i in range(len(code)): ans=ans&lt;&lt;1 if code[i]=='1': ans=ans|1 for i in range(8-len(code)): ans=ans&lt;&lt;1 output.write(six.int2byte(ans)) output.close()def jieyasuo(in_file_name, out_file_name): f=open(in_file_name,'rb') data=f.read() size=f.tell() a1=data[0] a2=data[1] a3=data[2] a4=data[3] j=0 j=j|a1 j=j&lt;&lt;8 j=j|a2 j=j&lt;&lt;8 j=j|a3 j=j&lt;&lt;8 j=j|a4 leaf_num=j char_times=&#123;&#125; for i in range(leaf_num): c=data[4+i*5+0] a1=data[4+i*5+1] a2=data[4+i*5+2] a3=data[4+i*5+3] a4=data[4+i*5+4] j=0 j=j|a1 j=j&lt;&lt;8 j=j|a2 j=j&lt;&lt;8 j=j|a3 j=j&lt;&lt;8 j=j|a4 # print(c,j) char_times[c]=j list_HuffTree=[] for x in char_times.keys(): tmp=HuffTree(0,x,char_times[x],None,None) list_HuffTree.append(tmp) HTree=build(list_HuffTree) HTree.encode(HTree.get_root(),'',char_times) output=open(out_file_name,'wb') code='' currnode=HTree.get_root() for x in range(leaf_num*5+4,size): c=data[x] for i in range(8): if c&amp;128: code=code+'1' else: code=code+'0' c=c&lt;&lt;1 while len(code)&gt;24: if currnode.isleaf(): tmp_byte=six.int2byte(currnode.get_c()) output.write(tmp_byte) currnode=HTree.get_root() if code[0]=='1': currnode=currnode.get_rchild() else: currnode=currnode.get_lchild() code=code[1:] sub_code=code[-16:-8] last_leaf_num=0 for i in range(8): last_leaf_num=last_leaf_num&lt;&lt;1 if sub_code[i]=='1': last_leaf_num=last_leaf_num|1 code=code[:-16]+code[-8:-8+last_leaf_num] while len(code)&gt;0: if currnode.isleaf(): tmp_byte=six.int2byte(currnode.get_c()) output.write(tmp_byte) currnode=HTree.get_root() if code[0]=='1': currnode=currnode.get_rchild() else: currnode=currnode.get_lchild() code=code[1:] if currnode.isleaf(): tmp_byte=six.int2byte(currnode.get_c()) output.write(tmp_byte) currnode=HTree.get_root() output.close()if __name__ == '__main__': print("0.压缩 1.解压缩\n") FLAG=input("请输入操作：") INPUTFILE=input("请输入需要操作的文件名：") OUTPUTFILE=input("请输入保存结果的文件名：") if FLAG=='0': print("压缩文件") yasuo(INPUTFILE,OUTPUTFILE) else: print("解压缩文件") jieyasuo(INPUTFILE,OUTPUTFILE) 2.c++c++实现思路：首先要记录每个字符出现的次数，用了一个map&lt;char,int&gt;char_times_map;，用map直接映射可以省好多事 然后先对叶节点和其他节点初始化，再建树，建树就是选择两个权值最小的节点作为左右儿子，跑个循环即可 123456789for(int i=leaf_num;i&lt;node_num;i++)&#123; int x1,x2; find_min_node(HuffTree,i,x1,x2); // cout&lt;&lt;i&lt;&lt;" "&lt;&lt;x1&lt;&lt;" "&lt;&lt;x2&lt;&lt;endl; HuffTree[i].times=HuffTree[x1].times+HuffTree[x2].times; HuffTree[i].lchild=x1; HuffTree[i].rchild=x2; HuffTree[x1].parent=HuffTree[x2].parent=i;&#125; 建树后就可以获取某个字符对应的编码了 只实现了压缩的c++代码：因为开始写解压的时候发现？？sublime没法读文件的我根本不知道怎么读二进制文件。。只好投靠Python了，压缩部分或许压缩成功了吧。。不管了就这样吧 下面是段废弃的代码，能实现霍夫曼的建树编码压缩操作，仅供参考 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;map&gt;#include &lt;vector&gt;#include &lt;fstream&gt;using namespace std;#define INF 0x3f3f3f3fmap&lt;char,int&gt;char_times_map;map&lt;char,string&gt;char_code_map;class HuffNode&#123; public: char c; int times; int parent; int lchild; int rchild; bool isleaf()&#123; if(lchild==-1&amp;&amp;rchild==-1)return true; return false; &#125; bool have_parent()&#123; return parent!=-1; &#125;&#125;;void encode(HuffNode* HuffTree,int i,string s)&#123; if(HuffTree[i].isleaf())&#123; char_code_map[HuffTree[i].c]=s; return; &#125; if(HuffTree[i].lchild!=-1)&#123; s+='0'; encode(HuffTree,HuffTree[i].lchild,s); &#125; s.erase(s.end()-1);//end()返回最后一个位置的后一个位置 if(HuffTree[i].rchild!=-1)&#123; s+='1'; encode(HuffTree,HuffTree[i].rchild,s); &#125;&#125;void find_min_node(HuffNode *HuffTree,int pos,int &amp;x1,int &amp;x2)&#123; int min1=INF,min2=INF; for(int i=0;i&lt;pos;i++)&#123; if(HuffTree[i].have_parent())continue; else&#123; if(HuffTree[i].times&lt;min2)&#123; if(HuffTree[i].times&lt;min1)&#123; min2=min1; x2=x1; min1=HuffTree[i].times; x1=i; &#125; else&#123; min2=HuffTree[i].times; x2=i; &#125; &#125; &#125; &#125;&#125;void yasuo()&#123; char c; vector&lt;char&gt;in_v; while(cin&gt;&gt;c&amp;&amp;c!='#')&#123; in_v.push_back(c); char_times_map[c]++; &#125; int leaf_num=char_times_map.size(); int node_num=leaf_num*2-1; HuffNode* HuffTree=new HuffNode[node_num]; map&lt;char,int&gt;::iterator it; /* for(it=char_times_map.begin();it!=char_times_map.end();it++) cout&lt;&lt;it-&gt;first&lt;&lt;" : "&lt;&lt;it-&gt;second&lt;&lt;endl; */ //初始化叶节点 it=char_times_map.begin(); for(int i=0;i&lt;leaf_num;i++,it++)&#123; HuffTree[i].c=it-&gt;first; HuffTree[i].times=it-&gt;second; HuffTree[i].parent=HuffTree[i].lchild=HuffTree[i].rchild=-1; &#125; //初始化其他节点 for(int i=leaf_num;i&lt;node_num;i++)&#123; HuffTree[i].times=0; HuffTree[i].parent=HuffTree[i].lchild=HuffTree[i].rchild=-1; &#125; //建树 for(int i=leaf_num;i&lt;node_num;i++)&#123; int x1,x2; find_min_node(HuffTree,i,x1,x2); // cout&lt;&lt;i&lt;&lt;" "&lt;&lt;x1&lt;&lt;" "&lt;&lt;x2&lt;&lt;endl; HuffTree[i].times=HuffTree[x1].times+HuffTree[x2].times; HuffTree[i].lchild=x1; HuffTree[i].rchild=x2; HuffTree[x1].parent=HuffTree[x2].parent=i; &#125; //编码 string str; encode(HuffTree,node_num-1,str); map&lt;char,string&gt;::iterator it2; for(it2=char_code_map.begin();it2!=char_code_map.end();it2++) cout&lt;&lt;it2-&gt;first&lt;&lt;" : "&lt;&lt;it2-&gt;second&lt;&lt;endl; for(int i=0;i&lt;in_v.size();i++)&#123; cout&lt;&lt;char_code_map[in_v[i]]; &#125; //cout&lt;&lt;endl&lt;&lt;"压缩完成"&lt;&lt;endl;&#125;int main()&#123; yasuo(); return 0;&#125; 运行结果：]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 5492 Find a path（dp，方差）]]></title>
    <url>%2F1869630f%2F</url>
    <content type="text"><![CDATA[Sample Input123412 21 23 4 Sample Output1Case #1: 14 Source2015 ACM/ICPC Asia Regional Hefei Online 题意：给一个n*m矩阵，每个位置有一个权值，从(1,1)到(n,m)，只能向右或者向下，到一个位置获得那个位置的分数，求的最小值，Aavg为经过所有点的平均值 题解：先化简一下要求的式子 dp[i][j][k]表示走到(i,j)时Ai和为k得到的Ai^2的和 k最大即(30+30-1)*30&lt;1800 状态转移方程为： 123dp[i+1][j][k+v[i+1][j]]=min(dp[i][j][k]+v[i+1][j]*v[i+1][j],dp[i+1][j][k+v[i+1][j]]);dp[i][j+1][k+v[i][j+1]]=min(dp[i][j][k]+v[i][j+1]*v[i][j+1],dp[i][j+1][k+v[i][j+1]]); 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;#define INF 0x3f3f3f3fconst int N=32;int n,m,v[N][N],dp[N][N][1832];int main()&#123; int t; scanf("%d",&amp;t); for(int cas=1;cas&lt;=t;cas++)&#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) scanf("%d",&amp;v[i][j]); memset(dp,INF,sizeof(dp)); dp[1][1][v[1][1]]=v[1][1]*v[1][1]; int q; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=m;j++)&#123; if(i+1&lt;=n)&#123; q=v[i+1][j]; for(int k=0;k&lt;1800;k++) if(dp[i][j][k]!=INF) dp[i+1][j][k+q]=min(dp[i][j][k]+q*q,dp[i+1][j][k+q]); &#125; if(j+1&lt;=m)&#123; q=v[i][j+1]; for(int k=0;k&lt;1800;k++) if(dp[i][j][k]!=INF) dp[i][j+1][k+q]=min(dp[i][j][k]+q*q,dp[i][j+1][k+q]); &#125; &#125; &#125; int ans=INF; for(int i=0;i&lt;1800;i++) if(dp[n][m][i]!=INF) ans=min(ans,(n+m-1)*dp[n][m][i]-i*i); printf("Case #%d: %d\n",cas,ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codevs 1004 四子连棋（迭代加深搜索）]]></title>
    <url>%2Ff5526d01%2F</url>
    <content type="text"><![CDATA[题目描述 Description在一个4*4的棋盘上摆放了14颗棋子，其中有7颗白色棋子，7颗黑色棋子，有两个空白地带，任何一颗黑白棋子都可以向上下左右四个方向移动到相邻的空格，这叫行棋一步，黑白双方交替走棋，任意一方可以先走，如果某个时刻使得任意一种颜色的棋子形成四个一线（包括斜线），这样的状态为目标棋局。 1234● ○ ● ○ ● ○ ●● ○ ● ○○ ● ○ 输入描述 Input Description从文件中读入一个4*4的初始棋局，黑棋子用B表示，白棋子用W表示，空格地带用O表示。 输出描述 Output Description用最少的步数移动到目标棋局的步数。 样例输入 Sample Input1234BWBOWBWBBWBWWBWO 样例输出 Sample Output15 题解：有两个空格 而且双方都可以先手 移动棋子实际上就是移动空格 如果直接深搜深度是无穷无尽的。。所以迭代加深搜索，设置一个maxd最大深度 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;#define INF 2333char a[5][5];int dir[4][2]=&#123;-1,0,1,0,0,-1,0,1&#125;,maxd;bool ok()&#123; for(int i=1;i&lt;=4;i++)&#123; if(a[i][1]==a[i][2]&amp;&amp;a[i][1]==a[i][3] &amp;&amp;a[i][1]==a[i][4])return true; if(a[1][i]==a[2][i]&amp;&amp;a[1][i]==a[3][i] &amp;&amp;a[1][i]==a[4][i])return true; &#125; if(a[1][1]==a[2][2]&amp;&amp;a[1][1]==a[3][3] &amp;&amp;a[1][1]==a[4][4])return true; if(a[1][4]==a[2][3]&amp;&amp;a[1][4]==a[3][2] &amp;&amp;a[1][4]==a[4][1])return true; return false;&#125;bool dfs(int x1,int y1,int x2,int y2,int d,char col)&#123; char tmp=col=='B'?'W':'B'; if(d==maxd)&#123; if(ok())return true; else return false; &#125; for(int i=0;i&lt;4;i++)&#123; int nx1,ny1,nx2,ny2; nx1=x1+dir[i][0]; ny1=y1+dir[i][1]; nx2=x2+dir[i][0]; ny2=y2+dir[i][1]; if(nx1&gt;=1&amp;&amp;nx1&lt;=4&amp;&amp;ny1&gt;=1&amp;&amp;ny1&lt;=4&amp;&amp;a[nx1][ny1]!=col)&#123; swap(a[x1][y1],a[nx1][ny1]); if(dfs(nx1,ny1,x2,y2,d+1,tmp))return true; swap(a[x1][y1],a[nx1][ny1]); &#125; if(nx2&gt;=1&amp;&amp;nx2&lt;=4&amp;&amp;ny2&gt;=1&amp;&amp;ny2&lt;=4&amp;&amp;a[nx2][ny2]!=col)&#123; swap(a[x2][y2],a[nx2][ny2]); if(dfs(x1,y1,nx2,ny2,d+1,tmp))return true; swap(a[x2][y2],a[nx2][ny2]); &#125; &#125; return false;&#125;int main()&#123; char s[5]; vector&lt;int&gt;v; for(int i=1;i&lt;=4;i++)&#123; scanf("%s",s); for(int j=1;j&lt;=4;j++)&#123; a[i][j]=s[j-1]; if(a[i][j]=='O')&#123; v.push_back(i); v.push_back(j); &#125; &#125; &#125; for(int i=1;i&lt;=INF;i++)&#123; maxd=i; if(dfs(v[0],v[1],v[2],v[3],0,'W'))break; if(dfs(v[0],v[1],v[2],v[3],0,'B'))break; &#125; printf("%d\n",maxd); return 0;&#125;]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round 520 (Div. 2) （A-D）]]></title>
    <url>%2Fbb5eaeba%2F</url>
    <content type="text"><![CDATA[EF待补。。mark A. A Prank（贪心）http://codeforces.com/contest/1062/problem/A 题意：给n个数的递增序列(1≤𝑎1&lt;𝑎2&lt;⋯&lt;𝑎𝑛≤10^3)，这些数的范围是[1,1000]，最小差值为1，问最多拿掉几个数后这个序列还能被复原，比如样例1 3 4 5 6 9，拿掉4 5，3 6之间缺4 5是可以确定的，所以答案为2，比如样例998 999 1000，因为最大也就1000，所以拿掉999 1000，比如样例1 2 3 4 5，最小也就1，拿掉1 2 3 4 贪心取最长的连续的（相差为1），开头和结尾特殊处理一下 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int a[1005];int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d",&amp;a[i]); int ans=0,num=0; for(int i=1;i&lt;n;i++)&#123; if(a[i]-a[i-1]==1)num++; else&#123; ans=max(ans,num-1); num=0; &#125; &#125; ans=max(ans,num-1); if(a[0]==1)&#123; num=0; for(int i=1;i&lt;n;i++) if(a[i]-a[i-1]==1)num++; else break; ans=max(ans,num); &#125; if(a[n-1]==1000)&#123; num=0; for(int i=n-2;i&gt;=0;i--) if(a[i+1]-a[i]==1)num++; else break; ans=max(ans,num); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; B. Mathhttp://codeforces.com/contest/1062/problem/B 题意：给一个数n，可以对这个数进行两种操作：1.乘以任意一个正整数x，2.开根号，求一番操作后能得到的最小的数以及它的操作次数 先分解质因子，记录一下每个质因子的个数，其中最大的那个个数记为maxx，能得到的最小的数就是每个质因子相乘，操作次数就是maxx对应的2的幂次，如果maxx不够或者其他数不够，操作次数+1（也就是需要乘一个数把这些质因子的个数都变成那个2的幂次） 比如5184可以分为2^6*3^4，能得到的最小数就是2*3=6，次数就是ceil(log(6))=3，因为4&lt;8,6&lt;8，所以次数加一，为4 打的时候竟然没想到log。。不知道我在写啥。。代码写麻烦了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;int p[50];vector&lt;int&gt; v;int main()&#123; int n; scanf("%d",&amp;n); p[0]=1; for(int i=1;i&lt;25;i++)p[i]=p[i-1]*2; int tmp=n,ans=1,res=0,num=0,maxx=0; for(int i=2;i&lt;=n&amp;&amp;tmp!=1;i++)&#123; if(tmp%i==0)ans*=i; while(tmp%i==0)&#123; tmp/=i; num++; //2cout&lt;&lt;i&lt;&lt;" "; &#125; if(num!=0)&#123; v.push_back(num); maxx=max(num,maxx); &#125; num=0; &#125; if(ans==n)&#123; res=0; cout&lt;&lt;ans&lt;&lt;" "&lt;&lt;res&lt;&lt;endl; return 0; &#125; int flag=0; int j; for(j=0;maxx&gt;p[j];j++); res=j; if(maxx!=p[j])flag=1; //cout&lt;&lt;res&lt;&lt;endl; for(int i=0;i&lt;v.size();i++) if(v[i]&lt;maxx)flag=1; if(flag)res++; cout&lt;&lt;ans&lt;&lt;" "&lt;&lt;res&lt;&lt;endl; return 0;&#125; C. Banh-mi（前缀和）http://codeforces.com/contest/1062/problem/C 题意：给一个长为n的串，ai=0或1，q次询问，每次取一个[l,r]内 的数，取ai后获得ai分且剩下的所有数各自加上i，求能获得的最大分数 肯定是贪心的先取完1后取0，所以模拟一下最后就是求l,r区间内0和1的个数，答案是2^(0的个数+1的个数)-2^(0的个数)，要模1e9+7，之前没模wa的我怪懵逼的 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=1e5+5;const int p=1e9+7;string s;int num0[N],num1[N];LL qpow(LL a,LL b)&#123; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=(ans*a)%p; b--; &#125; b/=2; a=a*a%p; &#125; return ans;&#125;int main()&#123; int n,q; cin&gt;&gt;n&gt;&gt;q; cin&gt;&gt;s; num0[0]=0;num1[0]=0; for(int i=0;i&lt;n;i++)&#123; if(s[i]=='0')&#123; num0[i+1]=num0[i]+1; num1[i+1]=num1[i]; &#125; else&#123; num0[i+1]=num0[i]; num1[i+1]=num1[i]+1; &#125; &#125; int l,r,x,y; for(int i=0;i&lt;q;i++)&#123; scanf("%d%d",&amp;l,&amp;r); x=num0[r]-num0[l-1]; y=num1[r]-num1[l-1]; //&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl; LL ans=(qpow(2,x+y)-qpow(2,x)+p)%p; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; D. Fun with Integers（欧拉回路）http://codeforces.com/contest/1062/problem/D 题意：给一个大于等于2的数n，如果(a*x=b||b*x=a)&amp;&amp;abs(x)&gt;1，那么a，b连边，边权为|x|，求从n开始走不重复能获得的最大权值 用欧拉回路证明：如果a有b和他连，那么一定有-b也和他连，所以每个点度数都是偶数，一定存在一条欧拉回路，所以一定能走完，直接求所有边权和乘4即可，四是因为有四条边a_b,a_-b,-a_b,-a_-b 可惜当时没想到。。唉 123456789101112131415161718#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longint main()&#123; LL ans=0; int n; cin&gt;&gt;n; for(int i=2;i&lt;=n;i++) for(int j=i+i;j&lt;=n;j+=i) ans+=j/i; cout&lt;&lt;(ans&lt;&lt;2)&lt;&lt;endl; return 0;&#125; E. Company（lca）http://codeforces.com/contest/1062/problem/E 题意：给一颗树，q次询问，删除区间[l,r]中哪一点使lca深度最大，求删除的点和lca深度 rmq+dfs序+st表，区间的lca也是区间内dfs序最小和最大两点的lca，所以删这两个点其中一个，所以先求dfs序然后st表维护区间最值 emmmmm还不会写，只知道个思路 F. Upgrading Citieshttp://codeforces.com/contest/1062/problem/F]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
        <tag>欧拉路径</tag>
        <tag>lca</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构第六次作业（双端队列，二叉树表达式树）]]></title>
    <url>%2F7728dd26%2F</url>
    <content type="text"><![CDATA[现在。。博客索引量最高的。。已经变成java作业和数据结构作业相关的了。。而且上次java第五个作业写错了。。没注意要参数直接scanner了。。那篇阅读数还蛮多ahhhhh真是对不住了我不背锅 作业一：题目：所谓双端队列（double-ended queue，deque），就是在列表的两端都可以插入和删除数据。因此它允许的操作有Create、IsEmpty、IsFull、Left、Right、AddLeft、AddRight、DeleteLeft、DeleteRight。使用循环数组方式实现双端队列，要求实现上述操作，并实现一个Print输出操作，能将队列由左至右的次序输出于一行，元素间用空格间隔。队列元素类型设为整型。 思路：我还是用类来写，总共有五个private属性变量，一个int型指针用于生成数组，cursize表示当前队列大小，maxsize表示最大队列大小，两个索引，front指向最左端，tail指向最右端 判断当前数组内某个位置是否有元素，我是直接设置了一个极大值INF，当然也可以再加一个private成员：一个bool型数组vis来实现 循环数组的实现很简单，就是利用front和next这两个索引，左移就是x=(x-1+maxsize)%maxsize;，右移就是x=(x+1)%maxsize; 因为初始化front=tail=0，所以往队列中添加元素的第一步一定要先判断当前front或tail指向的数组位置是否有数据，同理，最后删除的时候也有一个要注意的地方，如果tail=front的话，删除之后就不必再更新这两个的位置了（否则就可能出现deleteleft之后front还往前移超过tail） 写完先简单测试一下功能： 12345678910111213141516Dequeue_ d(20);for(int i=10;i&lt;20;i++) d.add_right(i);for(int i=20;i&lt;31;i++) d.add_left(i);d.print();cout&lt;&lt;"删除左边两个右边一个："&lt;&lt;endl;d.delete_left();d.delete_left();d.delete_right();d.print();cout&lt;&lt;"添加右边两个左边一个："&lt;&lt;endl;d.add_right((int)233);d.add_right((int)456);d.add_left((int)678);d.print(); 运行效果：样例输入 12345678910AddLeft 1AddLeft 2DeleteRightIsFullDeleteLeftIsEmptyAddRight 3AddLeft 2AddRight 1End 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;#include &lt;fstream&gt;using namespace std;const int N=2333;const int INF=0x3f3f3f3f;class Dequeue_&#123; private: int front; int tail; int cursize; int maxsize; int *t; public: Dequeue_(int a)&#123; front=tail=maxsize=cursize=0; create(a); &#125; bool create(int a); bool is_empty(); bool is_full(); int left(); int right(); bool add_left(int a); bool add_right(int a); int delete_left(); int delete_right(); void print();&#125;;bool Dequeue_::create(int a)&#123; if(maxsize!=0)&#123; cout&lt;&lt;"已经创造过，无法再次创造"&lt;&lt;endl; return false; &#125; if(a&gt;N)&#123; cout&lt;&lt;"太大啦，创造失败"&lt;&lt;endl; return false; &#125; maxsize=a; t=new int[maxsize]; for(int i=0;i&lt;maxsize;i++)t[i]=INF; front=tail=cursize=0; cout&lt;&lt;"队列创造初始化成功"&lt;&lt;endl; return true;&#125;bool Dequeue_::is_empty()&#123; return cursize==0;&#125;bool Dequeue_::is_full()&#123; return cursize==maxsize;&#125;int Dequeue_::left()&#123; if(t[front]!=INF)&#123; cout&lt;&lt;t[front]&lt;&lt;endl; return t[front]; &#125; else&#123; cout&lt;&lt;"空"&lt;&lt;endl; return 0; &#125;&#125;int Dequeue_::right()&#123; if(t[tail]!=INF)&#123; cout&lt;&lt;t[tail]&lt;&lt;endl; return t[tail]; &#125; else&#123; cout&lt;&lt;"空"&lt;&lt;endl; return 0; &#125;&#125;bool Dequeue_::add_left(int a)&#123; if(this-&gt;is_full())&#123; cout&lt;&lt;"FULL"&lt;&lt;endl; return false; &#125; if(t[front]==INF)&#123; t[front]=a; cursize++; this-&gt;print(); return true; &#125; front=(front-1+maxsize)%maxsize; t[front]=a; cursize++; this-&gt;print(); return true;&#125;bool Dequeue_::add_right(int a)&#123; if(this-&gt;is_full())&#123; cout&lt;&lt;"已经满了，添加失败"&lt;&lt;endl; return false; &#125; if(t[tail]==INF)&#123; t[tail]=a; cursize++; this-&gt;print(); return true; &#125; tail=(tail+1)%maxsize; t[tail]=a; cursize++; this-&gt;print(); return true;&#125;int Dequeue_::delete_left()&#123; if(this-&gt;is_empty())&#123; cout&lt;&lt;"EMPTY"&lt;&lt;endl; return 0; &#125; int tmp=t[front]; t[front]=INF; if(front!=tail)front=(front+1)%maxsize; cursize--; this-&gt;print(); return tmp;&#125;int Dequeue_::delete_right()&#123; if(this-&gt;is_empty())&#123; cout&lt;&lt;"EMPTY"&lt;&lt;endl; return 0; &#125; int tmp=t[tail]; t[tail]=INF; if(front!=tail)tail=(tail-1+maxsize)%maxsize; cursize--; this-&gt;print(); return tmp;&#125;void Dequeue_::print()&#123; //cout&lt;&lt;"?????"&lt;&lt;front&lt;&lt;" "&lt;&lt;tail&lt;&lt;endl; if(this-&gt;is_empty())&#123; //cout&lt;&lt;"队列为空"&lt;&lt;endl; cout&lt;&lt;endl; return; &#125; //cout&lt;&lt;"----------输出队列----------"&lt;&lt;endl; for(int i=front;i!=tail;i=(i+1)%maxsize) cout&lt;&lt;t[i]&lt;&lt;" "; cout&lt;&lt;t[tail]&lt;&lt;endl;&#125;int main()&#123; //freopen("in.txt","r",stdin); Dequeue_ d(2333); string s; int a; while(1)&#123; cin&gt;&gt;s; if(s=="End")break; else if(s=="AddLeft")&#123; cin&gt;&gt;a; d.add_left(a); &#125; else if(s=="AddRight")&#123; cin&gt;&gt;a; d.add_right(a); &#125; else if(s=="IsFull")&#123; if(d.is_full())cout&lt;&lt;"YES"&lt;&lt;endl; else cout&lt;&lt;"NO"&lt;&lt;endl; &#125; else if(s=="IsEmpty")&#123; if(d.is_empty())cout&lt;&lt;"YES"&lt;&lt;endl; else cout&lt;&lt;"NO"&lt;&lt;endl; &#125; else if(s=="Left")&#123; d.left(); &#125; else if(s=="Right")&#123; d.right(); &#125; else if(s=="DeleteLeft")&#123; d.delete_left(); &#125; else if(s=="DeleteRight")&#123; d.delete_right(); &#125; &#125; return 0;&#125; 作业二：题目：输入一个中缀表达式，构造表达式树，以文本方式输出树结构 输入：例如，输入a+b+c*(d+e) 输出：以缩进表示二叉树的层次，左——根、右——叶、上——右子树、下——左子树（向左扭一下脖子。。就能看出来是棵树了） 123456789 e + d * c+ b + a 思路：表达式树就是下图这样 虽然中缀表达式人看着很易懂，但是如果要建树的话，还是后缀表达式方便 1.后缀表达式及后缀表达式的建树过程：a b + c d e + * + 后缀表达式建树过程如下： 读入a，读入b，读入+ 读入c，读入d，读入e 读入+ 读入* 读入+ 建完了 2.中缀表达式转化为后缀表达式（逆波兰表达式）因为题目给出的是中缀表达式，所以先把它转变成后缀表达式 要借助栈来操作一番 1234561）遇到左括号，入栈2）遇到右括号，弹出栈中元素，直到弹出的是左括号为止3）遇到运算符，如果栈为空，运算符直接入栈；否则栈中优先级大于等于改运算符的出栈，该运算符入栈4）遇到数字，直接输出0）最后把栈中剩余元素依次弹出 这里涉及到判断当前字符是否是+-*/以及优先级的问题，为了代码的简洁and优美，我用了一个数组yx[128]，给这四个符号对应的char的数字赋值如下yx[&#39;+&#39;]=yx[&#39;-&#39;]=1;yx[&#39;*&#39;]=yx[&#39;/&#39;]=2;，数组中其余元素赋值为0 效果如图： 3.后缀表达式建树上文第一点已经给出了利用后缀表达式建树步骤的图解，代码实现很容易，只需要对后缀表达式的每一位处理，如果是运算符的话就出栈两个元素，一个当右儿子一个当左儿子，如果是数字的话就入栈，等待着当运算符的儿子 这里要注意的一点是，最后指针指向的最后一个生成的节点，肯定是根节点，所以函数返回值就是这个根节点，这样后续才能遍历这棵树 4.输出歪一下头才能看的表达式树setw控制格式，保证每层有同样的宽度，从root开始，先输出右子树再输出左子树，一直递推下去即可，直到某一点的左右儿子为NULL，说明已经到叶子下面了，无需继续 运行效果： 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;stack&gt;#include &lt;fstream&gt;#include &lt;iomanip&gt;using namespace std;int yx[128];string transform(string zhongzhui)&#123; char c; string tmp,houzhui; stack&lt;char&gt;st; int len=zhongzhui.length(); for(int i=0;i&lt;len;i++)&#123; c=zhongzhui[i]; if(c=='(') st.push(c); else if(c==')')&#123; while(st.top()!='(')&#123; tmp=st.top(); houzhui.append(tmp); st.pop(); &#125; st.pop(); &#125; else if(st.empty()&amp;&amp;yx[c]&gt;=1) st.push(c); else if(yx[c]&gt;=1)&#123; while(!st.empty()&amp;&amp;yx[st.top()]&gt;=yx[c])&#123; tmp=st.top(); houzhui.append(tmp); st.pop(); &#125; st.push(c); &#125; else&#123; tmp=c; houzhui.append(tmp); &#125; &#125; while(!st.empty())&#123; tmp=st.top(); houzhui.append(tmp); st.pop(); &#125; return houzhui;&#125;struct Node&#123; char data; Node *lchild,*rchild; Node()&#123; data=0; lchild=NULL; rchild=NULL; &#125;&#125;;Node* build_Tree(string s)&#123; char c; int len=s.length(); Node *p; if(len==0)&#123; cout&lt;&lt;"空"&lt;&lt;endl; return p; &#125; stack&lt;Node*&gt;st; for(int i=0;i&lt;len;i++)&#123; c=s[i]; if(yx[c]&gt;=1)&#123; p=new Node; Node *tmp=st.top(); p-&gt;rchild=tmp; st.pop(); tmp=st.top(); p-&gt;lchild=tmp; st.pop(); p-&gt;data=c; st.push(p); &#125; else&#123; p=new Node; p-&gt;data=c; st.push(p); &#125; &#125; return p;&#125;void show(Node *x,int d)&#123; if(x!=NULL)&#123; show(x-&gt;rchild,d+1); cout.setf(ios::right); cout&lt;&lt;setw(3*d)&lt;&lt;" "; cout&lt;&lt;x-&gt;data&lt;&lt;endl; show(x-&gt;lchild,d+1); &#125;&#125;int main()&#123; freopen("out.txt","w",stdout); memset(yx,0,sizeof(yx)); yx['+']=yx['-']=1; yx['*']=yx['/']=2; string s1,s2; cin&gt;&gt;s1; s2=transform(s1); cout&lt;&lt;s2&lt;&lt;endl; Node* root=build_Tree(s2); show(root,0); return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS下安装Pyspider和安装完成后command not found的解决办法（包括python环境变量配置）]]></title>
    <url>%2F7bbef420%2F</url>
    <content type="text"><![CDATA[1.pip首先得有pip，好像没啥好说的 2.phantomjsPhantomJS 是一个基于 WebKit 的服务器端 JavaScript API。它全面支持web而不需浏览器支持，其快速、原生支持各种Web标准：DOM 处理、CSS 选择器、JSON、Canvas 和 SVG。 PhantomJS 可以用于页面自动化、网络监测、网页截屏以及无界面测试等。 1brew install phantomjs 但是我直接brew install phantomjs失败了 所以根据提示输入如下两句： 12brew tap homebrew/caskbrew cask install phantomjs 就可以成功安装了 3.pyspider项目地址：https://github.com/binux/pyspider 1pip3 install pyspider 如果遇到了Command &quot;python setup.py egg_info&quot; failed with error code 1 in /private/var/folders/pk/08vbgtjs4vz5tzvxl43v6yc80000gn/T/pip-install-uol4vk_m/pycurl/这样的问题，请参考这篇 -&gt; macOS下安装Python第三方库报错“Command “python setup.py egg_info” failed with error code 1”的解决办法（附如何卸载自己安装的python） 4.安装完成后command not found的解决办法1）原因安装完成后我遇到了另一个问题 但是pip3 list列出所有库的时候里面是可以找到pyspider的 查了一些issue有人说是环境变量没有配置好：比如这个-&gt; https://github.com/lucky9322/PYLesson/tree/master/src/main/pyspider_lib 也有人说可能是pip和python位置不同引起的。。这就麻烦了 所以用另一种方式安装pyspider 1sudo python -m pip install pyspider --user 重启终端后有别的输出了，报了下图的错 然后可以发现！？？？2.7！！？？？┬─┬ ノ( ゜-゜ノ) 我大概可能搞明白了，想了想推测应该还是python的锅。。也就是说输入pyspider系统自动调用的是python2.7版本下的pyspider，而2.7版本的环境中又缺失了一堆库（可能是被我之前惨烈的删删装装给搞出了问题。。），所以python3.6版本我本身的安装下载和pyspider.py中需要import的库都是没有问题的，在之前2.7中没有安装pyspider的时候，就会输出command not found（因为当时2.7中确实没下） 所以现在问题在于：输入pyspider，怎么能让系统机智的去调用python3.6版 2）配置python环境变量先查找一下python3装在什么地方 然后根据结果修改，放上我加的两句供参考 1vim ~/.bash_profile :wq保存退出后在终端输入下面这句即可生效 1source ~/.bash_profile 3.设置软链接：1sudo ln -f /usr/local/bin/python3 /usr/local/bin/python 现在输入pyspider，终于可以正常运行了 然后在浏览器输入http://localhost:5000/即可访问 最后不报错的人一分钟能装完然后在端口运行的pyspider。。我整整拖了一个星期。。。。。。。真是快乐啊ヽ(；▽；)ノ]]></content>
      <categories>
        <category>瞎折腾(=ﾟωﾟ)ﾉ</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>mac OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS下安装Python第三方库报错“Command "python setup.py egg_info" failed with error code 1”的解决办法（附如何卸载自己安装的python）]]></title>
    <url>%2F5e90e18e%2F</url>
    <content type="text"><![CDATA[前面只是记录向，如果要看我最终如何解决的这个问题，可以直接跳到最后第三点，由于这个错误网上有很多种解决方法，所以这个方法并不一定能解决你的问题 But I was successful with it (=ﾟωﾟ)ﾉ 这个星期试了很多很多很多很多没有works for me的方法，相当绝望。。数电下课前跟旁边小妹妹说我又浪费了三节课然后！！！！！在下课前一分钟啊啊啊啊啊啊啊出现了Successfully…！！！！！！！啊啊啊啊啊太激动了非常快乐特别快乐无敌快乐原地爆炸原地起飞的快乐！ 1.一堆乱七八糟没啥用的记录本来是要装个Python第三方库pyspiderpip3 install pyspider，然后遇到了“Command &quot;python setup.py egg_info&quot; failed with error code 1 in /private/var/folders/pk/08vbgtjs4vz5tzvxl43v6yc80000gn/T/pip-install-uol4vk_m/pycurl/”这个问题。。 如下图： 经过一系列大风大浪。。大概推测出了几个问题，安装pyspider好像和pycurl有关，但是我也没法安装pycurl，报了类似的错：Command &quot;python setup.py egg_info&quot; failed with error code 1 in /private/var/folders/pk/08vbgtjs4vz5tzvxl43v6yc80000gn/T/pip-build-Q5mgzB/pycurl/ 除了百度的方法还把下面几个链接里说的都试了一遍，还是不行 https://github.com/facebook/prophet/issues/418 https://pypi.org/search/?q=pycurl 但是注意到一个小哥说不建议用Python3.7： 然后去Pyspider的项目说明里看了一下，emmmm好像确实不行？？ 然后我就去重装了python3.6😂 2.macOS下如何卸载自己安装的Python1）删除框架1sudo rm -rf /Library/Frameworks/Python.framework/Versions/3.7 2）删除应用1sudo rm -rf "/Applications/Python 3.7" 3）删除指向python的链接（第二次查看的时候可以发现链接都被删完了） 1234567cd /usr/local/bin/ls -l /usr/local/bin | grep '/Library/Frameworks/Python.framework/Versions/3.7'brew prunels -l /usr/local/bin | grep '/Library/Frameworks/Python.framework/Versions/3.7' 删完之后就可以去官网https://www.python.org/找自己需要的python版本重新下载了 我下的是 3.“Command “python setup.py egg_info” failed with error code 1”的解决办法如果你已经获得了一个合适版本的python，那么请继续 总之我这个报错是macOS高版本引发的（我的macOS版本是10.13.6），和openssl有关，OS 10.11开始，苹果sdk中不再提供openssl，因为openssl是mac不推荐的加密方式，mac有自己的加密方式，于是安装这些第三方库的时候就可能出现找不到openssl 所以解决办法就是在安装前设置一下SSL library 1).升级pip（不更新应该也行）因为官网python3.6.2带的pip版本是9.0.1，所以先升级一下pip，pip3 install --upgrade pip，更新后的pip版本是18.1 2).wheel然后我中途安装了一个wheel，pip3 install wheel 对问题的解决应该没有影响，但它是和egg_info有点关系，就记录一下 wheel是新的Python的disribution，用于替代Python传统的egg文件，目前有超过一半的库文件有对应的wheel文件 也就是说，wheel相当于编译后的东西，可以直接安装。pip默认先下载wheel文件安装，没有的话再源码编译安装 3).openssl下面要输入一些至关重要的话！ 12345export PYCURL_SSL_LIBRARY=opensslexport LDFLAGS=-L/usr/local/opt/openssl/libexport CPPFLAGS=-I/usr/local/opt/openssl/include 不是很懂export PYCURL_SSL_LIBRARY=openssl，但是差不多干的事情就是：“匹配pycurl（或其他）期望的SSL库” 具体讨论可以见stackoverflow的这个问题：SSL backend error when using OpenSSL 4).安装pycurl和pyspider1pip3 install pycurl --compile --no-cache-dir 1pip3 install pyspider successfully!~(≧▽≦)/~ 可以用Pyspider愉快的玩耍了～ 然而！我以为这么就完了的时候！这还没有完！ 如果你成功安装后在终端输入pyspider却遇到了command not found的问题，可以继续参考这篇 -&gt; macOS下安装Pyspider和安装完成后command not found的解决办法（包括python环境变量配置）]]></content>
      <categories>
        <category>瞎折腾(=ﾟωﾟ)ﾉ</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>mac OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归 —— 三色汉诺塔（分离型）]]></title>
    <url>%2F3fcdc8fa%2F</url>
    <content type="text"><![CDATA[双色和单色 -&gt; 递归 —— 汉诺塔&amp;双色汉诺塔（分离型） 三色汉诺塔（分离型）三色汉诺塔如图： 1）三色汉诺塔基本思路：根据分离型二色思路慢慢来 首先肯定是要写一个像二色和单色那样的基础递归hanoi，n=1时每次移三个 1234567891011121314void hanoi(int n,char a,char b,char c)&#123; if(n==1)&#123; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; &#125; else&#123; hanoi(n-1,a,c,b); cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; hanoi(n-1,b,a,c); &#125;&#125; n=3时：然后分析一下n=3的时候的移动策略，共六步，如下： 然后考虑递归思路： 错误递归思路：先放上我一开始错误的思路。。这种思路不是最优的 1.把A上的n-3个借助B移到C上 2.三步把A上的三个大盘移到B上 3.把C上的n-3个借助B移到A上 4.三步把B上的三个大盘移到C上 5.把A上的n-3个借助C移到B上 6.两步把C上的两个大盘移到A上 7.把B上的n-3个借助C移回A上 8.一步把C上的大盘移到B上 最后一层可以不用看了，现在已经转化成了一个n-3的子局面，所以只要像双色汉诺塔那样跑个循环即可 错误代码就不放了。。反正也被我搞没了。。错误的运行结果是这样的： 更优的思路如下： 网上的递归思路：如果n=3直接输出六步，否则先进行如下八步操作： 1.把A上的n-3个借助B移到C上 2.把A上的3个大盘移到B上 3.C上的n-3个借助B移回A上 4.B上的3个大盘移到C上 5.A上的n-3个借助C移到B上 6.C上的两个大盘移到A上 7.B上的n-3个借助A移到C上 8.A上的一个大盘移到B上 然后跑个循环： 循环中步骤如下： 1.把C上n-6个借助A移到B上 2.把C上两个稍大盘移到A上 3.把B上n-6个借助A移回C 4.A上一个稍大盘移到B上 完成一遍循环，又回到了下一步要操作的i-3个盘都在C上的子状态，很奇妙 可能有人疑惑那为什么不直接一开始就把A上所有盘移到C上满足那个子状态，然后直接跑循环而不经过一开始的八步，因为那样做相当于是四次hanoi(n-3,a,b,c)，而直接移就是hanoi(n,a,b,c)，这两个差的差不多是2^3也就是八倍左右，所以一开始必须要特殊的移一下，然后才能进入轻松愉快的循环 这个思路的第一步和我之前不是最优的思路一样，都是四次子递归，所以二者数量级是差不多的，但是它快就快在后续的循环里 2）运行结果 除了前两项，后面的结果都满足an=f[n]-2*f[n-1]，an为公差为3的等差数列，那就先这样好啦 3）代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int num;void hanoi(int n,char a,char b,char c)&#123; if(n==1)&#123; /* cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; */ num+=3; &#125; else&#123; hanoi(n-1,a,c,b); /* cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; */ num+=3; hanoi(n-1,b,a,c); &#125;&#125;void hanoi3(int n,char a,char b,char c)&#123; if(n==3)&#123; /* cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;b&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;b&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;b&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;b&lt;&lt;"-&gt;"&lt;&lt;a&lt;&lt;endl; cout&lt;&lt;c&lt;&lt;"-&gt;"&lt;&lt;b&lt;&lt;endl; */ num+=6; &#125; else&#123; hanoi(n/3-1,a,b,c); /* cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;b&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;b&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;b&lt;&lt;endl; */ num+=3; hanoi(n/3-1,c,b,a); /* cout&lt;&lt;b&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;b&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;b&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; */ num+=3; hanoi(n/3-1,a,c,b); /* cout&lt;&lt;c&lt;&lt;"-&gt;"&lt;&lt;a&lt;&lt;endl; cout&lt;&lt;c&lt;&lt;"-&gt;"&lt;&lt;a&lt;&lt;endl; */ num+=2; hanoi(n/3-1,b,a,c); //cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;b&lt;&lt;endl; num++; for(int i=n/3-1;i&gt;0;i--)&#123; if(i&gt;1)hanoi(i-1,c,a,b); /* cout&lt;&lt;c&lt;&lt;"-&gt;"&lt;&lt;a&lt;&lt;endl; cout&lt;&lt;c&lt;&lt;"-&gt;"&lt;&lt;a&lt;&lt;endl; */ num+=2; if(i&gt;1)hanoi(i-1,b,a,c); //cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;b&lt;&lt;endl; num++; &#125; &#125;&#125;int main()&#123; int nn; char a='A',b='B',c='C'; for(nn=3;nn&lt;=50;nn+=3)&#123; num=0; hanoi3(nn,a,b,c); cout&lt;&lt;nn&lt;&lt;":"&lt;&lt;num&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Java第五次作业（系统属性）]]></title>
    <url>%2F3c9a08ea%2F</url>
    <content type="text"><![CDATA[没有看见要命令行参数。。之前直接愚蠢的scanner了。。现在更新了 题目：编写一个程序，如果没有命令行参数，则列出所有系统属性（属性=属性值），如果有命令行参数，则根据命令行参数显示指定的系统属性（属性=属性值） 思路：用一个list列出所有系统属性： 12Properties pro=System.getProperties();pro.list(System.out); pro.getProperty(s)可以获得名为s的某个指定属性 运行结果： 代码：123456789101112import java.io.*;import java.util.*;public class Main &#123; public static void main(String[] args) &#123; Properties pro=System.getProperties(); if(args.length==0)pro.list(System.out); else&#123; for(String s:args)System.out.println(s+" "+pro.getProperty(s)); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构第五次作业（散列表类 hashTable）]]></title>
    <url>%2F434dcb65%2F</url>
    <content type="text"><![CDATA[这两个作业写的我。。老感觉没读懂题一样。。要是真的读错题了。。还请各路神仙大侠告诉我一声。。 作业一开发一个基于线性探查的散列表类，要求用neverUsed思想进行删除操作，为每个方法编写C++代码，其中有一个方法，它在60%的空桶的neverUsed域的值为false时，重新组织散列表，重新组织散列表的过程要在必要时移动记录，重新组织之后，每个空桶的neverUsed域的值为true，测试代码的正确性 思路：neverUsed：因为删除一个桶，把empty直接标记为空可能导致在后续的查找中出现问题，比如11，22，33，44，55顺次输入，都要填入ht[0]的位置，但是ht[0]被11占用了，22只能填入ht[1]，33只能填入ht[2]，以此类推，相当冲突，这时如果把11，33删了，把ht[1]，ht[3]的empty标记为true，那么要搜索44就会出现问题，直接返回了第一个空桶的位置，如下图： （不用neverUsed的不良后果） 所以要用neverUsed思想进行操作，表明这个地方有无存在过元素，减去一句加上一句，修改后的运行结果如图： 也就是要开三个数组，一个用来记录值，一个记录这个桶是否为空，一个用来记录这个桶是否被用过 重新组织散列表：知道了neverused数组的用途，重新组织就很简单了 当前empty[i]却又!neverused[i]的空间就浪费了，所以扫一遍，对于每个元素找到他最优的位置，如果那个位置是empty就直接放过去，这样后续查找就不会受到删除元素的影响了，然后最后把没用的位置都neverused重新标记回false 运行效果： 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;template&lt;class E,class K&gt;class HashTable&#123; private: int m; E *ht; bool *empty; bool *neverUsed; public: HashTable(int divisor=11); ~HashTable() &#123;delete [] ht; delete [] empty;&#125; int get_pos(const K&amp; k)const; bool Search(const K&amp; k,E&amp; e)const; HashTable&lt;E,K&gt;&amp; Insert(const E&amp; e); void show(); bool move(const K&amp; k); bool check(); void update();&#125;;template&lt;class E,class K&gt;HashTable&lt;E,K&gt;::HashTable(int divisor)&#123; m=divisor; ht=new E [m]; empty=new bool [m]; neverUsed=new bool [m]; for(int i=0;i&lt;m;i++)&#123; empty[i]=true; neverUsed[i]=true; &#125;&#125;template&lt;class E,class K&gt;int HashTable&lt;E,K&gt;::get_pos(const K&amp; k)const&#123; int i=k%m; int j=i; do&#123; //if(empty[j]||ht[j]==k)return j; if(neverUsed[j]||ht[j]==k)return j; j=(j+1)%m; &#125;while(j!=i); return j;&#125;template&lt;class E,class K&gt;bool HashTable&lt;E,K&gt;::Search(const K&amp; k,E&amp; e)const&#123; int b=get_pos(k); if(empty[b]||ht[b]!=k)&#123; cout&lt;&lt;"没有找到"&lt;&lt;k&lt;&lt;"这个元素"&lt;&lt;endl; return false; &#125; e=ht[b]; cout&lt;&lt;"元素"&lt;&lt;k&lt;&lt;"在第"&lt;&lt;b&lt;&lt;"个桶中"&lt;&lt;endl; return true;&#125;template&lt;class E,class K&gt;HashTable&lt;E,K&gt;&amp; HashTable&lt;E,K&gt;::Insert(const E&amp; e)&#123; K k =e; int b=get_pos(k); if(empty[b]&amp;&amp;neverUsed[b])&#123; neverUsed[b]=false; empty[b]=false; ht[b]=e; return *this; &#125; if(ht[b]==k)cout&lt;&lt;"重复的输入"&lt;&lt;endl; else cout&lt;&lt;"空间不足！"&lt;&lt;endl; return *this;&#125;template&lt;class E,class K&gt;bool HashTable&lt;E,K&gt;::move(const K&amp; k)&#123; int i=k%m; int j=i; do&#123; if(ht[j]==k)&#123; empty[j]=true; return true; &#125; j=(j+1)%m; &#125;while(j!=i); cout&lt;&lt;"没有找到要删除的数"&lt;&lt;endl; return false;&#125;template&lt;class E,class K&gt;void HashTable&lt;E,K&gt;::show()&#123; cout&lt;&lt;"当前桶中的元素为："; for(int i=0;i&lt;m;i++) if(!empty[i])cout&lt;&lt;"("&lt;&lt;i&lt;&lt;")"&lt;&lt;ht[i]&lt;&lt;" "; cout&lt;&lt;endl;&#125;template&lt;class E,class K&gt;bool HashTable&lt;E,K&gt;::check()&#123; int num=0,sum=0; for(int i=0;i&lt;m;i++)&#123; if(empty[i])&#123; sum++; if(!neverUsed[i])num++; &#125; &#125; double tmp=(double)num/sum; if(tmp&gt;0.6)&#123; cout&lt;&lt;"有"&lt;&lt;tmp&lt;&lt;"%空桶neverused域的值为false，重新组织散列表"&lt;&lt;endl; return true; &#125; cout&lt;&lt;"空间足够，无需重新组织散列表"&lt;&lt;endl; return false;&#125;template&lt;class E,class K&gt;void HashTable&lt;E,K&gt;::update()&#123; if(!this-&gt;check())return; for(int i=0;i&lt;m;i++)&#123; if(!empty[i])&#123; int tmp=ht[i]%m,j=tmp; while(i!=j)&#123; if(empty[j])&#123; empty[i]=true; empty[j]=false; ht[j]=ht[i]; break; &#125; j=(j+1)%m; &#125; &#125; &#125; for(int i=0;i&lt;m;i++) if(!neverUsed[i]&amp;&amp;empty[i])neverUsed[i]=true; int num=0,sum=0; for(int i=0;i&lt;m;i++)&#123; if(empty[i])&#123; sum++; if(!neverUsed[i])num++; &#125; &#125; double t=(double)num/sum; cout&lt;&lt;t&lt;&lt;" 成功更新散列表"&lt;&lt;endl;&#125;int main()&#123; HashTable&lt;int,int&gt; my_ht(11); int x; cout&lt;&lt;"----------新建一个散列表----------"&lt;&lt;endl&lt;&lt;endl; for(int i=0;i&lt;10;i++)my_ht.Insert(11*i); my_ht.show(); my_ht.Search(44,x); cout&lt;&lt;endl; cout&lt;&lt;"----------删除部分元素后----------"&lt;&lt;endl&lt;&lt;endl; for(int i=0;i&lt;11;i++)if(i&amp;1)my_ht.move(11*i); my_ht.show(); my_ht.Search(44,x); cout&lt;&lt;endl; cout&lt;&lt;"----------重新组织散列表后----------"&lt;&lt;endl&lt;&lt;endl; my_ht.update(); my_ht.show(); my_ht.Search(44,x); cout&lt;&lt;endl; return 0;&#125; 作业二设计一个类hashChainsWithTail，其中每个散列链表都是一个有尾节点的有序链表，而且所有链表在物理上都共享一个尾节点，不使用任何链表类的方法实现插入和删除，和类hashChain比较时间性能 思路：先用链表的思想实现哈希表，然后盗用一下ppt 其实我觉得这个优化。。很勉强，因为这种只限于链表内的元素是顺序存储的时候才可以减少一半的比较次数，而散列表插入应该是乱序的，所以i-&gt;data&lt;k一个条件在乱序时并不起作用，比着比着答案就没了 所以为了体现题目时间性能比较的要求，我写了个链表按从小到大顺序存储的散列表，也就是在插入的时候比较一下大小再插入，然后比较搜索程序的时间性能 此外，如果散列表很散的时候，也就是只要比较一次就能找到，测试发现对其实结果影响不大，只有比较次数多了才能体现出二者差异，所以测试数据size选为17（反正小一点都行），数据采用随机方式生成 运行效果：最终就是差不多两倍少一点的关系，因为后者比较次数是前者两倍 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define INF 0x3f3f3f3fconst int size=17;template&lt;class T&gt;struct Node&#123; T data; Node *next;&#125;;template&lt;class T&gt;class hashChainsWithTail&#123; public: hashChainsWithTail()&#123; tail=new Node&lt;T&gt;; tail-&gt;next=NULL; tail-&gt;data=INF; for(int i=0;i&lt;size;i++)&#123; HT[i]=new Node&lt;T&gt;; HT[i]-&gt;next=tail; &#125; &#125; ~hashChainsWithTail()&#123; delete tail; for(int i=0;i&lt;size;i++)delete [] HT[i]; &#125; int hash(T v); bool vis(T v); void insert(T v); void show(); bool search1(T v); bool search2(T v); private: Node&lt;T&gt; *HT[size]; Node&lt;T&gt; *tail;&#125;;template&lt;class T&gt;int hashChainsWithTail&lt;T&gt;::hash(T v)&#123; int tmp=0; tmp=v*33%size; return tmp;&#125;template&lt;class T&gt;bool hashChainsWithTail&lt;T&gt;::vis(T v)&#123; Node&lt;T&gt; *p; int index=hash(v); p=HT[index]; for(p=p-&gt;next;p-&gt;data&lt;=v;p=p-&gt;next); if(p-&gt;data==v)return true; return false;&#125;template&lt;class T&gt;void hashChainsWithTail&lt;T&gt;::insert(T v)&#123; Node&lt;T&gt; *p,*tmp; int index=hash(v); if(vis(v))return; p=HT[index]; if(p-&gt;next==tail)&#123; tmp=new Node&lt;T&gt;; tmp-&gt;data=v; tmp-&gt;next=tail; p-&gt;next=tmp; &#125; else&#123; for(p=HT[index];p-&gt;next-&gt;data&lt;v;p=p-&gt;next); tmp=new Node&lt;T&gt;; tmp-&gt;data=v; tmp-&gt;next=p-&gt;next; p-&gt;next=tmp; &#125;&#125;template&lt;class T&gt;bool hashChainsWithTail&lt;T&gt;::search1(T v)&#123; int index=hash(v); Node&lt;T&gt; *p; p=HT[index]; for(p=p-&gt;next;p-&gt;data&lt;v;p=p-&gt;next); if(p-&gt;data!=INF)&#123; //cout&lt;&lt;v&lt;&lt;"对应的data是："&lt;&lt;p-&gt;data&lt;&lt;endl; return true; &#125; //cout&lt;&lt;"啥玩意儿啊找不着啊QWQ"&lt;&lt;endl; return false;&#125;template&lt;class T&gt;bool hashChainsWithTail&lt;T&gt;::search2(T v)&#123; int index=hash(v); Node&lt;T&gt; *p; p=HT[index]; for(p=p-&gt;next;p-&gt;next!=tail;p=p-&gt;next)&#123; if(p-&gt;data==v)&#123; //cout&lt;&lt;v&lt;&lt;"对应的data是："&lt;&lt;p-&gt;data&lt;&lt;endl; return true; &#125; &#125; //cout&lt;&lt;"啥玩意儿啊找不着啊QWQ"&lt;&lt;endl; return false;&#125;template&lt;class T&gt;void hashChainsWithTail&lt;T&gt;::show()&#123; Node&lt;T&gt; *p; for(int i=0;i&lt;size;i++)&#123; if(HT[i]!=NULL)&#123; p=HT[i]; for(p=p-&gt;next;p-&gt;data&lt;INF;p=p-&gt;next) cout&lt;&lt;p-&gt;data&lt;&lt;" "; cout&lt;&lt;endl; &#125; &#125; &#125;int main()&#123; clock_t t1,t2; hashChainsWithTail&lt;int&gt; ht; for(int i=0;i&lt;888;i++)ht.insert(i+rand()%8888); //ht.show(); cout&lt;&lt;endl&lt;&lt;"-----测试结果-----"&lt;&lt;endl&lt;&lt;endl; t1=clock(); for(int i=0;i&lt;8888;i++)ht.search1(i); t2=clock(); cout&lt;&lt;"方法一用时： "&lt;&lt;(t2-t1)&lt;&lt;" CLOCKS_PER_SEC"&lt;&lt;endl&lt;&lt;endl; t1=clock(); for(int i=0;i&lt;8888;i++)ht.search2(i); t2=clock(); cout&lt;&lt;"方法二用时： "&lt;&lt;(t2-t1)&lt;&lt;" CLOCKS_PER_SEC"&lt;&lt;endl&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ bitset 二进制STL]]></title>
    <url>%2F532d9a6f%2F</url>
    <content type="text"><![CDATA[记录一下方便日后用到，还蛮方便的 BitSetC++语言的一个类库，用来方便地管理一系列的bit位而不用程序员自己来写代码 bitset除了可以访问指定下标的bit位以外，还可以把它们作为一个整数来进行某些统计 声明一个该类型变量： 123bitset&lt;N&gt;varm (M)varm为变量名，N表示该类型在内存中占的位数，M表示变量varm的初始值 测试代码：1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;bitset&gt;using namespace std;int main()&#123; bitset&lt;16&gt; x; bitset&lt;16&gt; y(0x2333); bitset&lt;16&gt; z("01010101"); cout&lt;&lt;"x:"&lt;&lt;x&lt;&lt;endl; cout&lt;&lt;"y:"&lt;&lt;y&lt;&lt;endl; cout&lt;&lt;"z:"&lt;&lt;z&lt;&lt;endl; cout&lt;&lt;endl; x|=y; x&amp;=y; y=~y; z^=x; z&gt;&gt;=2; z&lt;&lt;=1; cout&lt;&lt;"x:"&lt;&lt;x&lt;&lt;endl; cout&lt;&lt;"y:"&lt;&lt;y&lt;&lt;endl; cout&lt;&lt;"z:"&lt;&lt;z&lt;&lt;endl; cout&lt;&lt;endl; cout&lt;&lt;"x的位数："&lt;&lt;x.size()&lt;&lt;endl; cout&lt;&lt;"x中1的个数："&lt;&lt;x.count()&lt;&lt;endl; cout&lt;&lt;"x中是否有1："&lt;&lt;x.any()&lt;&lt;endl; cout&lt;&lt;"x中是否没有1："&lt;&lt;x.none()&lt;&lt;endl; cout&lt;&lt;"x的i+1位置1："&lt;&lt;x.set(15)&lt;&lt;endl; cout&lt;&lt;"x的i+1位置为z："&lt;&lt;x.set(15,2)&lt;&lt;endl; cout&lt;&lt;"x全部取反："&lt;&lt;x.flip()&lt;&lt;endl; cout&lt;&lt;"x的i+1位取反："&lt;&lt;x.flip(15)&lt;&lt;endl; cout&lt;&lt;"x转化为unsigned long的结果："&lt;&lt;x.to_ulong()&lt;&lt;endl; cout&lt;&lt;"x转化为unsigned long long的结果："&lt;&lt;x.to_ullong()&lt;&lt;endl; cout&lt;&lt;"x转化为string的结果："&lt;&lt;x.to_string()&lt;&lt;endl; cout&lt;&lt;"x全部置1："&lt;&lt;x.set()&lt;&lt;endl; cout&lt;&lt;"x全部置0："&lt;&lt;x.reset()&lt;&lt;endl; return 0;&#125; 运行效果：]]></content>
      <categories>
        <category>杂</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Python爬取hexo个人博客所有文章网址（11.11快乐）]]></title>
    <url>%2F209ef750%2F</url>
    <content type="text"><![CDATA[已经是两个星期前的事情了啊啊啊哈哈哈。。。我这个拖延症。。。 今天又重新改了点代码再爬一次，爬了两百多个的时候。。一个忘我拔了数据线断了热点(#ﾟДﾟ)。。然后只好重新爬。。记了下时间， 338个链接大概爬了34分钟，应该emmmmm还可以吧0.0 1.运行效果： 2.动因和可行性分析爬自己博客的原因是安了个abbrlink插件，换了所有文章的链接，所以之前的链接都404了，因为百度收录速度太慢，所以打算主动递交链接，两百多个链接一个一个点太傻了，让爬虫自己来吧(OvO) 文章虽然有两百多篇，但是博客的页码只有25页，并且每一页的链接具有统一格式：https://leflacon.github.io/page/2/，那个2的地方即代表页码，所以只要爬这25个页面就能获取所有文章的链接 3.具体思路：一个vis，一个unvis，分别存爬过的和没爬过待爬过的 1）初始化unvis因为第一页就是博客首页的链接，而不是page1，所以单独处理，然后循环把所有page的地址加入到待爬的页面中 123for i in range(2,26): page_="https://leflacon.github.io/page/"+str(i)+"/" self.links_.add_unvis(page_) 2）获取域名先给个首页的地址，然后根据这个地址可以获得协议名和域名，如何获得的。。其实我不会。。学的别人的代码 因为爬的是个人博客，所以域名是一定要获取的，因为这样才可以避免爬到外链之后还莫名其妙的爬下去，要保证最后的结果都是本博客里的，所以写一个筛选函数，比较爬到的网址集是否包含域名 3）bfs感觉其实就是个bfs 可以拓展的链接存入unvis里，然后每次pop一个链接cur_link来爬，爬某个网页的操作是小函数def small_spider(url):，然后对于某个网页爬到的链接cur_links进行筛选（爬过的不要，和域名不同的不要），这里要先和之前的vis集合比较，然后把vis中没有的添加到unvis里待爬，然后再把爬到的所有链接更新到vis里 最后跳出循环的条件就是unvis为空，没法再拓展了，把vis里的链接写入文件 4）其他其实有个问题是，明明主页包含有page的链接，为什么只爬一个主页就不行呢0.0，不知道不知道不会不会不了解不了解，先这样吧。。我也不知道那个爬取的小函数到底能爬到啥 4.代码代码◡◡◡◡◡◡ ヽ(`Д´)ﾉ丢～ 丢好了(・ω・)ノ https://github.com/LeFlacon/Simple-Python-Practice/blob/master/spider_blog.py]]></content>
      <categories>
        <category>瞎折腾(=ﾟωﾟ)ﾉ</category>
      </categories>
      <tags>
        <tag>bfs</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF 516 D. Candies for Children（分类讨论）]]></title>
    <url>%2F13028674%2F</url>
    <content type="text"><![CDATA[http://codeforces.com/contest/1063/problem/D 题意：n人环，k个糖果，从起点l出发到终点r（可以绕圈），爱吃甜食的小朋友每次拿两个糖果，其他小朋友拿一个，但是如果最后一个小朋友是爱吃甜食的然后糖只剩一个了，那这个小朋友只有一个糖 问最多有几个小朋友爱吃甜食 题解：分成两部分，一部分是整圈的，一部分是最后小半圈的 然后分两种情况讨论： 第一种是n小的时候，那么圈数多，枚举每圈爱吃糖的人，判断合法性 第二种是n大大时候，圈数少，直接枚举圈数即可 大佬的解方程的思路虽然大概懂了。。但是还是雾雾的 (;-;)。。只好继续想想了，参考了别人提交的代码大概改成了现在这样。。这题要考虑的点真的好多啊，具体见代码注释 代码：跑的飞快0.0 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longint main()&#123; LL n,l,r,k,x,ans=-1; cin&gt;&gt;n&gt;&gt;l&gt;&gt;r&gt;&gt;k; x=(r-l+n)%n+1;//小半圈的人数 if(n&lt;=3e6)&#123;//n小，圈数多 for(LL i=n;i&gt;=0;i--)&#123; //枚举每圈爱吃糖的人的个数，即每圈需要i+n个糖 LL z=(k-1)%(i+n)-x+1; //z为发完所有整圈，小半圈先一人一个后剩余的糖数 //这些剩余的糖都是要发给小半圈爱吃糖的人的 LL p=z+1; if(z&lt;0||z&gt;i||z&gt;x||x-z&gt;n-i+1)continue; //非法情况如下： //小半圈不够发，小半圈每人都再发一个还多 //小半圈要发的大于小半圈人数 //小半圈不爱吃糖的人数大于总不爱吃糖的人数加一 //（这里恰好等于是可行的，因为最后一个人r可以委屈一下吃一颗） if((p&lt;=i&amp;&amp;p&lt;=x)||x-z&lt;=n-i)&#123; ans=i; break; &#125; //剩余糖数+1小于等于爱吃糖的人数并且小于等于小半圈人数即合法 //小半圈人数减去剩余糖数得小半圈不爱吃糖人数，小于等于总不爱吃糖人数也合法 &#125; &#125; else&#123;//n大，圈数小，枚举圈数i LL t=k/n;//圈数范围 for(LL i=0;i&lt;=t;i++)&#123; LL res=(k-2*x-n*(i-1)+1)/(i+1); //化简前的式子应该是这样，res=(k-x+(n-x)-n*i+1)/(i+1) //res为每整圈爱吃糖的人数 LL z=k-i*(res+n)-x,a;//z为发完所有整圈，小半圈先一人一个后剩余的糖数 if(z&lt;0)&#123;//缺糖了没法给小半圈爱吃糖的人加糖 a=ceil((-z)*1.0/i); //那么每圈需要少发a个糖，即每圈发res-a个 //现在能给小半圈加的糖数是a*i-z if(a*i+z&lt;=res-a&amp;&amp;a*i+z&lt;=x)ans=max(ans,res-a); //小半圈爱吃糖人数小于等于总爱吃糖人数并且小于等于小半圈人数 &#125; else if(res&lt;=n)&#123;//要排除res&gt;n的非法情况 if(z&gt;=0&amp;&amp;z&lt;=x&amp;&amp;z&lt;=res)ans=max(ans,res); //小半圈爱吃糖人数大于等于0,小于等于小半圈人数，小于等于每圈爱吃糖人数 &#125; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java第四次作业（CD Store）]]></title>
    <url>%2Fe10dd693%2F</url>
    <content type="text"><![CDATA[题目：假设你在业余时间经营一个会员制的CD出租销售店，需要一个管理程序，可以增加会员，删除会员，出租，销售，进货，统计等，请设计适当的功能，并实现该程序 下次写这种乱七八糟的东西的时候0.0我一定先列个提纲。。这次完全是想到啥写啥东补西补啊。。其实还有好多东西可以补，并且有些实现并不是o(1)的最优方法（可以实现但是我懒得写）。。 此外，添加了各种判断，因为要排除各种库存不足，cd名输错，手机号输错等情况，尽管加了不少，但是这个简单的系统仍然一点也不强壮，一点也不╮(￣▽￣””)╭ 思路：1.一个Vip类，保存单个客户的基本信息成员变量如下： 1234private String name;private String phone;private int score;//会员积分private String rent_cd[]=new String[5];//租借信息 因为要修改vip的信息，所以每个vip一定要有一个属性是与众不同的便于索引，考虑到张三和李四可能同名，所以这里选择了手机号来满足这个唯一性，每个人的手机号都是不一样的 此外，因为对于一个CD系统来说，租借信息必须保存，笔者对于租借信息的处理是用一个String类型的数组来记录租借的CD名 成员函数如下： 12345678public Vip(String name_,String phone_);public String get_name();//获得会员名public String get_phone();//获得会员手机号public int get_score();//获得会员积分public void set_score(int a);//修改会员积分public void show()//显示会员信息public boolean add_rent(String s);//添加租借记录public boolean delete_rent(String s);//删除租借记录 因为刚写过哈希表，所以有一个思路是把姓名字符串hash一下获得一个数组号，存入该会员的信息，这样的优点是o(1)就可以查询某会员，缺点是写着麻烦了许多，因为还要链表处理哈希冲突啥的，所以最后我还是没写hash 2.一个Vip_类，保存一个客户集成员变量如下： 1private Vip vips[]=new Vip[233]; 直接用数组了，因为方便啊0.0 成员函数如下： 购买租借归还的道理都差不多，就是利用唯一的手机号码扫一遍索引到相应的用户，如果没找到就报个错 123456public boolean add_vip(Vip v);//添加会员public boolean delete_vip(String phone_);//删除会员public void show_vip();//显示会员信息public void buy(String s,int money);//某会员购买public void rent(String s,String c);//某会员租借public void back(String s,String c);//某会员归还 3.一个cd类，保存单个cd的基本信息成员变量如下： 123private String name;//cd名private int num;//cd数量private int price;//cd单价 成员函数如下： 123456public cd(String name_,int price_,int num_);public void show();//显示cd信息public int get_num();//获取某cd数量public void set_num(int num_);//修改某cd数量public String get_name();//获取cd名public int get_price();//获取cd单价 4.一个cd_类，保存一个cd集成员变量如下： 1private cd cds[]=new cd[2333]; 成员函数如下： 这里的售出租借归还都只是一个预先的操作，返回一个能否执行的boolean类型，不是实际售出租借归还，因为考虑完库存和cd是否存在等问题后，还要考虑某会员是否存在等等 123456public boolean add_cd(cd c);//添加cdpublic boolean delete_cd(String name_);//删除cdpublic void show_cd();//显示所有cd信息public int sold_cd(String s,int a);//卖出cdpublic boolean rent_cd(String s);//租借cdpublic boolean back_cd(String s);//归还cd 5.一个store类，里面有一个cd集和一个客户集成员变量如下： 123private Vip_ vv=new Vip_();//客户集private cd_ cc=new cd_();//cd集private int money;//钱 成员函数如下： 123456789public store(int money_);//构造函数初始资金public void add_vip();public void add_cd();//添加cdpublic void sold();//出售cdpublic void rent();//出租cdpublic void back();//归还cdpublic void show_cds();//显示cdpublic void show_vips();//显示会员public void show_money()//显示钱钱 其他：写的时候遇到一个小问题就是，我在别的类里调用了Scanner，无法cin.close()，因为Scanner指向的是同一个输入流，一个close掉之后别的也不能用了 运行效果：输入商店的初始资金，输入一些会员 输入一些cd信息 输出当前所有的会员信息和cd信息 输入一些购买信息 输入一些租借信息 输出更改后的会员信息和cd信息 输入归还信息 输出更改后的会员信息和cd信息 代码：intelliJ!好看！]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round 519 Div.2（A-F）]]></title>
    <url>%2F2c002055%2F</url>
    <content type="text"><![CDATA[相当惨的一场。。但是题还是要补的。。不过真的拖了好久啊。。好像是。。一个星期多前的了ORZ 又可以自己钻进辣鸡箱了（；＿；） 终于补完了可以去补java作业了，要不是要体测。。不然就可以修仙仙了 A. Elections（贪心）http://codeforces.com/contest/1043/problem/A 题意：n个人，每个人都有k票，投给两个人，现在已知这n个人每个人会投给对手a[i]票，其余k-a[i]票投给自己，求最小的k使得自己的票数比对方多 123456789101112131415161718192021#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int v[355],f[45][45][45][45];int num[5]=&#123;0&#125;;int main()&#123; int n,maxx=1,c,sum=0; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;c); maxx=max(maxx,c); sum+=c; &#125; while(n*maxx-sum&lt;=sum)maxx++; printf("%d\n",maxx); return 0;&#125; B. Lost Array（循环结）http://codeforces.com/contest/1043/problem/B 题意：已知一个数组x[i]可以由下面的变换得到长为n的数组a[i]，现在反过来，先给一个长为n的数组a[i]，求数组x[i]可能的长度，来得到a[i] 不知道为什么不会，就是不会，卡了一个小时乱猜了个结论过了，纸上模拟一下猜应该就是找循环结吧 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;int a[1005],num[1005];vector&lt;int&gt;v;int main()&#123; int n; scanf("%d",&amp;n); a[0]=0; for(int i=1;i&lt;=n;i++)&#123; scanf("%d",&amp;a[i]); num[i-1]=a[i]-a[i-1]; &#125; bool flag; v.clear(); for(int i=1;i&lt;=n;i++)&#123; flag=true; for(int j=0;j&lt;i;j++)&#123; if(!flag)break; int k=i; for(int k=j;k&lt;n;k+=i)&#123; if(num[j]!=num[k])&#123; flag=false; break; &#125; &#125; &#125; if(flag)v.push_back(i); &#125; int ans=v.size(); printf("%d\n",ans); for(int i=0;i&lt;ans-1;i++) printf("%d ",v[i]); printf("%d\n",v[ans-1]); return 0;&#125; C. Smallest Word（字符串）http://codeforces.com/contest/1043/problem/C 题意：给一个由’a’’b’组成的字符串，从前往后可以翻转前缀，要求最后把字符串变为最小的字典序即aa..ab..bb的形式，问需要翻转的前缀是哪些 模拟一下得结论，遇到ab分界就翻转，注意要特殊处理一下最后一个，如果最后一个是a的话就翻，b不翻 123456789101112131415161718192021#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;string s;int ans[1005];int main()&#123; cin&gt;&gt;s; int len=s.length(); for(int i=0;i&lt;len-1;i++) if(s[i]!=s[i+1])ans[i]=1; else ans[i]=0; if(s[len-1]=='a')ans[len-1]=1; else ans[len-1]=0; for(int i=0;i&lt;len-1;i++)printf("%d ",ans[i]); printf("%d\n",ans[len-1]); return 0;&#125; D. Mysterious Crime（公共子段）http://codeforces.com/contest/1043/problem/D 题意：给m个长度均为n的排列，求共有多少个公共子段，n范围1e5，m范围10，保证每个排列中1～n各出现一次 首先肯定要找到几个最大公共子段，这里最大的定义是：合法的所有子段都是这些段的子段，那么对于任意一个长度为l的最大子段来说，长度为1的子段有l个，为2的有(l-1)个…为l的有一个，它所贡献的方法数即为1+2+...+l=l*(l+1)/2 len[i]表示以i这个数开头的最长的公共子段 然后从1～n各出现一次这个性质入手，在输入的时候直接记录每个数字在某一行的位子，即pos[c][i]=j表示c这个数在第i行出现在第j列，这么记就非常方便后续比较 a[i]表示第一行第i个位置的数，然后就是枚举第一行，从i=1开始，j从i+1开始，如果a[i]和a[j]所对应的数在下面n-1行的距离都和第一行一样，那么j++，继续扩展最长子段，直到出现一个不相同时，就是分出了其中一个最长子段了，那么i=j，继续找下一个最长子段 最后，这个题爆int了要开LL 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=100005;const int M=15;int n,m;LL pos[N][M],a[N],len[N];bool ok(int x,int y)&#123; int tmp=pos[a[y]][1]-pos[a[x]][1]; for(int i=2;i&lt;=m;i++) if(pos[a[y]][i]-pos[a[x]][i]!=tmp)return false; return true;&#125;int main()&#123; int c; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=m;i++)&#123; for(int j=1;j&lt;=n;j++)&#123; scanf("%d",&amp;c); pos[c][i]=j; if(i==1)a[j]=c; &#125; &#125; memset(len,0,sizeof(len)); for(int i=1;i&lt;=n;)&#123; len[i]++; int j; for(j=i+1;j&lt;=n;j++)&#123; if(ok(i,j))len[i]++; else break; &#125; i=j; &#125; LL ans=0; for(int i=1;i&lt;=n;i++) if(len[i]) ans+=len[i]*(len[i]+1)/2; printf("%lld\n",ans); return 0;&#125; E. Train Hard, Win Easy（贪心，前缀和）http://codeforces.com/contest/1043/problem/E 题意：共n个人去打比赛，第i个人写第一个题会得xi分，写第二个题得yi分，任意两个人都要一起打一场比赛，一人写一个题，不过这里还有m对人不可以一起打比赛，求最后每个人的总得分最少是多少 如果当前没有限制，那么对于(i,j)两个人来说答案是min(xi+yj,xj+yi)，即i可以做第一题的条件是xi+yj&lt;=xj+yi 所以先依据这个条件排个序，对于排序后的第i个人来说，如果它和前i-1个人里的其中一个人组队，他就做第二个题，如果和后面n-i人里的其中一个人组队，他就做第一个题 然后算一下排序后xi和yi的前缀和，那么o(1)就可以算出第i个人对总得分的贡献，最后对于那m对不可以一起打比赛的人来说，o(m)直接减了即可 由于输出每个人的得分贡献要求按照输入的顺序，所以搞个id记一下 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=3e5+5;struct ss&#123; LL x,y,id;&#125;a[N],b[N];int n,m;LL s1[N],s2[N],ans[N];bool cmp(ss s1,ss s2)&#123; return s1.x+s2.y&lt;s1.y+s2.x;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)&#123; scanf("%lld%lld",&amp;a[i].x,&amp;a[i].y); a[i].id=i; b[i]=a[i]; &#125; sort(a+1,a+n+1,cmp); s1[0]=s2[0]=0; for(int i=1;i&lt;=n;i++)&#123; s1[i]=s1[i-1]+a[i].x; s2[i]=s2[i-1]+a[i].y; &#125; for(int i=1;i&lt;=n;i++) ans[a[i].id]=(i-1)*a[i].y+s1[i-1]+(n-i)*a[i].x+s2[n]-s2[i]; int u,v; for(int i=0;i&lt;m;i++)&#123; scanf("%d%d",&amp;u,&amp;v); int tmp=min(b[u].x+b[v].y,b[u].y+b[v].x); ans[u]-=tmp; ans[v]-=tmp; &#125; for(int i=1;i&lt;n;i++)printf("%lld ",ans[i]); printf("%lld\n",ans[n]); return 0;&#125; F. Make It One（dp，容斥，组合数）http://codeforces.com/contest/1043/problem/F 题意：给n个数，选最少的数，使他们的gcd=1，求这个最小子集的大小 看了好久然后才。。突然看懂题解。。另一种莫比乌斯反演的解法。。我还是不会。。 2*3*5*7*11*13*17=510510&gt;3e5，所以一个子集里的数字个数一定小于等于7 然后看样例感受一下思路，10 6 15这三个数，2*5和2*3可以干掉3和5，然后2和3*5gcd=1满足条件，也就是说每次两个数合并可以干掉一些不同的质因子，最后要使所有质因子都被干掉 用dp[i][j]表示集合大小为i，gcd为j的集合的方案数，最后要求的答案是dp[i][1]&gt;0的最小值 状态转移方程如下： num[j]表示集合中能被j整除的数的个数，处理只要o(n^2)扫一遍就可以累加得到，C(num[j],i)就是在这些数中取i个，那么这些数gcd肯定是kj 要使这些数的gcd是j，就要利用容斥的思想减去其他2j,3j,…kj的部分，也就是dp[i][k] (j|k) 然后优化一下空间变成一维，因为之前已经证明一个子集里的数字个数一定小于等于7，所以i从1～7枚举，如果当前i对应的的dp[1]&gt;0，直接输出i即可 wa12了好几发。。最后状态转移的时候加了个%p然后过了。。太真实了。。但是。。为什么呢。。。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=3e5;const int p=1e9+7;LL dp[N+5];int num[N+5];LL qpow(LL a,LL b)&#123; LL ans=1; a%=p; while(b)&#123; if(b&amp;1)&#123; ans=ans*a%p; b--; &#125; b&gt;&gt;=1; a=a*a%p; &#125; return ans;&#125;LL C(LL n,LL m)&#123; if(m&gt;n)return 0; LL ans,a=1,b=1; for(int i=1;i&lt;=m;i++)&#123; a=(a*(n+i-m)%p)%p; b=(b*i%p)%p; &#125; ans=(a*qpow(b,p-2)%p)%p; return ans;&#125;int main()&#123; int n,c; scanf("%d",&amp;n); memset(num,0,sizeof(num)); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;c); num[c]++; &#125; for(int i=1;i&lt;=N;i++) for(int j=2*i;j&lt;=N;j+=i) num[i]+=num[j]; for(int i=1;i&lt;=7;i++)&#123; for(int j=N;j&gt;=1;j--)&#123; dp[j]=C(num[j],i); for(LL k=2*j;k&lt;=N;k+=j) dp[j]=(dp[j]-dp[k]+p)%p; &#125; if(dp[1]&gt;0)&#123; printf("%d\n",i); return 0; &#125; &#125; puts("-1"); return 0;&#125; G. Speckled Bandhttp://codeforces.com/contest/1043/problem/G]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>前缀和</tag>
        <tag>组合数</tag>
        <tag>容斥</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构第四次作业（delete浅析，约瑟夫环-链表法和公式法，栈Stack）]]></title>
    <url>%2F96c4a6fd%2F</url>
    <content type="text"><![CDATA[说好的以前yjf数据结构一个学期才五个作业呢。。。。。。。难道是因为换了助教!?(･-･;?不过好歹这次是周一布置周六交了 delete浅析：首先一定要记录一下delete，在第三次被析构函数各种报错各种野指针之后。。我终于= =痛定思痛的去找了找有关delete的东西：（虽然这次出现野指针的问题是因为我delete first之后没有把last指向NULL。。） delete到底删了什么？为什么delete完指针p指向的地址后，p-&gt;data还可以调用？ 这个原理就和把磁盘中的文件删了一样，删文件的时候一下子就删好了，但是事实上，并没有彻底粉碎文件中的数据，操作系统只是把文件所在的区域标记为空闲而已，东西还在里面，所以就有了数据恢复一说，只有等到下次在这个区域写入了新的东西，才算是真正把之前的文件删除 delete也只是把指针指向的某个地址标记上空闲，而一方面指针还是指向那个区域，另一方面那个地址的数据还是保留着（如下图）；唯一的不同是，在后续的进程中，本来向系统申请内存的时候绝不会考虑那个地址，但是现在可以考虑了 当然，上面只是sublime下（g++ -std=c++11）测试的结果，vs下的结果可能不同，因为delete之后，网上说vs环境下操作系统会阻止程序访问这个地址，因为这个地址已经用delete归还给操作系统了，这时候的p就是野指针，需要p=NULL操作一番 作业一：题目：Josephus问题，n个人围坐成一圈，按顺序编号为1－n，确定一个整数m，从1号开始数数，每数到第m个人出列，剩下的人从下一个人重新开始数，直至只剩下一个人为止 编写程序，对任意输入的n和m，求出最后剩下的人的编号。要求利用线性表保存这n个人，分别用公式化和链表两种描述方法实现。输入：input.txt，两个整数n（3－100），m（1－m）输出：若输入合法，按出列顺序输出人的编号，否则输出“WRONG”。编号之间用一个空格间隔，最后一个编号后不能有空格。两种实现方法各输出一次，用回车间隔，最后输出一个回车。如上述例子的输出应为： 125 2 8 7 1 4 6 35 2 8 7 1 4 6 3 思路：1.链表法给单链表加个尾节点last，然后last-&gt;next=first，就可以成环了 然后就移指针啊，然后把指针移到的位置删除，注意下细节就没啥了 2.公式法AllenOris大佬的博客里有有关约瑟夫环公式的更详细的推导，他那个是从0开始编号的 用递推的思路求一下n个人报到m出列，第k个人的编号 样例n=8,m=5 step1:去4 1 2 3 4 5 6 7 8（旧） 1 2 3 4 6 7 8 从下一个要报数的人可以映射成一个新的约瑟夫环，即 4 5 6 7 1 2 3（新） 在旧环中有i人，编号为x的人在新环中编号为y，则有对应关系，y=(x-m+i)%i，那么x=(y+m)%i，即得递推式：f[i]=(f[i-1]+m)%i 那么已知有i-1人时最先出局的是编号为(m-1)%(i-1)+1的人，记为ans，所以可以回推得到此人在i环中的编号是(ans+m)%i，这个人也就是i人环第二个出局的人，一直递推就可以得到任意我们想要的状态 那么n个人报m出局第k个出局的人，相当于求（n-k+1）个人报m出局第一个出局的人，记k’=n-k+1，则k’对应的答案是(m-1)%k’+1 1234int k=n-k+1;int ans=(m-1)%k+1; for (int i=k+1;i&lt;=n;i++) ans=(ans+m-1)%i+1; 得到递推式后，对于每一个k直接搞个求解，然后把对应编号的节点delete掉即可 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int nn,mm;struct Node&#123; public: int id; Node *next;&#125;;class LinkedList&#123; public: LinkedList(int n); ~LinkedList(); void show(); int link_Josephus(int n,int m); int fun_Josephus(int n,int m); int getf(int n,int k,int m); void delete_node(int x); private: Node *first,*last;&#125;;LinkedList::LinkedList(int n)&#123; Node *tmp=new Node; tmp-&gt;id=1; first=last=tmp; for(int i=1;i&lt;n;i++)&#123; Node *p=new Node; p-&gt;id=i+1; last-&gt;next=p; last=last-&gt;next; &#125; last-&gt;next=first;&#125;LinkedList::~LinkedList()&#123; Node *p=first; while(first!=last)&#123; if(p!=last)p=first-&gt;next; delete first; first=p; &#125; delete first; first=last=NULL;&#125;void LinkedList::show()&#123; Node *cur; for(cur=first;cur!=last;cur=cur-&gt;next) cout&lt;&lt;cur-&gt;id&lt;&lt;" "; cout&lt;&lt;cur-&gt;id&lt;&lt;endl;&#125;int LinkedList::link_Josephus(int n,int m)&#123; Node *p; p=first; for(int i=1;i&lt;n;i++)&#123; int j=1; while(j!=m)&#123; p=p-&gt;next; j++; &#125; Node *cur; for(cur=first;cur-&gt;next!=p;cur=cur-&gt;next); cur-&gt;next=p-&gt;next; cur=p; p=p-&gt;next; cout&lt;&lt;cur-&gt;id&lt;&lt;" "; if(cur==first)first=first-&gt;next; delete cur; cur=NULL; &#125; cout&lt;&lt;first-&gt;id&lt;&lt;endl; last=first; return (first-&gt;id);&#125;int LinkedList::fun_Josephus(int n,int m)&#123; Node *p; for(int i=1;i&lt;n;i++)&#123; int ans=getf(n,m,i); //cout&lt;&lt;ans&lt;&lt;endl; for(p=first;(p-&gt;id)!=ans;p=p-&gt;next); Node *cur; for(cur=first;cur-&gt;next!=p;cur=cur-&gt;next); cur-&gt;next=p-&gt;next; cur=p; p=p-&gt;next; cout&lt;&lt;cur-&gt;id&lt;&lt;" "; if(cur==first)first=first-&gt;next; delete cur; &#125; cout&lt;&lt;first-&gt;id&lt;&lt;endl; last=first; return first-&gt;id;&#125;int LinkedList::getf(int n,int m,int k)&#123; k=n-k+1; int ans=(m-1)%k+1; for (int i=k+1;i&lt;=n;i++) ans=(ans+m-1)%i+1; return ans;&#125;int main()&#123; scanf("%d%d",&amp;nn,&amp;mm); LinkedList l1(nn),l2(nn); //l1.show(); int ans1=l1.link_Josephus(nn,mm); int ans2=l2.fun_Josephus(nn,mm); return 0;&#125; 运行效果： 作业二：题目：利用教材中的Stack类，为其设计外部函数（非成员函数）实现下面delete_all功能，必要时可以使用临时的Stack对象。编写主函数测试delete_all函数，栈元素设定为字符类型即可。template &lt;class T&gt; void delete_all(Stack&lt;T&gt; &amp;s, const T &amp;x)——删除栈s中所有等于x的数据项，保持其他数据项顺序不变。输入：input.txt，其第一个字符为x，其后按栈底到栈顶的顺序依次给出栈中字符，字符间用空格、回车或制表符间隔，如： 12ab a t a a e c 表示栈底到栈顶内容为b a t a a e c，要删除内容为a输出：删除后栈中字符内容，从栈顶到栈底的顺序即可，相邻元素间用空格间隔，最后一个元素之后不能有空格。最后输出一个回车。如上例，应为 1c e t b 注意：应正确处理输入中空栈等情况。 思路：数组可太好操作了，就是private类型要多些几个函数获取和赋值显的不优美了点 运行效果： 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;fstream&gt;using namespace std;template&lt;class T&gt;class Stack&#123; public: Stack(int size); ~Stack()&#123;delete [] s;&#125; bool IsEmpty()const&#123;return top==-1;&#125; bool IsFull()const&#123;return top==MaxTop;&#125; T Top() const; Stack&lt;T&gt;&amp; Push(const T&amp; x); Stack&lt;T&gt;&amp; Pop(T&amp; x); void show(); int getMaxTop()&#123;return MaxTop;&#125; void setMaxTop(int x)&#123;MaxTop=x;&#125; int gettop()&#123;return top;&#125; void settop(int x)&#123;top=x;&#125; T getnum(int i)&#123;return s[i];&#125; void setnum(int i,T x)&#123;s[i]=x;&#125; private: int top; int MaxTop; T *s;&#125;;template&lt;class T&gt;Stack&lt;T&gt;::Stack(int size)&#123; MaxTop=size-1; s=new T[size]; top=-1;&#125;template&lt;class T&gt;T Stack&lt;T&gt;::Top()const&#123; if(IsEmpty())cout&lt;&lt;"栈是空的昂"&lt;&lt;endl; return s[top];&#125;template&lt;class T&gt;Stack&lt;T&gt;&amp; Stack&lt;T&gt;::Push(const T&amp; x)&#123; if(IsFull())cout&lt;&lt;"栈是满的昂"&lt;&lt;endl; s[++top]=x; return *this;&#125;template&lt;class T&gt;Stack&lt;T&gt;&amp; Stack&lt;T&gt;::Pop(T&amp; x)&#123; if(IsEmpty())cout&lt;&lt;"栈是空的昂"&lt;&lt;endl; x=s[top--]; return *this;&#125;template&lt;class T&gt;void Stack&lt;T&gt;::show()&#123; if(IsEmpty())cout&lt;&lt;"栈是空的昂"&lt;&lt;endl; for(int i=top;i&gt;=1;i--) cout&lt;&lt;s[i]&lt;&lt;" "; cout&lt;&lt;s[0]&lt;&lt;endl;&#125;template&lt;class T&gt;void delete_all(Stack&lt;T&gt; &amp;s,const T &amp;x)&#123; if(s.IsEmpty())&#123; cout&lt;&lt;"栈是空的昂"&lt;&lt;endl; return; &#125; int n=s.getMaxTop(); for(int i=0;i&lt;n;i++)&#123; if(s.getnum(i)==x)&#123; for(int j=i+1;j&lt;n;j++)s.setnum(j-1,s.getnum(j)); n--; s.setMaxTop(n); s.settop(s.gettop()-1); i--; &#125; &#125;&#125;int main()&#123; //freopen("in.txt","r",stdin); Stack&lt;char&gt; ss(233); char aa,c; cin&gt;&gt;aa; for(int i=1;i&lt;=7;i++)&#123; cin&gt;&gt;c; ss.Push(c); &#125; //ss.show(); delete_all(ss,aa); ss.show(); return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构第?次作业（哈希表 HashTable，暴雪字符串哈希）]]></title>
    <url>%2F7f6818b1%2F</url>
    <content type="text"><![CDATA[本来想在这篇深入研究一下暴雪的字符串哈希的，据说是最快的字符串哈希，而且人家可靠性特好，然而。。里面有一堆奇妙的不明所以的常数。。之前写计概论文的时候算那个sqrt的神奇常数0x5f3759df就搞了半天。。现在已经忘了最小二乘法咋写了ಠ_ಠ 更惨的是。。周末就这样过完了TAT，我的模电作业还没写完。。模电啊模电TAT。。完全从最初只是帮人写个数据结构哈希表跑偏了233333 暴雪的hash一些细节留着有空再研究吧，先懂个大概的核心思路，mark一下，顺便膜一下。。暴雪的基础函数都。。好酷的样子啊0.0 题目要求：我也不知道题目啥要求╮(￣▽￣””)╭，反正就是写个字符串哈希 hash基本思路：下面这些乱七八糟的一堆东西。。大多都是四处学习复制粘贴的。。虽然很多方法并不优。。就当了解一下了 哈希表（Hash table，也叫散列表），是根据关键码值（Key）而直接进行访问的数据结构 优点：通过某种函数使元素的存储位置与它的key之间能够建立一一映射的关系，那么要查找某个key对应的value的值，本来直接查找的话需要o(n)扫一遍，但是如果可以通过key直接求得value存储的位子，那么o(1)就可以得到value的值 基本操作：1.插入insert：根据待插入元素的key，用某种函数（有很多种hash函数）计算出该元素的存储位置并按此位置进行存放 2.搜索find：对元素的key进行同样的计算，把求得的函数值当做元素的存储位置，在结构中按此位置取元素比较，若关键码相等，则搜索成功 哈希冲突：哈希函数将两个不同的key映射到同一个地方的情况 哈希冲突是不可避免的，如果遇到冲突，最常用的解决办法就是开放定址法和链地址法 1.开放地址法 当发生哈希冲突时，如果哈希表未被装满，说明在哈希表中必然还有空位置，那么可以把key存放到表中下一个空位中。 寻找下一个空余位置要用到两种方法：线性探测和二次探测 1）线性探测： 从发生冲突的位置开始，依次继续向后探测，直到找到空位置为止 2）二次探测： 研究表明：当表的长度为质数且表装载因子a不超过0.5时，新的表项一定能够插入，而且任何一个位置都不会被探查两次。因此只要表中有一半的空位置，就不会存在表满的问题。在搜索时可以不考虑表装满的情况，但在插入时必须确保表的装载因子a不超过0.5；如果超出必须考虑增容 2.链地址法 首先对key用hash函数计算地址，具有相同地址的key归于同一子集合，每一个子集合称为一个桶，各个桶中的元素通过一个单链表链接起来，各链表的头结点存储在哈希表中 应用链地址法处理溢出，需要增设链接指针，似乎增加了存储开销，然而事实上，由于开地址法必须保持大量的空闲空间以确保搜索效率，而表项所占空间又比指针大的多，所以使用链地址法反而比开地址法节省存储空间 大概就是下图。。如有雷同。。我的图是盗的0.0 哈希函数：BKDRHash，APHash，DJBHash，JSHash，RSHash，SDBMHash，PJWHash，ELFHash 1.直接定址法取某个线性函数：hash(key)=A*key+B 适合查找比较小且连续的情况 2.除留余数法设散列表中允许的地址数为m，取一个不大于m，但最接近或者等于m的质数p作为除数，按照哈希函数：hash(key)=key%p(p&lt;=m),将关键码转换成哈希地址 3.平方取中法假设关键字为1234，对它平方就是1522756，抽取中间的3位227作为哈希地址； 平方取中法比较适合：不知道关键字的分布，而位数又不是很大的情况 4.折叠法折叠法是将关键字从左到右分割成位数相等的几部分(最后一部分位数可以短些)，然后将这几部分叠加求和，并按散列表表长，取后几位作为散列地址 折叠法适合事先不需要知道关键字的分布，适合关键字位数比较多的情况 5.随机数法选择一个随机函数，取关键字的随机函数值为它的哈希地址，即H(key)=random(key),其中random为随机数函数通常应用于关键字长度不等时采用此法 6.数学分析法名字很牛逼其实就是根据实际数据特点人工分析。。好像没啥用？ 例如：假设要存储某家公司员工登记表，如果用手机号作为关键字，那么极有可能前7位都是相同的，那么我们可以选择后面的四位作为散列地址，如果这样的抽取工作还容易出现冲突，还可以对抽取出来的数字进行反转(如1234改成4321)、右环位移(如1234改成4123)、左环移位、前两数与后两数叠加(如1234改成12+34=46)等方法 查了一堆hash函数常用质数： 123456789101112131415161761,83,113,151,211,281,379,509683,911/一千以下1217,1627,2179,2909,3881,6907,9209,/一万以下12281,16381,21841,29123,38833,51787,69061,92083,/十万以下122777,163729,218357,291143,388211,517619,690163,999983,/百万以下1226959,1635947,2181271,2908361,3877817,5170427,6893911,9191891,/千万以下12255871,16341163,21788233,29050993,38734667,51646229,68861641,91815541,/一亿以下1e9+7和1e9+9//十亿左右122420729,163227661,217636919,290182597,386910137,515880193,687840301,917120411,/十亿以下1222827239,1610612741,3221225473ul,4294967291ul/十亿以上 代码：哈希冲突用的是链地址法，哈希函数用的time33 因为题目好像真的没啥要求。。所以写了个差不多得了的哈希╮(￣▽￣””)╭ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int size=911;//随便找了个看得顺眼的常用质数struct node&#123; string key; string value; node *next;&#125;;class Hash_Table&#123; public: Hash_Table()&#123; for(int i=0;i&lt;size;i++)&#123; HT[i]=new node; HT[i]=NULL; &#125; &#125; int hash(string key); bool vis(string key); void insert(string key,string value); void get_value(string key); private: node *HT[size];&#125;;//time33int Hash_Table::hash(string key)&#123; int tmp=0; int len=key.length(); for(int i=0;i&lt;len;i++)&#123; tmp=(tmp*33+(int)key[i])%size; &#125; // cout&lt;&lt;tmp&lt;&lt;endl; return tmp;&#125;//是否存过bool Hash_Table::vis(string key)&#123; node* p; int index=hash(key); for(p=HT[index];p!=NULL;p=p-&gt;next)&#123; if(key.compare(p-&gt;key)==0)return true; &#125; return false;&#125;//插入void Hash_Table::insert(string key,string value)&#123; node *p,*tmp; int index=hash(key); // cout&lt;&lt;index&lt;&lt;endl; if(!vis(key))&#123; if(HT[index]==NULL)&#123; tmp=new node; tmp-&gt;key=key; tmp-&gt;value=value; tmp-&gt;next=NULL; HT[index]=tmp; &#125; else&#123; for(p=HT[index];p-&gt;next!=NULL;p=p-&gt;next); tmp=new node; tmp-&gt;key=key; tmp-&gt;value=value; tmp-&gt;next=NULL; p-&gt;next=tmp; &#125; &#125; else&#123; for(p=HT[index];p-&gt;next!=NULL;p=p-&gt;next) if(key.compare(p-&gt;key)==0) p-&gt;value=value; &#125;&#125;void Hash_Table::get_value(string key)&#123; int index=hash(key); node* p; for(p=HT[index];p!=NULL;p=p-&gt;next)&#123; if(key.compare(p-&gt;key)==0)&#123; cout&lt;&lt;"该key对应的value是："&lt;&lt;p-&gt;value&lt;&lt;endl; return; &#125; &#125; cout&lt;&lt;"啥玩意儿啊找不着啊QWQ"&lt;&lt;endl;&#125;int main()&#123; Hash_Table ht; int t; string kk,vv; cout&lt;&lt;"请输入哈希对数："&lt;&lt;endl; cin&gt;&gt;t; for(int i=1;i&lt;=t;i++)&#123; cout&lt;&lt;"请输入第"&lt;&lt;i&lt;&lt;"组哈希："&lt;&lt;endl; cin&gt;&gt;kk; cin&gt;&gt;vv; ht.insert(kk,vv); &#125; string s; cout&lt;&lt;"请输入要求的key："&lt;&lt;endl; while(cin&gt;&gt;s)&#123; ht.get_value(s); &#125; return 0;&#125; 运行效果： 暴雪字符串哈希妙在一个key有三个哈希值，然后就能风驰电掣又准确的单刀直入的完成一些妙妙的比较 两个不同的字符串经过一个hash算法可能得到同一个地址，但用三个不同的hash算法算出的结果都一致，那就是个很小很小很小的概率，据说这个概率是1:18889465931478580854784，对一个游戏程序来说足够安全了 至于其余那些迷之常数，尚未参透0.0 大概思路：一个字符串有三个哈希值，一个用来确定位置，另外两个用来校验 对于一个字符串来说，先哈希函数求的它的位置 1）察看哈希表中的这个位置 2）若这个位置为空，则该字符串肯定不存在，返回不存在 3）这个位置不为空，则检查其他两个哈希值是否也匹配，假如匹配，则返回存在 4）移到下一个位置，假如越界，则返回不存在 5）检查是不是又回到了原来的位置，假如是，则返回不存在 6）回到2 源码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166/*********************************StringHash.h*********************************/#pragma once#define MAXTABLELEN 1024 // 默认哈希索引表大小 ////////////////////////////////////////////////////////////////////////// // 哈希索引表定义 typedef struct _HASHTABLE&#123; long nHashA; long nHashB; bool bExists; &#125;HASHTABLE, *PHASHTABLE ;class StringHash&#123;public: StringHash(const long nTableLength = MAXTABLELEN); ~StringHash(void);private: unsigned long cryptTable[0x500]; unsigned long m_tablelength; // 哈希索引表长度 HASHTABLE *m_HashIndexTable; private: void InitCryptTable(); // 对哈希索引表预处理 unsigned long HashString(const string&amp; lpszString, unsigned long dwHashType); // 求取哈希值 public: bool Hash(string url); unsigned long Hashed(string url); // 检测url是否被hash过&#125;; /*********************************StringHash.cpp*********************************/#include "StdAfx.h"#include "StringHash.h"StringHash::StringHash(const long nTableLength /*= MAXTABLELEN*/)&#123; InitCryptTable(); m_tablelength = nTableLength; //初始化hash表 m_HashIndexTable = new HASHTABLE[nTableLength]; for ( int i = 0; i &lt; nTableLength; i++ ) &#123; m_HashIndexTable[i].nHashA = -1; m_HashIndexTable[i].nHashB = -1; m_HashIndexTable[i].bExists = false; &#125; &#125;StringHash::~StringHash(void)&#123; //清理内存 if ( NULL != m_HashIndexTable ) &#123; delete []m_HashIndexTable; m_HashIndexTable = NULL; m_tablelength = 0; &#125; &#125;/************************************************************************//*函数名：InitCryptTable/*功 能：对哈希索引表预处理 /*返回值：无/************************************************************************/void StringHash::InitCryptTable() &#123; unsigned long seed = 0x00100001, index1 = 0, index2 = 0, i; for( index1 = 0; index1 &lt; 0x100; index1++ ) &#123; for( index2 = index1, i = 0; i &lt; 5; i++, index2 += 0x100 ) &#123; unsigned long temp1, temp2; seed = (seed * 125 + 3) % 0x2AAAAB; temp1 = (seed &amp; 0xFFFF) &lt;&lt; 0x10; seed = (seed * 125 + 3) % 0x2AAAAB; temp2 = (seed &amp; 0xFFFF); cryptTable[index2] = ( temp1 | temp2 ); &#125; &#125; &#125;/************************************************************************//*函数名：HashString/*功 能：求取哈希值 /*返回值：返回hash值/************************************************************************/unsigned long StringHash::HashString(const string&amp; lpszString, unsigned long dwHashType) &#123; unsigned char *key = (unsigned char *)(const_cast&lt;char*&gt;(lpszString.c_str())); unsigned long seed1 = 0x7FED7FED, seed2 = 0xEEEEEEEE; int ch; while(*key != 0) &#123; ch = toupper(*key++); seed1 = cryptTable[(dwHashType &lt;&lt; 8) + ch] ^ (seed1 + seed2); seed2 = ch + seed1 + seed2 + (seed2 &lt;&lt; 5) + 3; &#125; return seed1; &#125;/************************************************************************//*函数名：Hashed/*功 能：检测一个字符串是否被hash过/*返回值：如果存在，返回位置；否则，返回-1/************************************************************************/unsigned long StringHash::Hashed(string lpszString)&#123; const unsigned long HASH_OFFSET = 0, HASH_A = 1, HASH_B = 2; //不同的字符串三次hash还会碰撞的几率无限接近于不可能 unsigned long nHash = HashString(lpszString, HASH_OFFSET); unsigned long nHashA = HashString(lpszString, HASH_A); unsigned long nHashB = HashString(lpszString, HASH_B); unsigned long nHashStart = nHash % m_tablelength, nHashPos = nHashStart; while ( m_HashIndexTable[nHashPos].bExists) &#123; if (m_HashIndexTable[nHashPos].nHashA == nHashA &amp;&amp; m_HashIndexTable[nHashPos].nHashB == nHashB) return nHashPos; else nHashPos = (nHashPos + 1) % m_tablelength; if (nHashPos == nHashStart) break; &#125; return -1; //没有找到 &#125;/************************************************************************//*函数名：Hash/*功 能：hash一个字符串 /*返回值：成功，返回true；失败，返回false/************************************************************************/bool StringHash::Hash(string lpszString)&#123; const unsigned long HASH_OFFSET = 0, HASH_A = 1, HASH_B = 2; unsigned long nHash = HashString(lpszString, HASH_OFFSET); unsigned long nHashA = HashString(lpszString, HASH_A); unsigned long nHashB = HashString(lpszString, HASH_B); unsigned long nHashStart = nHash % m_tablelength, nHashPos = nHashStart; while ( m_HashIndexTable[nHashPos].bExists) &#123; nHashPos = (nHashPos + 1) % m_tablelength; if (nHashPos == nHashStart) //一个轮回 &#123; //hash表中没有空余的位置了,无法完成hash return false; &#125; &#125; m_HashIndexTable[nHashPos].bExists = true; m_HashIndexTable[nHashPos].nHashA = nHashA; m_HashIndexTable[nHashPos].nHashB = nHashB; return true; &#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构第?次作业（bfs+路径打印）]]></title>
    <url>%2F10336297%2F</url>
    <content type="text"><![CDATA[题目：习题内容二：求解布线问题。1如图所示的印刷电路板，将布线区域划分成n×m个方格。布线时，电路只能沿直线或直角布线。“X”号表示电路板上必须避开的区域（如下图中的蓝色区域），“0”表示可布线的区域（如下图中的白色区域） 2输入需要布线的两个位置，如图中a、b的坐标。3求解最短布线方案。算法介绍： 从起始点a开始，进行布线路径查找（遍历）。 起始点作为第一个E结点，不断扩充新的E结点。 如果E结点的编号是k，则与该结点相邻接的未被编号的结点的编号为k+1。 使用一个队列来保存E结点。初始时起始点入队列并进行编号。 循环处理，队头结点出队列，并将其未被编号的邻接结点入队列并进行编号。 如果邻接点到达终点，则按反序依次输出各结点，即为所求  如果有多个结果，给出其中一个即可。例如，上图中有两条最佳布线结果 样例：my input 123456789106 600000000X00000X00000X000 00X000XXX0000000002 2 5 5 my output 代码：基础bfs，然后递归打印路径 输完图之后一定要再加个scanf(&quot;%s&quot;,str);的，啥玩意儿咋回事。。不然sx就直接读了个0的值，感觉以前没遇到过这问题啊 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;queue&gt;#include &lt;vector&gt;using namespace std;const int N=233;char str[N];int vis[N][N],mp[N][N];int sx,sy,ex,ey,n,m;struct node&#123; int x,y;&#125;ans[N][N];void bfs()&#123; queue&lt;node&gt;Q; vis[sx][sy]=1; node tmp; tmp.x=sx;tmp.y=sy; Q.push(tmp); while(!Q.empty())&#123; tmp=Q.front(); Q.pop(); if(tmp.x==ex&amp;&amp;tmp.y==ey)break; node u; u.x=tmp.x+1; u.y=tmp.y; if(mp[u.x][u.y]&amp;&amp;u.x&gt;=1&amp;&amp;u.x&lt;=n&amp;&amp;u.y&gt;=1&amp;&amp;u.y&lt;=m&amp;&amp;!vis[u.x][u.y])&#123; ans[u.x][u.y].x=tmp.x; ans[u.x][u.y].y=tmp.y; vis[u.x][u.y]=1; Q.push(u); &#125; u.x=tmp.x-1; u.y=tmp.y; if(mp[u.x][u.y]&amp;&amp;u.x&gt;=1&amp;&amp;u.x&lt;=n&amp;&amp;u.y&gt;=1&amp;&amp;u.y&lt;=m&amp;&amp;!vis[u.x][u.y])&#123; ans[u.x][u.y].x=tmp.x; ans[u.x][u.y].y=tmp.y; vis[u.x][u.y]=1; Q.push(u); &#125; u.x=tmp.x; u.y=tmp.y-1; if(mp[u.x][u.y]&amp;&amp;u.x&gt;=1&amp;&amp;u.x&lt;=n&amp;&amp;u.y&gt;=1&amp;&amp;u.y&lt;=m&amp;&amp;!vis[u.x][u.y])&#123; ans[u.x][u.y].x=tmp.x; ans[u.x][u.y].y=tmp.y; vis[u.x][u.y]=1; Q.push(u); &#125; u.x=tmp.x; u.y=tmp.y+1; if(mp[u.x][u.y]&amp;&amp;u.x&gt;=1&amp;&amp;u.x&lt;=n&amp;&amp;u.y&gt;=1&amp;&amp;u.y&lt;=m&amp;&amp;!vis[u.x][u.y])&#123; ans[u.x][u.y].x=tmp.x; ans[u.x][u.y].y=tmp.y; vis[u.x][u.y]=1; Q.push(u); &#125; &#125;&#125;void road(int xx,int yy)&#123; if(xx==sx&amp;&amp;yy==sy)&#123; printf("(%d,%d)\n",xx,yy); return; &#125; road(ans[xx][yy].x,ans[xx][yy].y); printf("(%d,%d)\n",xx,yy);&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)&#123; scanf("%s",str); for(int j=1;j&lt;=m;j++)&#123; if(str[j-1]=='X')mp[i][j]=0; else mp[i][j]=1; vis[i][j]=0; &#125; &#125; scanf("%s",str); scanf("%d%d%d%d",&amp;sx,&amp;sy,&amp;ex,&amp;ey); cout&lt;&lt;sx&lt;&lt;sy&lt;&lt;ex&lt;&lt;ey&lt;&lt;endl; bfs(); road(ex,ey); return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构第三次作业（上三角矩阵下三角矩阵转置，稀疏矩阵相乘，单链表实现稀疏矩阵）]]></title>
    <url>%2F40687d49%2F</url>
    <content type="text"><![CDATA[感谢队友（da lao）的帮助，可能这种题目简单编译难的题的目的。。就是为了让我会写构造函数析构函数拷贝构造函数重载运算符吧0.0，终于解决了，真实的快乐 作业一（29）：扩充类lowerTriangularMatrix，增加矩阵转置方法，返回值是下三角矩阵的转置矩阵，是上三角矩阵，是类upperTriangularMatrix的一个实例，确定时间复杂度 基本思路下三角： 123第i行之前的元素数目：1+2+...+(i–1)=i*(i-1)/2 第j列之前的元素数目：j-1 L(i,j)之前的元素数目：t[i*(i-1)/2+j-1] 上三角：（比下三角式子复杂一点，推一下然后代几个数验证就能得到） 123第i行之前的元素数目：n+(n-1)+...+...=n(i-1)-(i-1)*(i-2)/2 第j列之前的元素数目：j-iL(i,j)之前的元素数目：t[n*(i-1)-(i-1)*(i-2)/2+j-i] 转置： 初始化一个上三角矩阵，给这个上三角矩阵赋值，t[i*(i-1)/2+j-1]是下三角矩阵的L(i,j)，要对应取L(j,i)，t[j*(j-1)/2+i-1]赋值给上三角的shang.t[n*(i-1)-(i-1)*(i-2)/2+j-i] 可以先写出如下思路的代码： 1234for(int i=1;i&lt;=size;i++) for(int j=i;j&lt;=size;j++)&#123; shang.t[n*(i-1)-(i-1)*(i-2)/2+j-i]=t[j*(j-1)/2+i-1]; &#125; 然后改写一下利用store函数对上三角矩阵的私有变量赋值即可 时间复杂度：就是三角矩阵也就是数组的大小，扫一遍赋值即可，用n表示数组大小则复杂度是o(n)的 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;// 上三角template&lt;class T&gt;class UpperMatrix&#123; public: UpperMatrix(int size)&#123; n=size;t=new T [n*(n+1)/2]; &#125; ~UpperMatrix()&#123;delete [] t;&#125; UpperMatrix&lt;T&gt;&amp; Store(const T&amp; x,int i,int j); T Retrieve(int i,int j) const; UpperMatrix&lt;T&gt; operator+(const UpperMatrix&lt;T&gt;&amp; m) const; UpperMatrix&lt;T&gt; operator-(const UpperMatrix&lt;T&gt;&amp; m) const; void print(); void get(); private: int n; T *t;&#125;;template&lt;class T&gt;UpperMatrix&lt;T&gt;&amp; UpperMatrix&lt;T&gt;::Store(const T&amp; x,int i,int j)&#123; if(i&lt;1||j&lt;1||i&gt;n||j&gt;n)puts("WRONG!"); if(i&lt;=j)t[n*(i-1)-(i-1)*(i-2)/2+j-i]=x; else if(x!=0)puts("WRONG!"); return *this;&#125;template&lt;class T&gt;T UpperMatrix&lt;T&gt;::Retrieve(int i,int j)const&#123; if(i&lt;1||j&lt;1||i&gt;n||j&gt;n)puts("WRONG!"); if(i&lt;=j)return t[n*(i-1)-(i-1)*(i-2)/2+j-i]; else return 0;&#125;template&lt;class T&gt;void UpperMatrix&lt;T&gt;::print()&#123; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=i-1;j++)cout&lt;&lt;" "; for(int j=i;j&lt;=n;j++)&#123; cout&lt;&lt;t[n*(i-1)-(i-1)*(i-2)/2+j-i]&lt;&lt;" "; &#125; cout&lt;&lt;endl; &#125;&#125;template&lt;class T&gt;void UpperMatrix&lt;T&gt;::get()&#123; for(int i=1;i&lt;=n;i++) for(int j=i;j&lt;=n;j++)&#123; T data; cin&gt;&gt;data; t[n*(i-1)-(i-1)*(i-2)/2+j-i]=data; &#125;&#125;template&lt;class T&gt;UpperMatrix&lt;T&gt; UpperMatrix&lt;T&gt;::operator+(const UpperMatrix&lt;T&gt;&amp; m) const&#123; int size=n*(n+1)/2; for(int i=0;i&lt;size;i++)this-&gt;t[i]=this-&gt;t[i]+m[i]; return *this;&#125;template&lt;class T&gt;UpperMatrix&lt;T&gt; UpperMatrix&lt;T&gt;::operator-(const UpperMatrix&lt;T&gt;&amp; m) const&#123; int size=n*(n+1)/2; for(int i=0;i&lt;size;i++)this-&gt;t[i]=this-&gt;t[i]-m[i]; return *this;&#125;// 下三角template&lt;class T&gt;class LowerMatrix&#123; public: LowerMatrix(int size)&#123; n=size;t=new T [n*(n+1)/2]; &#125; ~LowerMatrix()&#123;delete [] t;&#125; LowerMatrix&lt;T&gt;&amp; Store(const T&amp; x,int i,int j); T Retrieve(int i,int j) const; LowerMatrix&lt;T&gt; operator+(const LowerMatrix&lt;T&gt;&amp; m) const; LowerMatrix&lt;T&gt; operator-(const LowerMatrix&lt;T&gt;&amp; m) const; void print(); void get(); void zhuanzhi(UpperMatrix&lt;T&gt;&amp; shang); private: int n; T *t;&#125;;template&lt;class T&gt;LowerMatrix&lt;T&gt;&amp; LowerMatrix&lt;T&gt;::Store(const T&amp; x,int i,int j)&#123; if(i&lt;1||j&lt;1||i&gt;n||j&gt;n)puts("WRONG!"); if(i&gt;=j)t[i*(i-1)/2+j-1]=x; else if(x!=0)puts("WRONG!"); return *this;&#125;template&lt;class T&gt;T LowerMatrix&lt;T&gt;::Retrieve(int i,int j)const&#123; if(i&lt;1||j&lt;1||i&gt;n||j&gt;n)puts("WRONG!"); if(i&gt;=j)return t[i*(i-1)/2+j-1]; else return 0;&#125;template&lt;class T&gt;void LowerMatrix&lt;T&gt;::print()&#123; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=i;j++)&#123; cout&lt;&lt;t[i*(i-1)/2+j-1]&lt;&lt;" "; &#125; for(int j=i+1;j&lt;=n;j++)cout&lt;&lt;" "; cout&lt;&lt;endl; &#125;&#125;template&lt;class T&gt;void LowerMatrix&lt;T&gt;::get()&#123; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=i;j++)&#123; T data; cin&gt;&gt;data; t[i*(i-1)/2+j-1]=data; &#125;&#125;template&lt;class T&gt;LowerMatrix&lt;T&gt; LowerMatrix&lt;T&gt;::operator+(const LowerMatrix&lt;T&gt;&amp; m) const&#123; int size=n*(n+1)/2; for(int i=0;i&lt;size;i++)this-&gt;t[i]=this-&gt;t[i]+m[i]; return *this;&#125;template&lt;class T&gt;LowerMatrix&lt;T&gt; LowerMatrix&lt;T&gt;::operator-(const LowerMatrix&lt;T&gt;&amp; m) const&#123; int size=n*(n+1)/2; for(int i=0;i&lt;size;i++)this-&gt;t[i]=this-&gt;t[i]-m[i]; return *this;&#125;template&lt;class T&gt;void LowerMatrix&lt;T&gt;::zhuanzhi(UpperMatrix&lt;T&gt;&amp; shang)&#123; int size=n; for(int i=1;i&lt;=size;i++) for(int j=i;j&lt;=size;j++)&#123; T data=t[j*(j-1)/2+i-1]; shang.Store(data,i,j); &#125;&#125;int main()&#123; UpperMatrix&lt;int&gt; shang(4); LowerMatrix&lt;int&gt; xia(4); xia.get(); cout&lt;&lt;"---下三角矩阵---"&lt;&lt;endl; xia.print(); xia.zhuanzhi(shang); cout&lt;&lt;"---转置后的上三角矩阵---"&lt;&lt;endl; shang.print(); return 0;&#125; 运行效果： 作业二（45）：编写一个方法，把两个存储在一起的一维数组的稀疏矩阵相乘，假定两个矩阵和结果矩阵都是按行主次序存储 基本思路：首先矩阵乘法的式子是c[i][j]=∑a[i][k]*b[k][j] 由于个数很少，再怎么乘c[i][j]也没几个，所以直接按顺序暴力枚举，可以知道只有在a(i,k)和b(k,j)有相同的k的时候才会对答案产生贡献，将这些c(i,j)存入一个Term型的数组 由于相乘中可能会有多个c(i,j)具有相同的ij值，所以要把(i,j)相同的相加合并 此外还有一点是，由于相乘操作中可能产生0，所以最后调用去零的成员函数 get函数中输入结束后还要进行一下对于非法数据的处理，也就是去重和去0，因为元素个数最多才10个，所以o(n^2)暴力比较即可，无需使用set去重 去重部分测试结果如图： 时间复杂度：记矩阵当前非0元素个数为n，则复杂度为o(n^2+n^4) 代码：此代码包括构造函数，拷贝构造函数，析构函数，矩阵转置函数，举证相加函数，矩阵相乘函数，输入，显示，去重，去0 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;template &lt;class T&gt;class Term&#123; public: int row,col; T value;&#125;;template&lt;class T&gt;class SparseMatrix&#123; public: SparseMatrix(int numsize=10); SparseMatrix(SparseMatrix&lt;T&gt; &amp;b); ~SparseMatrix() &#123;delete [] t;&#125; void Transpose(SparseMatrix&lt;T&gt; &amp;b)const; void Add(const SparseMatrix&lt;T&gt; &amp;b,SparseMatrix&lt;T&gt; &amp;c)const; void Mul(const SparseMatrix&lt;T&gt; &amp;b,SparseMatrix&lt;T&gt; &amp;c)const; void get(); void show(); void no_same(); void no_zero(); private: void Append(const Term&lt;T&gt;&amp; t); int hangshu,lieshu,cursize,numsize; Term&lt;T&gt; *t;&#125;;template&lt;class T&gt;SparseMatrix&lt;T&gt;::SparseMatrix(int n)&#123; if(n&lt;1)puts("WRONG!"); numsize=n; t=new Term&lt;T&gt; [numsize]; cursize=hangshu=lieshu=0;&#125;template&lt;class T&gt;SparseMatrix&lt;T&gt;::SparseMatrix(SparseMatrix&lt;T&gt; &amp;b)&#123; hangshu=b.hangshu;lieshu=b.lieshu; cursize=b.cursize;numsize=b.numsize; for(int i=0;i&lt;cursize;i++)&#123; t[i].row=b.t[i].row; t[i].col=b.t[i].col; t[i].value=b.t[i].value; &#125;&#125;template &lt;class T&gt;void SparseMatrix&lt;T&gt;::show()&#123; cout&lt;&lt;"行数="&lt;&lt;hangshu&lt;&lt;" 列数="&lt;&lt;lieshu&lt;&lt;endl; cout&lt;&lt;"当前非0元素个数="&lt;&lt;cursize&lt;&lt;endl; for(int i=0;i&lt;cursize;i++) cout&lt;&lt;"t("&lt;&lt;t[i].row&lt;&lt;','&lt;&lt;t[i].col&lt;&lt;")="&lt;&lt;t[i].value&lt;&lt;endl;&#125;template&lt;class T&gt;void SparseMatrix&lt;T&gt;::get()&#123; cout&lt;&lt;"输入行数列数和非0元素个数："&lt;&lt;endl; cin&gt;&gt;hangshu&gt;&gt;lieshu&gt;&gt;cursize; if(cursize&gt;numsize)puts("空间不足!"); for(int i=0;i&lt;cursize;i++) &#123; cout&lt;&lt;"输入第"&lt;&lt;(i+1)&lt;&lt;"个元素的行号列号和该元素的值："&lt;&lt;endl; cin&gt;&gt;t[i].row&gt;&gt;t[i].col&gt;&gt;t[i].value; &#125; this-&gt;no_same(); this-&gt;no_zero();&#125;template&lt;class T&gt;void SparseMatrix&lt;T&gt;::no_same()&#123; for(int i=0;i&lt;cursize;i++)&#123; for(int j=i+1;j&lt;cursize;j++)&#123; if(t[i].row==t[j].row&amp;&amp;t[i].col==t[j].col)&#123; cursize--; for(int k=j;k&lt;cursize;k++)&#123; t[k].row=t[k+1].row; t[k].col=t[k+1].col; t[k].value=t[k+1].value; &#125; j--; &#125; &#125; &#125;&#125;template&lt;class T&gt;void SparseMatrix&lt;T&gt;::no_zero()&#123; for(int i=0;i&lt;cursize;i++)&#123; if(t[i].value==0)&#123; cursize--; for(int k=i;k&lt;cursize;k++)&#123; t[k].row=t[k+1].row; t[k].col=t[k+1].col; t[k].value=t[k+1].value; &#125; i--; &#125; &#125;&#125;template&lt;class T&gt;void SparseMatrix&lt;T&gt;::Transpose(SparseMatrix&lt;T&gt; &amp;b) const&#123; if(cursize&gt;b.numsize)puts("WRONG!"); b.lieshu=hangshu; b.hangshu=lieshu; b.cursize=cursize; int *col_nozero,*row_next; col_nozero=new int[lieshu+1]; row_next=new int[lieshu+1]; for(int i=1;i&lt;=lieshu;i++)col_nozero[i]=0; for(int i=0;i&lt;cursize;i++)col_nozero[t[i].col]++; row_next[1]=0; for(int i=2;i&lt;=lieshu;i++)row_next[i]=row_next[i-1]+col_nozero[i-1]; for (int i=0;i&lt;cursize;i++)&#123; int j=row_next[t[i].col]++; b.t[j].row=t[i].col; b.t[j].col=t[i].row; b.t[j].value=t[i].value; &#125;&#125;template&lt;class T&gt;void SparseMatrix&lt;T&gt;::Append(const Term&lt;T&gt;&amp; tt)&#123; if(cursize&gt;numsize)cout&lt;&lt;"溢出溢出！"&lt;&lt;endl; t[cursize]=tt; cursize++;&#125;template&lt;class T&gt;void SparseMatrix&lt;T&gt;::Add(const SparseMatrix&lt;T&gt; &amp;b,SparseMatrix&lt;T&gt; &amp;c)const&#123; if(hangshu!=b.hangshu||lieshu!=b.lieshu)puts("WRONG!"); c.hangshu=hangshu; c.lieshu=lieshu; c.cursize=0; int ct=0,cb=0; while(ct&lt;cursize&amp;&amp;cb&lt;b.cursize)&#123; int indt=t[ct].row*lieshu+t[ct].col; int indb=b.t[cb].row*lieshu+b.t[cb].col; if(indt&lt;indb)&#123; c.Append(t[ct]); ct++; &#125; else if(indt==indb)&#123; if(t[ct].value+b.t[cb].value)&#123; Term&lt;T&gt; tt; tt.row=t[ct].row; tt.col=t[ct].col; tt.value=t[ct].value+b.t[cb].value; c.Append(tt); &#125; ct++;cb++; &#125; else&#123; c.Append(b.t[cb]); cb++; &#125; &#125; for (;ct&lt;cursize;ct++) c.Append(t[ct]); for (;cb&lt;b.cursize;cb++) c.Append(b.t[cb]);&#125;template&lt;class T&gt;void SparseMatrix&lt;T&gt;::Mul(const SparseMatrix&lt;T&gt; &amp;b,SparseMatrix&lt;T&gt; &amp;c)const&#123; if(lieshu!=b.hangshu)puts("WRONG!"); int ji=0; c.hangshu=hangshu; c.lieshu=b.lieshu; c.cursize=0; Term&lt;T&gt; *tmp; tmp=new Term&lt;T&gt; [cursize*b.cursize]; for(int i=0;i&lt;=cursize;i++)&#123; for(int j=0;j&lt;b.cursize;j++)&#123; if(t[i].col==b.t[j].row)&#123; tmp[ji].row=t[i].row; tmp[ji].col=b.t[j].col; tmp[ji++].value=(t[i].value)*(b.t[j].value); &#125; &#125; &#125; for(int i=0;i&lt;ji;i++)&#123; for(int j=i+1;j&lt;ji;j++)&#123; if(tmp[i].row==tmp[j].row&amp;&amp;tmp[i].col==tmp[j].col)&#123; tmp[i].value=tmp[i].value+tmp[j].value; ji--; for(int k=j;k&lt;cursize;k++)&#123; tmp[k].row=tmp[k+1].row; tmp[k].col=tmp[k+1].col; tmp[k].value=tmp[k+1].value; &#125; j--; &#125; &#125; &#125; for(int i=0;i&lt;ji;i++)c.Append(tmp[i]); c.no_zero();&#125;int main()&#123; int n; cout&lt;&lt;"请输入稀疏矩阵总非0元素个数："; cin&gt;&gt;n; SparseMatrix&lt;int&gt; m1(n),m2(n),m3(n); m1.get(); m1.show(); m2.get(); m2.show(); m1.Mul(m2,m3); m3.show(); return 0;&#125; 运行效果： 作业三（51）：给类linkerMatrix增加下列操作：1）已知一个元素的行，列和数值，存储这个元素2）已知一个元素的行和列，从矩阵中取出这个元素3）两个稀疏矩阵相加4）两个稀疏矩阵相减5）两个稀疏矩阵相乘 基本思路：用单链表的原理存稀疏矩阵，和作业二的数组相比的优点是，不限制稀疏矩阵中非0元素的个数，所以根据单链表的原理添加头节点和尾节点这两个成员 1）存储某元素相当于单链表的Append方法 2）取出某元素相当于单链表的Search方法 3）相加，先判断行数列数合法性，然后我的处理是先把AB中的元素都Append到C中，接着用两个指针循环C，对C中的(i,j)相同的元素执行合并操作，注意最后要去0 4）和相加原理相同 5）相乘，原理同作业二，只有在a(i,k)和b(k,j)有相同的k的时候才会对答案产生贡献，将这些相乘的结果Append到C中，然后两个指针对C做合并的操作，最后去0 时间复杂度：存储是o(1)，取出是o(n)，相加是o(2n+n^2)，相减是o(2n+n^2)，相乘是o(n^2+n^4) 遇到问题及解决：1.析构函数运行后出现野指针 析构函数在delete first前加个判断，还有注意只有一个first的情况，最后是delete first 2.（高亮高亮）重载输入输出运算符&gt;&gt;&lt;&lt;时声明为友元就不能用。。不声明直接定义就能用了。。这是为什么呢！！！ 一系列探索之后，问题转化为-&gt;（类模版+友元函数+重载运算符=？声明怎么写） 之前是这么声明的： 12friend ostream&amp; operator&lt;&lt; &lt;T&gt;(ostream&amp;,LinkedMatrix&amp;);friend istream&amp; operator&gt;&gt; &lt;T&gt;(istream&amp;,LinkedMatrix&amp;); 在经历了掉头发and掉头发and掉头发之后！！终于找到了资料！如下： 也就是说，我一开始的写法虽然是个大众方法，但是由于编译环境的不同，和标准库有冲突，在sublime，devc++和codeblocks等是运行不了的 所以怎么办呢？ 在类中声明friend的时候，要定义一个和T不同的模板参数U 如下格式，问题完美解决~(≧▽≦)/~： 1234template &lt;class U&gt;friend ostream&amp; operator&lt;&lt; (ostream&amp;,LinkedMatrix&lt;U&gt;&amp;);template &lt;class U&gt;friend istream&amp; operator&gt;&gt; (istream&amp;,LinkedMatrix&lt;U&gt;&amp;); 然后具体定义的时候是： 1234template&lt;class T&gt;istream&amp; operator&gt;&gt; (istream&amp; is,LinkedMatrix&lt;T&gt;&amp; L)&#123; //&#125; 3.delete存在没有解决的问题 反正存在问题就是了，我还没懂，结案 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;template &lt;class T&gt;class Node&#123;public: int row,col; T value; Node&lt;T&gt; *next;&#125;;template&lt;class T&gt;class LinkedMatrix&#123; template &lt;class U&gt; friend ostream&amp; operator&lt;&lt; (ostream&amp;,LinkedMatrix&lt;U&gt;&amp;); template &lt;class U&gt; friend istream&amp; operator&gt;&gt; (istream&amp;,LinkedMatrix&lt;U&gt;&amp;); public: LinkedMatrix()&#123; first=NULL;last=NULL; hangshu=lieshu=cursize=0; &#125;; LinkedMatrix(LinkedMatrix&lt;T&gt; &amp;B); ~LinkedMatrix(); LinkedMatrix operator=(LinkedMatrix&lt;T&gt; &amp;B); int Search(int i,int j,const T&amp; x)const; void Append(int i,int j,const T&amp; x); LinkedMatrix&lt;T&gt;&amp; Delete(int k); void no_zero(); void Add(const LinkedMatrix&lt;T&gt; &amp;B,LinkedMatrix&lt;T&gt; &amp;C)const; void Sub(const LinkedMatrix&lt;T&gt; &amp;B,LinkedMatrix&lt;T&gt; &amp;C)const; void Mul(const LinkedMatrix&lt;T&gt; &amp;B,LinkedMatrix&lt;T&gt; &amp;C)const; void get(); void show(); void Erase(); public: int hangshu,lieshu,cursize; Node&lt;T&gt; *first,*last;&#125;;template&lt;class T&gt;LinkedMatrix&lt;T&gt;::~LinkedMatrix()&#123; Node&lt;T&gt; *p; while(first-&gt;next!=NULL)&#123; p=first-&gt;next; if(first)&#123; delete first; first=NULL; &#125; first=p; &#125; delete first;&#125;template&lt;class T&gt;LinkedMatrix&lt;T&gt;::LinkedMatrix(LinkedMatrix&lt;T&gt; &amp;B)&#123; Node&lt;T&gt; *b; for(b=B.first;b;b=b-&gt;next)&#123; Node&lt;T&gt; *y=new Node&lt;T&gt;; y-&gt;row=b-&gt;row; y-&gt;col=b-&gt;col; y-&gt;value=b-&gt;value; if(first!=NULL)&#123; last-&gt;next=y; last=y; &#125; else first=last=y; &#125;&#125;template&lt;class T&gt;LinkedMatrix&lt;T&gt; LinkedMatrix&lt;T&gt;::operator=(LinkedMatrix&lt;T&gt; &amp;B)&#123; Node&lt;T&gt; *b; for(b=B.first;b;b=b-&gt;next)&#123; Node&lt;T&gt; *y=new Node&lt;T&gt;; y-&gt;row=b-&gt;row; y-&gt;col=b-&gt;col; y-&gt;value=b-&gt;value; if(first!=NULL)&#123; last-&gt;next=y; last=y; &#125; else first=last=y; &#125;&#125;template&lt;class T&gt;istream&amp; operator&gt;&gt; (istream&amp; is,LinkedMatrix&lt;T&gt;&amp; L)&#123; cout&lt;&lt;"输入行数列数和非0元素个数："&lt;&lt;endl; is&gt;&gt;L.hangshu&gt;&gt;L.lieshu&gt;&gt;L.cursize; int i,j; T data; int num=L.cursize; for(int k=0;k&lt;num;k++) &#123; cout&lt;&lt;"输入第"&lt;&lt;(k+1)&lt;&lt;"个元素的行号列号和该元素的值："&lt;&lt;endl; is&gt;&gt;i&gt;&gt;j&gt;&gt;data; if(i&gt;L.hangshu||j&gt;L.lieshu)&#123; cout&lt;&lt;"输入了无效的行列！请重新输入"&lt;&lt;endl; k--; continue; &#125; else if(data==0)cout&lt;&lt;"输入0了！这个数据会自动去除"&lt;&lt;endl; else L.Append(i,j,data); &#125; L.no_zero(); return is;&#125;template&lt;class T&gt;ostream&amp; operator&lt;&lt; (ostream&amp; os,LinkedMatrix&lt;T&gt;&amp; L)&#123; os&lt;&lt;"行数="&lt;&lt;L.hangshu&lt;&lt;" 列数="&lt;&lt;L.lieshu&lt;&lt;endl; os&lt;&lt;"当前非0元素个数="&lt;&lt;L.cursize&lt;&lt;endl; Node&lt;T&gt; *current; for(current=L.first;current;current=current-&gt;next) os&lt;&lt;"M("&lt;&lt;current-&gt;row&lt;&lt;','&lt;&lt;current-&gt;col&lt;&lt;")="&lt;&lt;current-&gt;value&lt;&lt;endl; return os;&#125;template&lt;class T&gt;void LinkedMatrix&lt;T&gt;::get()&#123; cout&lt;&lt;"输入行数列数和非0元素个数："&lt;&lt;endl; cin&gt;&gt;hangshu&gt;&gt;lieshu&gt;&gt;cursize; int i,j; T data; int num=cursize; for(int k=0;k&lt;num;k++) &#123; cout&lt;&lt;"输入第"&lt;&lt;(k+1)&lt;&lt;"个元素的行号列号和该元素的值："&lt;&lt;endl; cin&gt;&gt;i&gt;&gt;j&gt;&gt;data; if(i&gt;hangshu||j&gt;lieshu)&#123; cout&lt;&lt;"输入了无效的行列！请重新输入"&lt;&lt;endl; k--; continue; &#125; else if(data==0)cout&lt;&lt;"输入0了！这个数据会自动去除"&lt;&lt;endl; else this-&gt;Append(i,j,data); &#125; this-&gt;no_zero();&#125;template&lt;class T&gt;void LinkedMatrix&lt;T&gt;::show()&#123; cout&lt;&lt;"行数="&lt;&lt;hangshu&lt;&lt;" 列数="&lt;&lt;lieshu&lt;&lt;endl; cout&lt;&lt;"当前非0元素个数="&lt;&lt;cursize&lt;&lt;endl; Node&lt;T&gt; *current; for(current=first;current;current=current-&gt;next) cout&lt;&lt;"t("&lt;&lt;current-&gt;row&lt;&lt;','&lt;&lt;current-&gt;col&lt;&lt;")="&lt;&lt;current-&gt;value&lt;&lt;endl;&#125;template&lt;class T&gt;void LinkedMatrix&lt;T&gt;::Erase()&#123; if(cursize==0)return; Node&lt;T&gt; *p; p=first; while(first-&gt;next!=NULL)&#123; p=first-&gt;next; delete first; first=p; &#125; delete p; hangshu=lieshu=cursize=0;&#125;template&lt;class T&gt;int LinkedMatrix&lt;T&gt;::Search(int i,int j,const T &amp;x)const&#123; Node&lt;T&gt; *current=first; int index=1; while(current&amp;&amp;!(current-&gt;row==i&amp;&amp;current-&gt;col==j))&#123; current=current-&gt;next; index++; &#125; if(current)&#123; x=current-&gt;value; return index; &#125; return 0;&#125;template&lt;class T&gt;void LinkedMatrix&lt;T&gt;::Append(int i,int j,const T&amp; x)&#123; Node&lt;T&gt; *y=new Node&lt;T&gt;; y-&gt;value=x;y-&gt;row=i;y-&gt;col=j; y-&gt;next=NULL; if(first!=NULL)&#123; last-&gt;next=y; last=y; &#125; else first=last=y; cursize++;&#125;template&lt;class T&gt;LinkedMatrix&lt;T&gt;&amp; LinkedMatrix&lt;T&gt;::Delete(int k)&#123; if(k&lt;1||!first||k&gt;cursize)cout&lt;&lt;"删除出错！"&lt;&lt;endl; Node&lt;T&gt; *p=first; if(k==1)first=first-&gt;next; else&#123; Node&lt;T&gt; *q=first; for(int index=1;index&lt;k-1&amp;&amp;q;index++)q=q-&gt;next; if(!q||!q-&gt;next)cout&lt;&lt;"WORNG"&lt;&lt;endl; p=q-&gt;next; q-&gt;next=p-&gt;next; &#125; cursize--; delete p; return *this;&#125;template&lt;class T&gt;void LinkedMatrix&lt;T&gt;::no_zero()&#123; Node&lt;T&gt; *current; int ji; for(current=first,ji=1;current;current=current-&gt;next,ji++) if(current-&gt;value==0)Delete(ji);&#125;template&lt;class T&gt;void LinkedMatrix&lt;T&gt;::Add(const LinkedMatrix&lt;T&gt; &amp;B,LinkedMatrix&lt;T&gt; &amp;C)const&#123; if(B.hangshu!=hangshu||B.lieshu!=lieshu)&#123; cout&lt;&lt;"WRONG!"&lt;&lt;endl;return; &#125; C.hangshu=hangshu;C.lieshu=lieshu; Node&lt;T&gt; *a,*b,*c,*p; int i,j; T data; c=C.first; for(a=first;a;a=a-&gt;next)&#123; i=a-&gt;row;j=a-&gt;col;data=a-&gt;value; C.Append(i,j,data); &#125; for(b=B.first;b;b=b-&gt;next)&#123; i=b-&gt;row;j=b-&gt;col;data=b-&gt;value; C.Append(i,j,data); &#125; for(c=C.first,i=1;c;c=c-&gt;next,i++)&#123; for(p=c-&gt;next,j=i+1;p;j++)&#123; if(c-&gt;row==p-&gt;row&amp;&amp;c-&gt;col==p-&gt;col)&#123; c-&gt;value=c-&gt;value+p-&gt;value; C.Delete(j); &#125; if(p)p=p-&gt;next; &#125; &#125; C.no_zero();&#125;template&lt;class T&gt;void LinkedMatrix&lt;T&gt;::Sub(const LinkedMatrix&lt;T&gt; &amp;B,LinkedMatrix&lt;T&gt; &amp;C)const&#123; if(B.hangshu!=hangshu||B.lieshu!=lieshu)&#123; cout&lt;&lt;"WRONG!"&lt;&lt;endl;return; &#125; C.hangshu=hangshu;C.lieshu=lieshu; Node&lt;T&gt; *a,*b,*c,*p; int i,j; T data; c=C.first; for(a=first;a;a=a-&gt;next)&#123; i=a-&gt;row;j=a-&gt;col;data=a-&gt;value; C.Append(i,j,data); &#125; for(b=B.first;b;b=b-&gt;next)&#123; i=b-&gt;row;j=b-&gt;col;data=-(b-&gt;value); C.Append(i,j,data); &#125; for(c=C.first,i=1;c;c=c-&gt;next,i++)&#123; for(p=c-&gt;next,j=i+1;p;j++)&#123; if(c-&gt;row==p-&gt;row&amp;&amp;c-&gt;col==p-&gt;col)&#123; c-&gt;value=c-&gt;value+p-&gt;value; C.Delete(j); &#125; if(p)p=p-&gt;next; &#125; &#125; C.no_zero();&#125;template&lt;class T&gt;void LinkedMatrix&lt;T&gt;::Mul(const LinkedMatrix&lt;T&gt; &amp;B,LinkedMatrix&lt;T&gt; &amp;C)const&#123; if(B.hangshu!=lieshu)&#123; cout&lt;&lt;"WRONG!"&lt;&lt;endl;return; &#125; C.hangshu=hangshu;C.lieshu=B.lieshu; Node&lt;T&gt; *a,*b,*c,*p; int i,j; T data; c=C.first; for(a=first;a;a=a-&gt;next)&#123; for(b=B.first;b;b=b-&gt;next)&#123; if(a-&gt;col==b-&gt;row)&#123; i=a-&gt;row;j=b-&gt;col;data=(a-&gt;value)*(b-&gt;value); C.Append(i,j,data); &#125; &#125; &#125; for(c=C.first,i=1;c;c=c-&gt;next,i++)&#123; for(p=c-&gt;next,j=i+1;p;j++)&#123; if(c-&gt;row==p-&gt;row&amp;&amp;c-&gt;col==p-&gt;col)&#123; c-&gt;value=c-&gt;value+p-&gt;value; C.Delete(j); &#125; if(p)p=p-&gt;next; &#125; &#125; C.no_zero();&#125;int main()&#123; LinkedMatrix&lt;int&gt; A,B,C; cin&gt;&gt;A; cin&gt;&gt;B; A.Add(B,C); cout&lt;&lt;"-------A+B-------"&lt;&lt;endl; cout&lt;&lt;C; C.Erase(); A.Sub(B,C); cout&lt;&lt;"-------A-B-------"&lt;&lt;endl; cout&lt;&lt;C; C.Erase(); A.Mul(B,C); cout&lt;&lt;"-------A*B-------"&lt;&lt;endl; cout&lt;&lt;C; return 0;&#125; 运行效果： 去0效果：]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归 —— 汉诺塔&双色汉诺塔（分离型）]]></title>
    <url>%2Fa8a3dabc%2F</url>
    <content type="text"><![CDATA[网上甚至连能盗用的好看的双色汉诺塔的图都没有。。只好自己画了ᶘ ᵒᴥᵒᶅ 为啥大佬们总能知道一些奇奇怪怪的有趣的东西 双色的和网上的答案对拍了一下，应该是正解，三色待补。。 1.单色汉诺塔首先回忆一下普通汉诺塔的递归原理： 1）将A上n-1个盘子借助C移到B上 2）把A上剩下的一个盘移到C上 3）将n-1个盘从B借助于A移到C上 12345678910void hanoi(int n,char x,char y,char z)&#123; if(n==1)cout&lt;&lt;x&lt;&lt;"-&gt;"&lt;&lt;z&lt;&lt;endl; else&#123; hanoi(n-1,x,z,y);//前n-1个盘子从x移动到y上 cout&lt;&lt;x&lt;&lt;"—&gt;"&lt;&lt;z&lt;&lt;endl; //将最底下的最后一个盘子从x移动到z上 hanoi(n-1,y,x,z);//将y上的n-1个盘子移动到z上 &#125; return;&#125; 2.双色汉诺塔双色汉诺塔就是下图这个意思，其他条件都和普通汉诺塔一样 1）双色汉诺塔基本思路：所以双色汉诺塔的递归思路就是： 1.把A上的n-2个借助B移到C上 2.把A上的两个大盘移到B 3.把C上的n-2个借助B移回A上 4.把B上的另一个大圆盘移到C 现在BC的底座都已经放好了，所以变成了一个新的子问题，也就是n-2个盘的双色汉诺塔 所以考虑跑循环(n/2-1)次求解，上面的1，3步骤其实就各相当于一次完整的一色汉诺塔的操作，比如步骤1即相当于一色汉诺塔中把n-2个汉诺塔从a移到c，按照一色汉诺塔的递归步骤来即可 也就是说如果要把n-2个汉诺塔从a移到c，就先把n-4个汉诺塔借助c移到b，然后把第n-2号和n-3号的盘移到c，然后把n-4个汉诺塔借助a移到c（可见，这个子步骤和一色汉诺塔唯一不同的就是，n=1的时候是直接操作两个同宽塔的，要cout两次） 2）代码：12345678910111213141516171819202122232425262728293031323334353637#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;void hanoi(int n,char a,char b,char c)&#123; if(n==1)&#123; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; &#125; else&#123; hanoi(n-1,a,c,b); cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; hanoi(n-1,b,a,c); &#125;&#125;void hanoi2(int n,char a,char b,char c)&#123; for(int i=n/2;i&gt;1;i--)&#123; hanoi(i-1,a,b,c); cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;b&lt;&lt;endl; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;b&lt;&lt;endl; hanoi(i-1,c,b,a); cout&lt;&lt;b&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl; &#125; cout&lt;&lt;a&lt;&lt;"-&gt;"&lt;&lt;b&lt;&lt;endl; cout&lt;&lt;b&lt;&lt;"-&gt;"&lt;&lt;c&lt;&lt;endl;&#125;int main()&#123; int nn; cin&gt;&gt;nn; char a='A',b='B',c='C'; hanoi2(nn,a,b,c); return 0;&#125; 3）运行结果和分析：输出了n=2，4，6，8，10……的情况 然后oeis，没有这个序列( ･᷄ὢ･᷅ )怀疑自己是不是错了，然后发现，诶这些数列好像都是接近两倍的关系，不如乱搞一下试试 如果f(0)初始为-1，输出f(n)-f(n-1)*2就会产生如下结果： 嗷真是好看啊٩(˃̶͈̀௰˂̶͈́)و就是它了我觉得OK 这个方法的巧妙之处在于，子递归and两个两个的移动，相当于把2n又回归到了n时的复杂度，因为一阶汉诺塔的次数是f(n)=2^n-1，所以2n小一半差的是根号级别的]]></content>
      <categories>
        <category>杂</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[codevs 1068 乌龟棋 2010NOIP（四维dp）]]></title>
    <url>%2Fe31679e2%2F</url>
    <content type="text"><![CDATA[题目描述 Description小明过生日的时候，爸爸送给他一副乌龟棋当作礼物。 乌龟棋的棋盘是一行N个格子，每个格子上一个分数（非负整数）。棋盘第1格是唯一 的起点，第N格是终点，游戏要求玩家控制一个乌龟棋子从起点出发走到终点。 …… 1 2 3 4 5 ……N 乌龟棋中M张爬行卡片，分成4种不同的类型（M张卡片中不一定包含所有4种类型 的卡片，见样例），每种类型的卡片上分别标有1、2、3、4四个数字之一，表示使用这种卡 片后，乌龟棋子将向前爬行相应的格子数。游戏中，玩家每次需要从所有的爬行卡片中选择 一张之前没有使用过的爬行卡片，控制乌龟棋子前进相应的格子数，每张卡片只能使用一次。 游戏中，乌龟棋子自动获得起点格子的分数，并且在后续的爬行中每到达一个格子，就得到 该格子相应的分数。玩家最终游戏得分就是乌龟棋子从起点到终点过程中到过的所有格子的 分数总和。 很明显，用不同的爬行卡片使用顺序会使得最终游戏的得分不同，小明想要找到一种卡 片使用顺序使得最终游戏得分最多。 现在，告诉你棋盘上每个格子的分数和所有的爬行卡片，你能告诉小明，他最多能得到 多少分吗？ 输入描述 Input Description输入的每行中两个数之间用一个空格隔开。 第1行2个正整数N和M，分别表示棋盘格子数和爬行卡片数。 第2行N个非负整数，a1a2……aN ，其中ai表示棋盘第i个格子上的分数。 第3行M个整数，b1b2……bM ，表示M张爬行卡片上的数字。 输入数据保证到达终点时刚好用光M张爬行卡片，即N - 1=∑(1-&gt;M) bi 输出描述 Output Description输出一行一个整数 样例输入 Sample Input12313 84 96 10 64 55 13 94 53 5 24 89 8 301 1 1 1 1 2 4 1 样例输出 Sample Output1455 题意：1*n个格子，每个格子一个分数，m张卡片，上面标有1，2，3，4，数字几代表向前走几格，每张卡用一次，求起点到终点能获得的最大分数 题解：用a,b,c,d表示四类卡片，f[a][b][c][d]表示用了a张1，b张2，c张3，d张4的情况下能获得的最大分数，也就是说当前的位置是a+2*b+3*c+4*d+1 所以可以得到状态转移方程为： 1234dp[a+1][b][c][d]=max(dp[a+1][b][c][d],dp[a][b][c][d]+v[(a+1)+2*b+3*c+4*d+1]);dp[a][b+1][c][d]=max(dp[a][b+1][c][d],dp[a][b][c][d]+v[a+2*(b+1)+3*c+4*d+1]);dp[a][b][c+1][d]=max(dp[a][b][c+1][d],dp[a][b][c][d]+v[a+2*b+3*(c+1)+4*d+1]);dp[a][b][c][d+1]=max(dp[a][b][c][d+1],dp[a][b][c][d]+v[a+2*b+3*c+4*(d+1)+1]); 代码：1234567891011121314151617181920212223242526272829#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int v[355],dp[42][42][42][42],num[5]=&#123;0&#125;;int main()&#123; int n,m,tmp; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%d",&amp;v[i]); for(int i=0;i&lt;m;i++)&#123; scanf("%d",&amp;tmp); num[tmp]++; &#125; dp[0][0][0][0]=v[1]; for(int a=0;a&lt;=num[1];a++) for(int b=0;b&lt;=num[2];b++) for(int c=0;c&lt;=num[3];c++) for(int d=0;d&lt;=num[4];d++)&#123; dp[a+1][b][c][d]=max(dp[a+1][b][c][d],dp[a][b][c][d]+v[(a+1)+2*b+3*c+4*d+1]); dp[a][b+1][c][d]=max(dp[a][b+1][c][d],dp[a][b][c][d]+v[a+2*(b+1)+3*c+4*d+1]); dp[a][b][c+1][d]=max(dp[a][b][c+1][d],dp[a][b][c][d]+v[a+2*b+3*(c+1)+4*d+1]); dp[a][b][c][d+1]=max(dp[a][b][c][d+1],dp[a][b][c][d]+v[a+2*b+3*c+4*(d+1)+1]); &#125; printf("%d\n",dp[num[1]][num[2]][num[3]][num[4]]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 数据挖掘之k-means算法实现聚类（Ps：万圣节快乐呀🎃）]]></title>
    <url>%2F5a29f513%2F</url>
    <content type="text"><![CDATA[临危受命0.0现学现卖。。过神经网络之门而不入。。万事开头难啊，就剩半天了写个kmeans先，有空再试试神经网络吧，不过数据挖掘还蛮有意思的，要是以后有这个课我就去选一个 蟹蟹AllenOris大佬大概给我讲的点思路and愚蠢至极的bug(;´༎ຶД༎ຶ`)，「blood」竟然算某种颜色，我以为是「成分」的意思，找了半个晚上的bug最后竟然是枚举漏了。。 题目背景： 每年的十一月一日是西方国家的万圣节，请用数据建立模型对鬼的类型进行分类 数据样式如下： sklearn中的train_test_split()函数就可以直接将矩阵随机划分为训练子集和测试子集，详见sklearn随机划分数据函数，当时划分数据部分未做处理，只完成了用数据建立模型对鬼进行分类 一.kmeans算法：1.基本思路：1)随机选取k个中心点，也就是把数据分成k类 这些点的选择会很大程度上影响到最终的结果，如果没选好对结果影响比较大 有两种处理方法，一种是多次取均值，另一种是改进算法（bisecting K-means） 2)遍历所有数据，将每个数据划分到最近的中心点中 采用欧式距离作为变量之间的聚类函数，每次朝一个变量ci的方向找到最优解，k-means算法的基础是最小误差平方和准则 3)计算每个聚类的平均值，并作为新的中心点 4)重复2-3，直到这k个中心点收敛了或执行了足够多的迭代 2.复杂度：时间复杂度:O(I*n*k*m) 空间复杂度:O(n*m) 其中m为每个元素字段个数，n为数据量，I为迭代次数，一般情况下I,k,m均可认为是常量，所以时间和空间复杂度可以简化为O(n) 二.题目分析：1.数据处理：小鬼怪有5个属性：bone_length,rotting_flesh,hair_length,has_soul,color 基本思路就是根据这五个属性建立向量，然后用kmeans求得收敛的中心点，其中前四个属性都是float型的比较好处理，第五个color给的是str类型的数据，笔者的处理方法是将所有类型写出用if……elif……判断，再强制类型转化的赋值0.1～0.6，这种方法比较草率但是实现起来相当简单 而且考虑到其他的数据范围基本都是0～1之间的浮点数，所以求欧式距离的时候不会产生很大的偏差，在这个数据背景下该思路应该是可行的，但是实际上这种方法并不很准确，因为0.1和0.6都代表颜色，但是他们和0.5的差不同，而理论上来说这是有误的 当然这里对于str类型的处理还有一种高级的方法叫「one-hot编码」，写在这篇里面了，pandas实现one-hot编码（独热编码） ，如果用one-hot编码的话，相当于是把这个题5个坐标扩充成了10个 三.代码：代码和数据一起丢github上了 数据：https://github.com/LeFlacon/Simple-Python-Practice/blob/master/Halloween.csv 代码：https://github.com/LeFlacon/Simple-Python-Practice/blob/master/Halloween.py 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970from numpy import *def loaddata_set(fileName): data=[] f=open(fileName) ff=f.readlines() del ff[0] for line in ff: s=line.strip().split(',') if('clear' in s[5]): s[5]=(float)(0.1) elif ('green' in s[5]): s[5]=(float)(0.2) elif ('black' in s[5]): s[5]=(float)(0.3) elif ('white' in s[5]): s[5]=(float)(0.4) elif ('blue' in s[5]): s[5]=(float)(0.5) elif ('blood' in s[5]): s[5]=(float)(0.6) del s[6] del s[0] ll=list(map(float,s)) data.append(ll) return data#欧几里得距离def distance_e(vecA, vecB): return sqrt(sum(power(vecA-vecB,2)))#取k个随机质心def rand_center(data_set,k): n=shape(data_set)[1] centerr=mat(zeros((k,n)))#每个质心n个坐标值 for j in range(n): minj=min(data_set[:,j]) maxj=max(data_set[:,j]) cha=float(maxj-minj) centerr[:,j]=minj+cha*random.rand(k,1) return centerr#kmeans算法def kmeans(data_set,k,distMeans=distance_e,createCent=rand_center): m=shape(data_set)[0] ans_classify=mat(zeros((m,2))) #第一列存所属的质心，第二列存到质心的距离 centerr=createCent(data_set,k) flag=True#是否已收敛 while flag: flag=False; for i in range(m):#把每一个数据点划分到离它最近的质心 minn=inf; cur=-1; for j in range(k): juli=distMeans(centerr[j,:],data_set[i,:]) if juli&lt;minn: minn=juli;cur=j#如果第i个数据点到第j个中心点更近，则将i归属为j if ans_classify[i,0]!=cur:flag=True; #如果分配发生变化，则需要继续迭代 ans_classify[i,:]=cur,minn**2#将第i个数据点的情况存入字典 print(centerr) for cc in range(k):#重新计算中心点 ptsInClust=data_set[nonzero(ans_classify[:,0].A==cc)[0]]#去第一列等于cent的所有列 centerr[cc,:]=mean(ptsInClust,axis=0)#算出这些数据的中心点 return centerr,ans_classifydata_mat=mat(loaddata_set('Halloween.csv'))getcenter,get_classify=kmeans(data_mat,3)print(getcenter)print(get_classify) 四.运行结果：只截取了部分，图中可以看出，最后已经获得了k个收敛的质心，并且后面的数据第一列输出了小鬼怪的种类，第二列输出了它和质心的欧几里得距离 五.其他：普通方法搭建一个神经网络(BP神经网络模型)啥玩意儿啊咋回事儿啊先放着吧。。mark一下以后耍]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>k-means</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python pandas实现one-hot编码（独热编码）]]></title>
    <url>%2Fd6da51a9%2F</url>
    <content type="text"><![CDATA[对于不同类型的离散特征有两种处理方法： 1）map映射（如果数据之间有大小关系，那么可知直接映射一个值） 2）one-hot编码 one-hot编码使用于离散特征的取值没有什么大小关系的情况，比如color:[black,white,blue] 如果这几项之间并没有大小关系，但是仍需要把他们转化为向量来做聚类分析，这时候可以用pandas对离散型特征进行one-hot编码 如果编码前只有一个特征color，one-hot编码后会得到三个特征color_black,color_white,color_blue，特征值为0或1 测试代码：123456789101112131415161718192021222324import pandas as pdprint("---初始数据集---\n")data=pd.DataFrame([ ['red','class1','yi',0.233333], ['green','class2','er',0.654321], ['blue','class1','san',0.123456]])data.columns=['color','class','id','value']print(data)print("---映射后数据集---\n")mapp1=&#123; 'yi':11, 'er':22, 'san':33&#125;data['id']=data['id'].map(mapp1)mapp2=&#123;label:idx for idx,label in enumerate(set(data['class']))&#125;data['class']=data['class'].map(mapp2)print(data)print("---「one-hot」后数据集---\n")data=pd.get_dummies(data)print(data) 运行效果如图：]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sklearn随机划分数据函数 -- train test split()]]></title>
    <url>%2F8b10921e%2F</url>
    <content type="text"><![CDATA[sklearn之train_test_split()train_test_split函数用于将矩阵随机划分为训练子集和测试子集，并返回划分好的训练集测试集样本和训练集测试集标签 格式： 12X_train,X_test, y_train, y_test=cross_validation.train_test_split(train_data,train_target,test_size=0.3, random_state=0) 参数解释： train_data：被划分的样本特征集 train_target：被划分的样本标签 test_size：如果是浮点数，在0-1之间，表示样本占比；如果是整数的话就是样本的数量 random_state：是随机数的种子 测试代码：123456789101112131415161718import numpy as npfrom sklearn.model_selection import train_test_splitX,Y=np.arange(24).reshape((8,3)),range(8)print(X)print(list(Y))X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.25,random_state=0)print(X_train)print(X_test)print(Y_train)print(Y_test) 运行效果如图：]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-abbrlink（hexo链接优化）]]></title>
    <url>%2Fa2c7bf23%2F</url>
    <content type="text"><![CDATA[之前的permalink是这样的permalink: :year/:month/:day/:title/ 然后在网上看见说这种命名方式太多层了，爬虫不好爬，而且中文命名方式如果要引用自己的链接的话就很麻烦，（因为会重新编码成好长一串），并且中文链接在百度Google权重很低 然后在网上找到了一个大神写的插件hexo-abbrlink，酷，很酷，特别酷 hexo-abbrlink实现思路：对标题+时间进行md5然后再转base64，保存在front-matter中。 使用方法：安装这个插件 1npm install hexo-abbrlink --save 在站点配置文件_config.yml中修改permalink为如下： 该插件的github地址 -&gt; rozbo/hexo-abbrlink]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[poj 2417 Discrete Logging（bsgs算法，baby-step giant-step）]]></title>
    <url>%2F163226ed%2F</url>
    <content type="text"><![CDATA[Time Limit: 5000MS Memory Limit: 65536K Given a prime P, 2 &lt;= P &lt; 231, an integer B, 2 &lt;= B &lt; P, and an integer N, 1 &lt;= N &lt; P, compute the discrete logarithm of N, base B, modulo P. That is, find an integer L such that B^L == N (mod P) InputRead several lines of input, each containing P,B,N separated by a space. OutputFor each line print the logarithm on a separate line. If there are several, print the smallest; if there is none, print “no solution”. Sample Input12345678910111213145 2 15 2 25 2 35 2 45 3 15 3 25 3 35 3 45 4 15 4 25 4 35 4 412345701 2 11111111111111121 65537 1111111111 Sample Output1234567891011121314013203120no solutionno solution19584351462803587 HintThe solution to this problem requires a well known result in number theory that is probably expected of you for Putnam but not ACM competitions. It is Fermat’s theorem that states B(P-1) == 1 (mod P) for any prime P and some other (fairly rare) numbers known as base-B pseudoprimes. A rarer subset of the base-B pseudoprimes, known as Carmichael numbers, are pseudoprimes for every base between 2 and P-1. A corollary to Fermat’s theorem is that for any m B(-m) == B(P-1-m) (mod P) . SourceWaterloo Local 2002.01.26 题意：给定b,n,p,求最小的非负整数l,满足b^l ≡ n(mod p) 题解：学个新东西，bsgs算法（baby step giant step大步小步算法）其实我觉得它的别名北上广深算法拔山盖世算法更好听一点╮(￣▽￣””)╭ 不晓得这个算法是怎么被想出来的，大致做法如下： 令l=i*m-j，m=ceil(√p)，ceil()是向上取整 代入原式得 12b^(i*m-j) ≡ n(mod p)b^(i*m) ≡ n*b^j(mod p) 枚举j[0,m]，将n*b^j(mod p)存入hash表，枚举i[1,m]，在hash表中寻找第一个满足b^(i*m) ≡ n*b^j(mod p)的，l=i*m-j即为答案 看完这个做法还是懵逼的，所以接下来来证明为什么m=ceil(sqrt(p))范围内就可以找到 有l=i*m-j=i*ceil(√p)-j&lt;p，所以实际上是要证明l&lt;=p的范围内就能找到合法的l 再把这个问题转化为用费马小定理证明这个式子：b^(k mod (p-1)) ≡ b^k(mod p) 证明： k mod (p-1)等价于k-m(p-1)，则有b^(k-m(p-1)) ≡ b^k(mod p)，化简得b^(m(p-1)) ≡ 1(mod p) 由费马小定理，已知：当p为质数且(a,p)=1时，a^(p-1) ≡ 1(mod p) 所以当(b,p)!=1有b^(m(p-1)) ≡ b^(p-1)(mod p)，即证b^(k mod (p-1)) ≡ b^k(mod p) m=ceil(sqrt(p))可行 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;map&gt;using namespace std;#define LL long longLL p,b,l,n,m,ans;map&lt;LL,int&gt;mp;LL qpow(LL a,LL b)&#123; LL anss=1; while(b)&#123; if(b&amp;1)&#123; anss=(anss*a)%p; b--; &#125; b/=2; a=a*a%p; &#125; return anss;&#125;int main()&#123; while(scanf("%lld%lld%lld",&amp;p,&amp;b,&amp;n)!=EOF)&#123; if(b%p==0)&#123; puts("no solution"); continue; &#125; mp.clear(); ans=-1; m=ceil(sqrt(p)); LL tmp=n%p; mp[tmp]=0; for(int i=1;i&lt;=m;i++)&#123; tmp=(tmp*b)%p; mp[tmp]=i; &#125; tmp=1; LL num=qpow(b,m); for(int i=1;i&lt;=m;i++)&#123; tmp=(tmp*num)%p; if(mp[tmp])&#123; ans=i*m-mp[tmp]; ans=(ans%p+p)%p; printf("%lld\n",ans); break; &#125; &#125; if(ans==-1)puts("no solution");; &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>bsgs算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汉诺塔题集（递归 hdu 1995 1996 2064 2077 2175）]]></title>
    <url>%2F655cb7bd%2F</url>
    <content type="text"><![CDATA[汉诺塔基本原理：1）将A上n-1个盘子借助C移到B上；2）把A上剩下的一个盘移到C上；3）将n-1个盘从B借助于A移到C上。 123456789void hanoi(int n,char x,char y,char z)&#123; if(n==1)cout&lt;&lt;x&lt;&lt;"--&gt;"&lt;&lt;z&lt;&lt;endl; else&#123; hanoi(n-1,x,z,y);//前n-1个盘子从x移动到y上 cout&lt;&lt;x&lt;&lt;“—&gt;”&lt;&lt;z&lt;&lt;endl;//将最底下的最后一个盘子从x移动到z上 hanoi(n-1,y,x,z);//将y上的n-1个盘子移动到z上 &#125; return;&#125; 题目：1.hdu 1995 汉诺塔V题意：盘子的数目n，盘号k，求汉诺塔之后，k号盘需要的最少的移动次数 题解：因为比k小的盘子移动不会牵扯k移动，所以这个问题等价于n-k+1阶汉诺塔中一号盘子的移动次数，然后回到开头的汉诺塔移动原理，由于步骤2）中一号盘子不移动，所以得到递推式f[n]=2*f[n-1] 其实就是个等比数列，最后答案是：2^(n-k) 代码：123456789101112131415#include&lt;bits/stdc++.h&gt;using namespace std;#define LL long longint main()&#123; int t; scanf("%d",&amp;t); while(t--)&#123; LL a,b; scanf("%lld%lld",&amp;a,&amp;b); a-=b; printf("%lld\n",(LL)pow(2,a)); &#125; return 0;&#125; 2.hdu 1996 汉诺塔VI题意： 题解：所有可能的序列，其实就是每个盘子可能摆在任意一个柱子上，然后每个柱子都上小下大，即3^n 代码：1234567891011121314#include&lt;bits/stdc++.h&gt;using namespace std;#define LL long longint main()&#123; int t; scanf("%d",&amp;t); while(t--)&#123; LL a; scanf("%lld",&amp;a); printf("%lld\n",(LL)pow(3,a)); &#125; return 0;&#125; 3.hdu 2064 汉诺塔III题意：改变游戏的玩法，不允许直接从最左(右)边移到最右(左)边(每次移动一定是移到中间杆或从中间移出) 题解：设将n层塔从A经B挪到C需要f[n]步 在新规则下的具体步骤是： 将上面n-1层从A经B挪到C需要f[n-1]步，再将第n层从A挪到B，需要一步，再将上n-1层从C经B挪到A，需要f[n-1]步，再将第n层从B挪到C，需要一步，再将上n-1层从A经B挪到C，需要f[n-1]步 即f[n]=3*f[n-1]+2 初始化f[1]=2 这个题。。好像pow用不了？？得自己写一个。。太久远的代码了。。记不清了 代码：123456789101112131415161718#include&lt;bits/stdc++.h&gt;using namespace std;#define LL long longLL pow(int a,int b)&#123; LL ans=1; for(int i=0;i&lt;b;i++)&#123; ans*=a; &#125; return ans;&#125;int main()&#123; int n; while(~scanf("%d",&amp;n))&#123; printf("%I64d\n",pow(3,n)-1); &#125; return 0;&#125; 4.hdu 2077 汉诺塔IV题意：改变游戏的玩法，不允许直接从最左(右)边移到最右(左)边(每次移动一定是移到中间杆或从中间移出)，可以将最大的一个放在上面！ 题解：由hdu2064汉诺塔III已知递推式f[n]=3*f[n-1]+2，那么将n-1个盘子像汉诺塔III的规则一样先移动到B，因为最大盘子可以放上面，所以把最大盘子移到B，再到C，再将B上的移到C，所以和hdu2064相比只是递推式的最后一步变了，只需要在f[n-1]的基础上再加2即可，a[n]=f[n-1]+2 至于代码为什么长那个样子，好像是因为我当时是直接看样例猜的就水过去了吧╮(￣▽￣””)╭ 代码：12345678910111213#include&lt;bits/stdc++.h&gt;using namespace std;#define LL long longint main()&#123; int t,n; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); printf("%I64d\n",(LL)pow(3,n-1)+1); &#125; return 0;&#125; 5.hdu 2175 汉诺塔IX题意： 题解：对于第一个盘子从第一次2^0开始,后面每次要等一个盘子移动完它就移动,也就是说1号盘子隔一个移动一次,即1,3,5,7…是它移动的顺序 对于第二个盘子从第二次2^1开始，需要等比它号码高的一个盘子移动后还要等比它号码低的盘子全部移动后才能移动,即2号要等1号移动完,需要等2^1+2^1=2^2次，即2号盘子每次移动的序号是2,6,10,14.. 对于第3个盘子从2^2开始,同样需要等比它号码高的一个盘子移动后还要等比它号码低的盘子全部移动完后才能移动,即3号要等1,2号移动完才行，需要等2^1+2^2+2^1=2^3次即3号盘子每次移动的序号是4,12,20… 规律已经出现 代码：12345678910111213141516#include&lt;bits/stdc++.h&gt;using namespace std;#define LL long longint main()&#123; int m,n; while(scanf("%d%d",&amp;n,&amp;m)&amp;&amp;(m+n))&#123; int i; for(i=1;i&lt;=n;i++)&#123; if(m%2)break; m/=2; &#125; printf("%d\n",i); &#125; return 0;&#125;]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>汉诺塔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一点点ACM递推递归题集]]></title>
    <url>%2F68a46f0b%2F</url>
    <content type="text"><![CDATA[汉诺塔题集（递归 hdu 1995 1996 2064 2077 2175） hdu 2041 超级楼梯 hdu 2046 骨牌铺方格 hdu 2044 一只小蜜蜂… 51nod 1002 数塔取数问题（dp） hdu 2045 不容易系列之(3)—— LELE的RPG难题 hdu 2047 阿牛的EOF牛肉串 hdu 2048 神、上帝以及老天爷（全错排，递推） hdu 2049 不容易系列之(4)——考新郎（全错排，递推） hdu 2050 折线分割平面 51nod 2000 四边形分割平面（n个m边形分割平面公式推导） hdu 5047 Sawtooth（java大数，分割平面问题） poj 2229 Sumsets（递推，完全背包） 1073 约瑟夫环（递推） Catalan Square – NCPC 2014 （卡特兰数） Best Solver – ICPC 2015 Shenyang（广义斐波那契） ural 1309 Dispute]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hdu 2041 超级楼梯（递推）]]></title>
    <url>%2Fc0d275b3%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem Description有一楼梯共M级，刚开始时你在第一级，若每次只能跨上一级或二级，要走上第M级，共有多少种走法？ Input输入数据首先包含一个整数N，表示测试实例的个数，然后是N行数据，每行包含一个整数M（1&lt;=M&lt;=40）,表示楼梯的级数。 Output对于每个测试实例，请输出不同走法的数量 Sample Input123223 Sample Output1212 题解：要走到第n级台阶，要么是n-1级再走一级上来的，要么是n-2级直接走两级上来的 递推式为f[i]=f[i-1]+f[i-2] 代码：12345678910111213141516171819#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int f[50];int main()&#123; int t,n; scanf("%d",&amp;t); f[1]=1;f[2]=1; for(int i=3;i&lt;=40;i++)f[i]=f[i-1]+f[i-2]; while(t--)&#123; scanf("%d",&amp;n); printf("%d\n",f[n]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 2050 折线分割平面（分割平面问题）]]></title>
    <url>%2Ff699b617%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem Description我们看到过很多直线分割平面的题目，今天的这个题目稍微有些变化，我们要求的是n条折线分割平面的最大数目。比如，一条折线可以将平面分成两部分，两条折线最多可以将平面分成7部分，具体如下所示。 Input输入数据的第一行是一个整数C,表示测试实例的个数，然后是C 行数据，每行包含一个整数n(0&lt;n&lt;=10000),表示折线的数量。 Output对于每个测试实例，请输出平面的最大分割数，每个实例的输出占一行。 Sample Input123212 Sample Output1227 题解：也就是求n个“V”型可以把平面分成多少区域 ans=2*n*n-n+1 首先n条直线可以把平面分成n*(n+1)/2+1个区域，那么对于2*n条直线来说，可以分成n*(2*n+1)+1个域，一个“V”延长出去后，最多会多2块，也就是说因为“V”型的特殊性，每次会少2*n个块，所以答案为2*n*n-n+1 代码：12345678910111213141516#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int n,t; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); printf("%d\n",2*n*n-n+1); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
        <tag>分割平面</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 2049 不容易系列之(4)——考新郎（全错排，递推）]]></title>
    <url>%2F1d6b220a%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem Description国庆期间,省城HZ刚刚举行了一场盛大的集体婚礼,为了使婚礼进行的丰富一些,司仪临时想出了有一个有意思的节目,叫做”考新郎”,具体的操作是这样的: 首先,给每位新娘打扮得几乎一模一样,并盖上大大的红盖头随机坐成一排;然后,让各位新郎寻找自己的新娘.每人只准找一个,并且不允许多人找一个.最后,揭开盖头,如果找错了对象就要当众跪搓衣板… 看来做新郎也不是容易的事情… 假设一共有N对新婚夫妇,其中有M个新郎找错了新娘,求发生这种情况一共有多少种可能. Input输入数据的第一行是一个整数C,表示测试实例的个数，然后是C行数据，每行包含两个整数N和M(1&lt;M&lt;=N&lt;=20)。 Output对于每个测试实例，请输出一共有多少种发生这种情况的可能，每个实例的输出占一行。 Sample Input12322 23 2 Sample Output1213 题解：n个数字，求全排列中m个错排的数量 首先需要知道全错排的求法 -&gt;hdu 2048 神、上帝以及老天爷（全错排，递推） 全错排的递推式是f[n]=(n-1)*(f[n-1]+f[n-2]) 那么n个人中有m-n个人选对了，剩下的m个全错排，所以只要在n个人中选出m个错误的人然后全错排即可，答案为C(n,m)*f[m] 代码：123456789101112131415161718192021222324252627282930#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long long LL f[25];LL C(LL n,LL m)&#123; if(m&gt;n)return 0; LL ans=1; for(int i=1;i&lt;=m;i++)&#123; LL a=n+i-m; ans=ans*a/i; &#125; return ans;&#125;int main()&#123; int n,m,t; scanf("%d",&amp;t); f[1]=0;f[2]=1; for(int i=3;i&lt;=20;i++)f[i]=(i-1)*(f[i-1]+f[i-2]); while(t--)&#123; scanf("%d%d",&amp;m,&amp;n); if(m&gt;n)swap(m,n); printf("%lld\n",C(n,m)*f[m]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 2048 神、上帝以及老天爷（全错排，递推）]]></title>
    <url>%2F7e7621ef%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem DescriptionHDU 2006’10 ACM contest的颁奖晚会隆重开始了！为了活跃气氛，组织者举行了一个别开生面、奖品丰厚的抽奖活动，这个活动的具体要求是这样的： 首先，所有参加晚会的人员都将一张写有自己名字的字条放入抽奖箱中；然后，待所有字条加入完毕，每人从箱中取一个字条；最后，如果取得的字条上写的就是自己的名字，那么“恭喜你，中奖了！” 大家可以想象一下当时的气氛之热烈，毕竟中奖者的奖品是大家梦寐以求的Twins签名照呀！不过，正如所有试图设计的喜剧往往以悲剧结尾，这次抽奖活动最后竟然没有一个人中奖！ 我的神、上帝以及老天爷呀，怎么会这样呢？ 不过，先不要激动，现在问题来了，你能计算一下发生这种情况的概率吗？ 不会算？难道你也想以悲剧结尾？！ Input输入数据的第一行是一个整数C,表示测试实例的个数，然后是C 行数据，每行包含一个整数n(1&lt;n&lt;=20),表示参加抽奖的人数。 Output对于每个测试实例，请输出发生这种情况的百分比，每个实例的输出占一行, 结果保留两位小数(四舍五入)，具体格式请参照sample output。 Sample Input1212 Sample Output150.00% 题解：每个人不拿到自己的名字，也就是经典全错排问题 递推的思路，f[i]记为i个人全错排的方法数 如果前n-1个人拿前i-1个名字都没拿到自己名字，那么第n个人必定拿到自己名字，如果要让第n个人拿不到自己的名字，只需要把名字n和前面任意一个人的名字互换即可，总共有n-1种互换方法，即(n-1)*f[n-1] 如果前n-1个人恰好有1个人拿到了自己的名字，也就是说有n-2个人拿对应的n-2个名字没有自己名字，那么只要把这个人的名字和第n个人互换，就能满足所有人都拿不到自己名字的情况，即C(n-1,1)*f[n-2] 其余情况都是重复的了 所以得到递推式f[n]=(n-1)*(f[n-1]+f[n-2]) 总排列数为全排列A(n,n)，最后答案为f[n]/A(n,n) 代码：123456789101112131415161718192021222324#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long long LL f[25],a[25];int main()&#123; int n,t; scanf("%d",&amp;t); f[1]=0;f[2]=1; a[1]=1; for(int i=2;i&lt;=20;i++)a[i]=a[i-1]*i; for(int i=3;i&lt;=20;i++)f[i]=(i-1)*(f[i-1]+f[i-2]); while(t--)&#123; scanf("%d",&amp;n); double ans=(double)f[n]/a[n]*100; printf("%.2lf",ans); cout&lt;&lt;"%"&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 2047 阿牛的EOF牛肉串（递推）]]></title>
    <url>%2F65c1781f%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem Description今年的ACM暑期集训队一共有18人，分为6支队伍。其中有一个叫做EOF的队伍，由04级的阿牛、XC以及05级的COY组成。在共同的集训生活中，大家建立了深厚的友谊，阿牛准备做点什么来纪念这段激情燃烧的岁月，想了一想，阿牛从家里拿来了一块上等的牛肉干，准备在上面刻下一个长度为n的只由”E” “O” “F”三种字符组成的字符串（可以只有其中一种或两种字符，但绝对不能有其他字符）,阿牛同时禁止在串中出现O相邻的情况，他认为，”OO”看起来就像发怒的眼睛，效果不好。 你，NEW ACMer,EOF的崇拜者，能帮阿牛算一下一共有多少种满足要求的不同的字符串吗？ PS: 阿牛还有一个小秘密，就是准备把这个刻有 EOF的牛肉干，作为神秘礼物献给杭电五十周年校庆，可以想象，当校长接过这块牛肉干的时候该有多高兴！这里，请允许我代表杭电的ACMer向阿牛表示感谢！ 再次感谢！ Input输入数据包含多个测试实例,每个测试实例占一行,由一个整数n组成，(0&lt;n&lt;40)。 Output对于每个测试实例，请输出全部的满足要求的涂法，每个实例的输出占一行。 Sample Input1212 Sample Output1238 题解：用递推的思路求解 考虑第n个字符 如果第n个字符填O，那么n-1个字符的位置只能是E/F，如果n-1的位置是E/F，那么对于一个合法的n-2来说任何情况都可以，不会再出现OO的情况，方法数为f[n-2]*2 如果第n个字符填E/F，那么对于一个合法的n-1来说任何情况都可以，方法数为f[n-1]*2 所以递推式为：f[n]=2*(f[n-1]+f[n-2]) 代码：123456789101112131415161718#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long long LL f[50];int main()&#123; int n; f[1]=3;f[2]=8; for(int i=3;i&lt;=55;i++)f[i]=2*(f[i-1]+f[i-2]); while(scanf("%d",&amp;n)!=EOF)&#123; printf("%lld\n",f[n]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>推公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 2046 骨牌铺方格（斐波那契）]]></title>
    <url>%2Ff47c306c%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem Description在2×n的一个长方形方格中,用一个1× 2的骨牌铺满方格,输入n ,输出铺放方案的总数.例如n=3时,为2× 3方格，骨牌的铺放方案有三种,如下图： Input输入数据由多行组成，每行包含一个整数n,表示该测试实例的长方形方格的规格是2×n (0&lt;n&lt;=50)。 Output对于每个测试实例，请输出铺放方案的总数，每个实例的输出占一行。 Sample Input123132 Sample Output123132 题解：51nod 1031 骨牌覆盖（斐波那契） 代码：123456789101112131415161718#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long long LL f[55];int main()&#123; int n; f[1]=1;f[2]=2; for(int i=3;i&lt;=55;i++)f[i]=f[i-1]+f[i-2]; while(scanf("%d",&amp;n)!=EOF)&#123; printf("%lld\n",f[n]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>推公式</tag>
        <tag>斐波那契</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 2045 不容易系列之(3)—— LELE的RPG难题（递推）]]></title>
    <url>%2F60992a21%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem Description人称“AC女之杀手”的超级偶像LELE最近忽然玩起了深沉，这可急坏了众多“Cole”（LELE的粉丝,即”可乐”）,经过多方打探，某资深Cole终于知道了原因，原来，LELE最近研究起了著名的RPG难题: 有排成一行的ｎ个方格，用红(Red)、粉(Pink)、绿(Green)三色涂每个格子，每格涂一色，要求任何相邻的方格不能同色，且首尾两格也不同色．求全部的满足要求的涂法. 以上就是著名的RPG难题. 如果你是Cole,我想你一定会想尽办法帮助LELE解决这个问题的;如果不是,看在众多漂亮的痛不欲生的Cole女的面子上,你也不会袖手旁观吧? Input输入数据包含多个测试实例,每个测试实例占一行,由一个整数N组成，(0&lt;n&lt;=50)。 Output对于每个测试实例，请输出全部的满足要求的涂法，每个实例的输出占一行。 Sample Input1212 Sample Output1236 题解：考虑第n个格子 如果前n-1个格子直接照搬n-1时的合法涂法，也就是前n-1个格子的1和n-1不同色且相邻不同色，那么对于第n个格子来说，不能涂1也不能涂n-1的颜色，所以只剩一种颜色可以涂 如果前n-2个格子直接照搬n-2时的合法涂法，第n-1个格子涂和1一样的颜色，那么对于第n个格子来说还剩两种颜色可以涂 所以递推式就是dp[n]=dp[n-1]+2*dp[n-2] 有个小小的坑点是n=3的时候答案为6，123，132，213，231，312，321，即dp[1]=3,dp[2]=3*2=6,dp[3]=6 代码：123456789101112131415161718#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longLL dp[55];int main()&#123; int n; dp[1]=3;dp[2]=6;dp[3]=6; for(int i=4;i&lt;=50;i++)dp[i]=dp[i-1]+2*dp[i-2]; while(scanf("%d",&amp;n)!=EOF)&#123; printf("%lld\n",dp[n]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 2044 一只小蜜蜂...（递推）]]></title>
    <url>%2F894818a5%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem Description有一只经过训练的蜜蜂只能爬向右侧相邻的蜂房，不能反向爬行。请编程计算蜜蜂从蜂房a爬到蜂房b的可能路线数。其中，蜂房的结构如下所示。 Input输入数据的第一行是一个整数N,表示测试实例的个数，然后是N 行数据，每行包含两个整数a和b(0&lt;a&lt;b&lt;50)。 Output对于每个测试实例，请输出蜜蜂从蜂房a爬到蜂房b的可能路线数，每个实例的输出占一行。 Sample Input12321 23 6 Sample Output1213 题解：水水的递推，对于一个数n来说，能到达它的数就是n-1和n-2，所以dp[n]=dp[n-1]+dp[n-2]，斐波那契，a-&gt;b的实际方法数等同于1-&gt;b-a+1 要开LL 代码：123456789101112131415161718192021#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longLL dp[55];int main()&#123; int t,a,b; scanf("%d",&amp;t); dp[1]=1;dp[2]=1; for(int i=3;i&lt;50;i++)dp[i]=dp[i-1]+dp[i-2]; while(t--)&#123; scanf("%d%d",&amp;a,&amp;b); if(a&gt;=b)puts("0"); else printf("%lld\n",dp[b-a+1]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>斐波那契</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[poj 2229 Sumsets（递推，完全背包）]]></title>
    <url>%2F83978c3d%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000MS Memory Limit: 200000K Farmer John commanded his cows to search for different sets of numbers that sum to a given number. The cows use only numbers that are an integer power of 2. Here are the possible sets of numbers that sum to 7: 1234561) 1+1+1+1+1+1+1 2) 1+1+1+1+1+2 3) 1+1+1+2+2 4) 1+1+1+4 5) 1+2+2+2 6) 1+2+4 Help FJ count all possible representations for a given integer N (1 &lt;= N &lt;= 1,000,000).Input A single line with a single integer, N.Output The number of ways to represent N as the indicated sum. Due to the potential huge size of this number, print only last 9 digits (in base 10 representation). Sample Input17 Sample Output16 SourceUSACO 2005 January Silver 题意：给一个n，把它分成2的幂次的和，求方法数 题解：方法1）递推：（63ms）记数i的方法数为dp[i] 对于一个n 如果他是奇数，那只能在偶数的基础上加个1，所以答案就是dp[n-1] 如果n是偶数，那么分成两种情况，一种是有1，那么在原来奇数的基础上加1就能变成n，还有一种是没有1，只用除了1以外的2的幂次，这个方法数等于dp[n/2] 为什么是dp[n/2]呢？因为对于任意一个偶数n来说，把(n/2)&lt;&lt;1即可得到n，也就是说，对于（n/2）的任意情况来说，只要把组合中的每个数*2，就可以得到组成n且没有1的情况 随便举个例子1，2，4可以组成7，那么2，4，8就可以组成14 所以偶数的状态转移就是dp[i]=(dp[i-1]+dp[i&gt;&gt;1])%p 从1开始递推即得答案 方法2）完全背包（1000ms）如果一下子想不出递推式的话，就把这个题当成一个完全背包水题做，物品就是1，2，4，……数量不限 先预处理出2的幂次，然后dp[j]=(dp[j]+dp[j-pow2[i]])%p; 代码：123456789101112131415161718192021#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=1e6+5;const int p=1e9;int dp[N];int main()&#123; int n; scanf("%d",&amp;n); dp[0]=1; for(int i=1;i&lt;=n;i++)&#123; if(i&amp;1)dp[i]=dp[i-1]; else dp[i]=(dp[i-1]+dp[i&gt;&gt;1])%p; &#125; printf("%d\n",dp[n]); return 0;&#125; 12345678910111213141516171819202122#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=1e6+5;const int p=1e9;int pow2[N],dp[N];int main()&#123; int n; scanf("%d",&amp;n); pow2[0]=1; dp[0]=1; for(int i=1;i&lt;20;i++)pow2[i]=pow2[i-1]&lt;&lt;1; for(int i=0;i&lt;20;i++) for(int j=pow2[i];j&lt;=n;j++) dp[j]=(dp[j]+dp[j-pow2[i]])%p; printf("%d\n",dp[n]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[I.Riddle（状压dp）-- 2018 CCPC 秦皇岛]]></title>
    <url>%2Fe73bae86%2F</url>
    <content type="text"><![CDATA[补题ing ∠( ᐛ 」∠)＿ 题意：给一个n个数的数组，数组中的数字可能代表物品，也可能代表背包，a[i]的具体数值代表一个物品或背包的大小，如果a[i]代表背包的话，必须有对应的物品把背包恰好填满才合法，求有多少种合法的可能 题解：思路是网上学的，先把任意背包和物品的复杂组合简化一下，只看一个背包，处理出一个背包和装入它的物品的可行性，然后用这些子状态dp，很好的处理手法，具体如下： 状压dp，用二进制表示n位数的状态，dp[i]表示状态i的数组下的方法数 预处理出2^15种组合sum[i]，表示状态i的数值和 然后再求合法的背包大小，比较a[i]和sum[j]，如果sum[j]-a[i]==a[i]，也就是说当前a[i]可以作为背包大小，有某种非自身的组合可以填入这个背包，那么f[j]++，f[i]表示状态为i的能否满足恰好是一个背包和装入该背包的物品的情况（即物品全装入这个背包），如果能，方法数为f[i]，初始化为0 然后枚举2^15个背包打包物品状态i，tmp=(1&lt;&lt;n)-i-1;for(int j=(1&lt;&lt;n)-i-1;;j=(j-1)&amp;tmp)可以依次枚举当前背包状态下合法的剩余状态j 状态转移方程为：dp[i|j]+=dp[j]*f[i]; 样例：123456789101112input331 1 151 1 2 2 3101 2 3 4 5 6 7 8 9 10output715127 代码：123456789101112131415161718192021222324252627282930313233343536#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int dp[1&lt;&lt;15|5],f[1&lt;&lt;15|5],a[16],sum[1&lt;&lt;15|5];int main()&#123; int t,n; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); for(int i=0;i&lt;(1&lt;&lt;n);i++)&#123; dp[i]=1; sum[i]=f[i]=0; &#125; for(int i=1;i&lt;=n;i++)scanf("%d",&amp;a[i]); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;(1&lt;&lt;n);j++) if(j&amp;(1&lt;&lt;(i-1)))sum[j]+=a[i]; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;(1&lt;&lt;n);j++) if(j&amp;(1&lt;&lt;(i-1))) if(sum[j]-a[i]==a[i])f[j]++; for(int i=1;i&lt;(1&lt;&lt;n);i++)&#123; int tmp=(1&lt;&lt;n)-i-1; for(int j=tmp;;j=(j-1)&amp;tmp)&#123; dp[i|j]+=dp[j]*f[i]; if(j==0)break; &#125; &#125; printf("%d\n",dp[(1&lt;&lt;n)-1]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac OS下sublime3配置c++环境（支持输入，支持c++11）]]></title>
    <url>%2Ff292e0b8%2F</url>
    <content type="text"><![CDATA[终于配上了c++11，可以用auto了，快乐～ 但是构建好懵逼啊。。一头雾水。。还是得参考=照搬别人的代码 新建环境【tools-&gt;build system-&gt;new build system】 输入以下内容保存 构建系统——json文件12345678910111213&#123; "cmd": ["bash", "-c", "g++ '$&#123;file&#125;' -std=c++11 -stdlib=libc++ -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;'"], "file_regex": "^(..&#123;FNXX==XXFN&#125;*):([0-9]+):?([0-9]+)?:? (.*)$", "working_dir": "$&#123;file_path&#125;", "selector": "source.c, source.c++", "variants": [ &#123; "name": "Run", "cmd": ["bash", "-c", "g++ '$&#123;file&#125;' -std=c++11 -stdlib=libc++ -o '$&#123;file_path&#125;/$&#123;file_base_name&#125;' &amp;&amp; open -a Terminal.app '$&#123;file_path&#125;/$&#123;file_base_name&#125;'"] &#125; ]&#125; Ctrl+Shift+B即可运行 和之前配置的不能c++11的环境比最大差别应该是改了这个-std=c++11 -stdlib=libc++ -o Build Systems (Batch Processing)下面放一点点解释： 标准选项列表 说明 cmd 要执行的实际命令行 file_regex Perl样式的正则表达式，用于从外部程序的输出中捕获错误信息，比如上面的格式是：文件名，行号，列号和错误消息 selector 匹配selector文件的范围自动找到活动文件的相应构建系统 variants 使用variants，可以在同一.sublime-build文件中指定多个构建系统任务 变量 说明 $file_path 当前文件的目录，例如C：\ Files。 $file 当前文件的完整路径，例如C：\ Files \ Chapter1.txt。 $file_name 当前文件的名称部分，例如Chapter1.txt。 $file_extension 当前文件的扩展部分，例如txt。 $file_base_name 当前文件的仅名称部分，例如Document。 $folder 在当前项目中打开的第一个文件夹的路径。 $project 当前项目文件的完整路径。 $project_path 当前项目文件的目录。 $project_name 当前项目文件的名称部分。 $project_extension 当前项目文件的扩展部分。 $project_base_name 当前项目文件的仅名称部分。 $packages Packages 文件夹的完整路径。 修改环境如果是之前已经配过环境，直接修改然后保存即可 打开xxx.sublime-build的方法如下： 【preferences-&gt;browse packages】 xxx.sublime-build在所打开页面的【user】文件夹下 最后放上官方文档链接 Build Systems (Batch Processing)]]></content>
      <categories>
        <category>瞎折腾(=ﾟωﾟ)ﾉ</category>
      </categories>
      <tags>
        <tag>mac OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java第二次作业（线段类）]]></title>
    <url>%2Fd7ffbd1c%2F</url>
    <content type="text"><![CDATA[线段类编写一个线段类MyLine，主要属性有e1,e2,端点类型为Point，编写构造方法，编写成员方法（是否位于第一象限，长度，两线段是否相交，点到线段距离，其他方法） 实现思路：使用java.awt.Point，然后编写线段类MyLine，两个Point类型的私有变量u,v表示两线段端点 构造函数中直接给两个端点赋值就行 xmult函数算叉积，zero函数判断x是否等于0（因为要控制精度所以不能直接写==0，开头声明一个eps来控制精度范围static double eps=1e-6;） 判断线段是否相交（包括端点和重合），利用三个函数，dots_inline判三点共线，dots_online_in判点是否在线段上，包括端点，same_side判两点是否在线段同侧 求点到线段距离，为了避免出现线段是一个点的情况，先特判线段长度是否为0 遇到问题及解决办法：1.The import java.awt cannot be resolve 【项目右键-&gt;build path-&gt;configure build path-&gt;library-&gt;add library】 2.The operator || is undefined for the argument type(s) int, int 【因为把几个int型函数或起来了，在Java内部只能出现boolean类型的运算使用运算符||，Integer之间使用运算符||时，会报此错误，解决办法，转化为boolean类型进行运算，加个大于0啥的】 3.Syntax error on token &quot;module&quot;, interface expected 【直接删掉。。我是谁我在哪我在干嘛。。】 4.No enclosing instance of type Main is accessible. 【我写的类以public class开头，是动态的，而主程序public static class main是静态，在Java中，类中的静态方法不能直接调用动态方法，只有将某个内部类修饰为静态类，然后才能够在静态类中调用该类的成员变量与成员方法，直接将public class改为public static class】 运行效果： 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990package test; import java.io.*; import java.math.*;import java.util.*;import java.awt.Point; public class Main &#123; static double eps=1e-8; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); Point p1=new Point(),p2=new Point(),p3=new Point(),p4=new Point(); p1.x=cin.nextInt();p1.y=cin.nextInt(); p2.x=cin.nextInt();p2.y=cin.nextInt(); p3.x=cin.nextInt();p3.y=cin.nextInt(); p4.x=cin.nextInt();p4.y=cin.nextInt(); MyLine l1=new MyLine(p1,p2); MyLine l2=new MyLine(p3,p4); System.out.println("1.l1线段是否在第一象限: "); l1.check(); System.out.println("2.l2的长度: "); System.out.println(l2.length()); System.out.println("3.l1和l2是否相交: "); if(l1.xiangjiao(l2)==1)System.out.println("相交"); else System.out.println("不相交"); System.out.println("4.p1到l2的距离: "); System.out.println(l2.juli(p1)); cin.close(); &#125; public static class MyLine&#123; private Point u,v; MyLine(Point a,Point b)&#123; u=a; v=b; &#125; public boolean check() &#123; if(u.x&gt;0&amp;&amp;u.y&gt;0&amp;&amp;v.x&gt;0&amp;&amp;v.y&gt;0) &#123; System.out.println("Yes,线段在第一象限"); return true; &#125; else &#123; System.out.println("No，线段不在第一象限"); return false; &#125; &#125; public double length() &#123; return (float)Math.sqrt((u.x-v.x)*(u.x-v.x)+(u.y-v.y)*(u.y-v.y)); &#125; public double length2(Point p1,Point p2) &#123; return (float)Math.sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y)); &#125; public double xmult(Point p1,Point p2,Point p0) &#123; return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y); &#125; public int zero(double x) &#123; if(x&gt;0) &#123; if(x&lt;eps)return 1; else return 0; &#125; else &#123; if((-x)&lt;eps)return 1; else return 0; &#125; &#125; public boolean dots_inline(Point p1,Point p2,Point p3) &#123; if(zero(xmult(p1,p2,p3))==1)return true; else return false; &#125; public int dots_online_in(Point p,Point l1,Point l2) &#123; if((zero(xmult(p,l1,l2))==1)&amp;&amp;(l1.x-p.x)*(l2.x-p.x)&lt;eps&amp;&amp; (l1.y-p.y)*(l2.y-p.y)&lt;eps)return 1; else return 0; &#125; public boolean same_side(MyLine l2) &#123; return (xmult(l2.u,u,l2.v)*xmult(l2.u,v,l2.v))&gt;eps; &#125; public int xiangjiao(MyLine l2) &#123; if(!dots_inline(u,v,l2.u)||!dots_inline(u,v,l2.v)) if(!this.same_side(l2)&amp;&amp;!l2.same_side(this))return 1; else return 0; if(dots_online_in(u,l2.u,l2.v)&gt;0||dots_online_in(v,l2.u,l2.v)&gt;0|| dots_online_in(l2.u,u,v)&gt;0||dots_online_in(l2.v,u,v)&gt;0)return 1; else return 0; &#125; public double juli(Point p) &#123; if(zero(length2(u,v))!=1)return Math.abs(xmult(p,u,v)/length2(u,v)); else return length2(p,u); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java第一次作业（素数，日历）]]></title>
    <url>%2F66dd1680%2F</url>
    <content type="text"><![CDATA[1）显示2～100中的质数，每行显示5个实现思路：写个判素数函数，是素数就输出，当然也可以用埃筛素数 运行效果： 遇到的问题及解决：printf提示参数类型不对，Type The method print(int) in the type …… 因为默认的兼容版本为1.3，在项目属性的java complier中改成1.5以上就ok了 代码：1234567891011121314151617181920212223242526import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; int num=1; for(int i=2;i&lt;=100;i++) &#123; if(isprime(i)&amp;&amp;num%5!=0) &#123; System.out.printf("%3s",i); num++; &#125; else if(isprime(i)&amp;&amp;num%5==0) &#123; System.out.printf("%3s",i); System.out.println(); num++; &#125; &#125; &#125; public static boolean isprime(int n) &#123; for(int i=2;i*i&lt;=n;i++) &#123; if(n%i==0)return false; &#125; return true; &#125;&#125; 2）编写程序，显示出当月日历实现思路：利用java中的java.util.Calendar，先记录当前年月，然后指向这个月一号，一直输出到当前天月份不为之前记录的月份为止 运行效果： 代码：1234567891011121314151617181920212223242526272829303132import java.io.*; import java.math.*;import java.util.*;import java.text.DateFormatSymbols; public class Main &#123; public static void main(String[] args) &#123; Calendar cal=Calendar.getInstance(); int m=cal.get(Calendar.MONTH); int y=cal.get(Calendar.YEAR); System.out.println(y+"年"+(m+1)+"月");//月份记录的是[0,11] String wk[]=new DateFormatSymbols().getShortWeekdays();//星期名数组[1,7] for(int i=1;i&lt;=7;i++) System.out.print(wk[i]+" "); System.out.println(); cal.set(Calendar.DAY_OF_MONTH,1);//1号 int w=cal.get(Calendar.DAY_OF_WEEK); int cur=1; while(wk[cur]!=wk[w]) &#123; System.out.print(" "); cur++; &#125; do &#123; int d=cal.get(Calendar.DAY_OF_MONTH); System.out.printf("%3s",d); System.out.print(" "); if(wk[cal.get(Calendar.DAY_OF_WEEK)]==wk[7]) System.out.println(); cal.add(Calendar.DAY_OF_MONTH,1);//下一天 &#125;while(cal.get(Calendar.MONTH)==m); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构第二次作业（扩展链表，双向循环链表）]]></title>
    <url>%2F6bcdcc46%2F</url>
    <content type="text"><![CDATA[1.扩展链表题目：编写一个非成员方法meld，它生成一个新的扩展的链表c，它从a的首元素开始，交替的包含a和b的元素。如果一个链表的元素取完了，就把另一个链表的剩余元素附加到新的扩展链表中，方法的复杂度应与链表a和b的长度具有线性关系 实现方法：加个尾节点last，然后添加成员函数append直接在链表尾部添加节点 用两个指针遍历链表AB，这样就可以通过append函数o(n)填充链表C 写的时候遇到的问题及解决办法： 在SauserHi大佬的解释下，豁然开朗，我好菜啊ORZ 因为我写了析构函数，没有另写拷贝构造函数，所以我的返回值被我自己析构了(#ﾟДﾟ)，以下说明来自百度百科 解决方法是把写的析构函数给删了，或者写一个拷贝构造函数，代码中我采用了第一种 运行效果： 代码：别的功能都没试过，随手写的或许充满bug╮(￣▽￣””)╭ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;template &lt;class T&gt;class ChainNode&#123;public: T data; ChainNode&lt;T&gt; *next;&#125;;template&lt;class T&gt;class extendedChain&#123; public: extendedChain()&#123;first=NULL;last=NULL;&#125; bool IsEmpty() const&#123;return first==NULL;&#125; int Length()const; bool Find(int k, T&amp; x)const; int Search(const T&amp; x)const; extendedChain&lt;T&gt;&amp; Delete(int k,T&amp; x); extendedChain&lt;T&gt;&amp; Insert(int k,const T&amp; x); void Output(ostream&amp; out)const; void Erase(); extendedChain&lt;T&gt;&amp; Append(const T&amp; x); public: ChainNode&lt;T&gt; *first,*last;&#125;;template&lt;class T&gt;int extendedChain&lt;T&gt;::Length() const&#123; ChainNode&lt;T&gt; *current=first; int len=0; while(current)&#123; len++; current=current-&gt;next; &#125; return len;&#125; template&lt;class T&gt;bool extendedChain&lt;T&gt;::Find(int k,T&amp; x) const&#123; if(k&lt;1)return false; ChainNode&lt;T&gt; *current=first; int index=1; while(index&lt;k&amp;&amp;current)&#123; current=current-&gt;next; index++; &#125; if(current)&#123; x=current-&gt;data; return true; &#125; return false; &#125;template&lt;class T&gt;int extendedChain&lt;T&gt;::Search(const T&amp; x) const&#123; ChainNode&lt;T&gt; *current=first; int index=1; while(current&amp;&amp;current-&gt;data!=x)&#123; current=current-&gt;next; index++; &#125; if(current)return index; return 0;&#125;template&lt;class T&gt;void extendedChain&lt;T&gt;::Output(ostream&amp; out) const&#123; ChainNode&lt;T&gt; *current; for(current=first;current;current=current-&gt;next) out&lt;&lt;current-&gt;data&lt;&lt;" ";&#125;template &lt;class T&gt;ostream&amp; operator&lt;&lt;(ostream&amp; out, const extendedChain&lt;T&gt;&amp; x)&#123; x.Output(out); return out;&#125;template&lt;class T&gt;extendedChain&lt;T&gt;&amp; extendedChain&lt;T&gt;::Delete(int k,T&amp; x)&#123; if(k&lt;1||!first)cout&lt;&lt;"WORNG"&lt;&lt;endl; ChainNode&lt;T&gt; *p=first; if(k==1)first=first-&gt;next; else&#123; ChainNode&lt;T&gt; *q=first; for(int index=1;index&lt;k-1&amp;&amp;q;index++)q=q-&gt;next; if(!q||!q-&gt;next)cout&lt;&lt;"WORNG"&lt;&lt;endl; p=q-&gt;next; q-&gt;next=p-&gt;next; &#125; x=p-&gt;data; delete p; return *this;&#125;template&lt;class T&gt;extendedChain&lt;T&gt;&amp; extendedChain&lt;T&gt;::Insert(int k,const T&amp; x)&#123; if(k&lt;0)cout&lt;&lt;"WORNG"&lt;&lt;endl; ChainNode&lt;T&gt; *p=first; for(int index=1;index&lt;k&amp;&amp;p;index++)p=p-&gt;next; if(k&gt;0&amp;&amp;!p)cout&lt;&lt;"WORNG"&lt;&lt;endl; ChainNode&lt;T&gt; *y=new ChainNode&lt;T&gt;; y-&gt;data=x; if(k&amp;&amp;p-&gt;next==NULL)&#123;//添加到尾部 y-&gt;next=NULL; p-&gt;next=y; last=y; &#125; else if(k)&#123; y-&gt;next=p-&gt;next; p-&gt;next=y; &#125; else&#123; y-&gt;next=first; first=y; last=y; &#125; return *this;&#125;template&lt;class T&gt;void extendedChain&lt;T&gt;::Erase()&#123; ChainNode&lt;T&gt; *next; while(first)&#123; next=first-&gt;next; delete first; first=next; &#125;&#125;template&lt;class T&gt;extendedChain&lt;T&gt;&amp; extendedChain&lt;T&gt;::Append(const T&amp; x)&#123; ChainNode&lt;T&gt; *y=new ChainNode&lt;T&gt;; y-&gt;data=x; y-&gt;next=NULL; if(first!=NULL)&#123; last-&gt;next=y; last=y; &#125; else first=last=y; return *this;&#125;template&lt;class T&gt;extendedChain&lt;T&gt; meld(extendedChain&lt;T&gt; A,extendedChain&lt;T&gt; B)&#123; extendedChain&lt;T&gt; C; ChainNode&lt;T&gt; *a,*b,*c; a=A.first;b=B.first; while(a!=NULL&amp;&amp;b!=NULL)&#123; C.Append(a-&gt;data); a=a-&gt;next; C.Append(b-&gt;data); b=b-&gt;next; &#125; if(a==NULL)&#123; while(b)&#123; C.Append(b-&gt;data); b=b-&gt;next; &#125; &#125; else if(b==NULL)&#123; while(a)&#123; C.Append(a-&gt;data); a=a-&gt;next; &#125; &#125; return C;&#125;int main()&#123; extendedChain&lt;int&gt; A,B,C; for(int i=1;i&lt;50;i++)A.Append(i); for(int i=1;i&lt;25;i++)B.Append(i); A.Output(cout);B.Output(cout); C=meld(A,B); C.Output(cout); return 0;&#125; 2.双向循环链表题目：使用带有头节点的双向循环链表 1）编写一个非成员方法split(a,b)，它生成两个链表a和b，a包含c中索引为奇数的元素，b包含c中其余的元素，这个方法不能改变c 2）编写方法chain::split，它与1)的函数类似，然而，它用输入链表*this的空间建立了链表a和b 思路：第一种：非成员函数，分配新的内存空间 和作业17题差不多，用append方法，用一个指针c扫一遍链表C，然后交叉的添加到A,B的尾端，因为是双向循环链表，所以append函数中要处理一下RightEnd 【运行效果】 第二种：成员函数，直接用链表c的内存空间 比如1 2 3 4 5 6，本来是1⇄2⇄3⇄4⇄5⇄6这样的结构，如果要利用C的内存空间产生AB那么就是1⇄3⇄5，2⇄4⇄6，所以只需要修改一下指针的指向即可，本来[1]-&gt;right=[2],则修改为[1]-&gt;right=[3]，[3]-&gt;left=[1]，还是用指针c遍历一遍，复杂度是o(n)的，头尾节点要特殊处理一下 【运行效果】 代码：附带了双向循环链表别的成员函数，正确性未知╮(￣▽￣””)╭ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;template &lt;class T&gt;class DoubleNode &#123; public: T data; DoubleNode&lt;T&gt; *left,*right;&#125;;template&lt;class T&gt;class DoubleChain &#123; public: DoubleChain() &#123;LeftEnd=RightEnd=NULL;&#125;; int Length() const; bool Find(int k, T&amp; x) const; int Search(const T&amp; x) const; DoubleChain&lt;T&gt;&amp; Delete(int k,T&amp; x); DoubleChain&lt;T&gt;&amp; Insert(int k,const T&amp; x); void Output(ostream&amp; out) const; DoubleChain&lt;T&gt;&amp; Append(const T&amp; x); void split(DoubleChain&lt;T&gt; &amp;A,DoubleChain&lt;T&gt; &amp;B); public: DoubleNode&lt;T&gt; *LeftEnd,*RightEnd;&#125;; template&lt;class T&gt;int DoubleChain&lt;T&gt;::Length() const&#123; DoubleNode&lt;T&gt; *current=LeftEnd; int len=0; while(current)&#123; len++; current=current-&gt;right; &#125; return len;&#125; template&lt;class T&gt;bool DoubleChain&lt;T&gt;::Find(int k,T&amp; x) const&#123; if(k&lt;1)return false; DoubleNode&lt;T&gt; *current=LeftEnd; int index=1; while(index&lt;k&amp;&amp;current)&#123; current=current-&gt;right; index++; &#125; if(current)&#123; x=current-&gt;data; return true; &#125; return false; &#125;template&lt;class T&gt;int DoubleChain&lt;T&gt;::Search(const T&amp; x) const&#123; DoubleNode&lt;T&gt; *current=LeftEnd; int index=1; while(current&amp;&amp;current-&gt;data!=x)&#123; current=current-&gt;right; index++; &#125; if(current)return index; return 0;&#125;template&lt;class T&gt;void DoubleChain&lt;T&gt;::Output(ostream&amp; out) const&#123; DoubleNode&lt;T&gt; *current; for(current=LeftEnd;current;current=current-&gt;right) out&lt;&lt;current-&gt;data&lt;&lt;" ";&#125;template &lt;class T&gt;ostream&amp; operator&lt;&lt;(ostream&amp; out, const DoubleChain&lt;T&gt;&amp; x)&#123; x.Output(out); return out;&#125;template&lt;class T&gt;DoubleChain&lt;T&gt;&amp; DoubleChain&lt;T&gt;::Delete(int k,T&amp; x)&#123; if(k&lt;1||!LeftEnd)cout&lt;&lt;"WORNG"&lt;&lt;endl; DoubleNode&lt;T&gt; *p=LeftEnd; if(k==1)LeftEnd=LeftEnd-&gt;right; else&#123; DoubleNode&lt;T&gt; *q=LeftEnd; for(int index=1;index&lt;k-1&amp;&amp;q;index++)q=q-&gt;right; if(!q||!q-&gt;right)cout&lt;&lt;"WORNG"&lt;&lt;endl; p-&gt;left-&gt;right=p-&gt;right; p-&gt;right-&gt;left=p-&gt;left; &#125; x=p-&gt;data; delete p; return *this;&#125;template&lt;class T&gt;DoubleChain&lt;T&gt;&amp; DoubleChain&lt;T&gt;::Insert(int k,const T&amp; x)&#123; if(k&lt;0)cout&lt;&lt;"WORNG"&lt;&lt;endl; DoubleNode&lt;T&gt; *p=LeftEnd; for(int index=1;index&lt;k&amp;&amp;p;index++)p=p-&gt;right; if(k&gt;0&amp;&amp;!p)cout&lt;&lt;"WORNG"&lt;&lt;endl; DoubleNode&lt;T&gt; *y=new DoubleNode&lt;T&gt;; y-&gt;data=x; if(k&amp;&amp;p-&gt;next==NULL)&#123;//添加到尾部 y-&gt;right=NULL; y-&gt;left=p; p-&gt;right=y; RightEnd=y; &#125; else if(k)&#123;//中间 y-&gt;left=p-&gt;left; p-&gt;left-&gt;right=y; y-&gt;right=p; p-&gt;left=y; &#125; else&#123;//头部 y-&gt;left=NULL; y-&gt;right=p; p-&gt;left=y; LeftEnd=y; &#125; return *this;&#125;template&lt;class T&gt;DoubleChain&lt;T&gt;&amp; DoubleChain&lt;T&gt;::Append(const T&amp; x)&#123; DoubleNode&lt;T&gt; *y=new DoubleNode&lt;T&gt;; y-&gt;data=x; y-&gt;right=NULL; if(RightEnd)&#123; RightEnd-&gt;right=y; y-&gt;left=RightEnd; RightEnd=y; &#125; else&#123; y-&gt;left=NULL; LeftEnd=RightEnd=y; &#125; return *this;&#125;template&lt;class T&gt;void split(DoubleChain&lt;T&gt; C,DoubleChain&lt;T&gt; &amp;A,DoubleChain&lt;T&gt; &amp;B)&#123; DoubleNode&lt;T&gt; *y=new DoubleNode&lt;T&gt;; y=C.LeftEnd; T tmp; while(y)&#123; tmp=y-&gt;data; A.Append(tmp); y=y-&gt;right; if(y)&#123; tmp=y-&gt;data; B.Append(tmp); y=y-&gt;right; &#125; &#125;&#125;template&lt;class T&gt;void DoubleChain&lt;T&gt;::split(DoubleChain&lt;T&gt; &amp;A,DoubleChain&lt;T&gt; &amp;B)&#123; DoubleNode&lt;T&gt; *a,*b,*c; c=a=A.LeftEnd=this-&gt;LeftEnd; c=c-&gt;right; b=B.LeftEnd=c; B.LeftEnd-&gt;left=NULL; c=c-&gt;right; //cout&lt;&lt;A.LeftEnd-&gt;data&lt;&lt;" "&lt;&lt;B.LeftEnd-&gt;data&lt;&lt;endl; while(c)&#123; a-&gt;right=c; c-&gt;left=a; a=c; c=c-&gt;right; if(c)&#123; b-&gt;right=c; c-&gt;left=b; b=c; c=c-&gt;right; &#125; &#125; a-&gt;right=NULL; A.RightEnd=a; b-&gt;right=NULL; B.RightEnd=b;&#125;int main()&#123; DoubleChain&lt;int&gt; A,B,C; for(int i=1;i&lt;100;i++)C.Append(i); C.split(A,B); //split(C,A,B); A.Output(cout); cout&lt;&lt;endl; B.Output(cout); cout&lt;&lt;endl; //C.Output(cout); return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 1085 SCOI2005 骑士精神（暴搜+剪枝,IDA*）]]></title>
    <url>%2F67dc8b75%2F</url>
    <content type="text"><![CDATA[Time Limit: 10 Sec Memory Limit: 162 MB Description 在一个5×5的棋盘上有12个白色的骑士和12个黑色的骑士， 且有一个空位。在任何时候一个骑士都能按照骑士的走法（它可以走到和它横坐标相差为1，纵坐标相差为2或者横坐标相差为2，纵坐标相差为1的格子）移动到空位上。 给定一个初始的棋盘，怎样才能经过移动变成如下目标棋盘： 为了体现出骑士精神，他们必须以最少的步数完成任务。 Input 第一行有一个正整数T(T&lt;=10)，表示一共有N组数据。接下来有T个5×5的矩阵，0表示白色骑士，1表示黑色骑士，*表示空位。两组数据之间没有空行。 Output 对于每组数据都输出一行。如果能在15步以内（包括15步）到达目标状态，则输出步数，否则输出－1。 Sample Input123456789101121011001*1110111010010000001011110*1011100101000100 Sample Output127-1 题解：写题十分钟。。找错一下午。。深深绝望 IDA* 因为如果当前有num个棋子不在应该的位置上，那么至少需要num次移动，所以估价函数就是当前不同的格子数+当前步数&lt;最大步数，否则就return，本质就是暴搜加剪枝 剪完之后跑的飞快～ 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;stack&gt;using namespace std;int t,a[5][5],x,y,ans;int res[5][5]=&#123;1,1,1,1,1, 0,1,1,1,1, 0,0,2,1,1, 0,0,0,0,1, 0,0,0,0,0&#125;;int dx[8]=&#123;1,1,-1,-1,2,2,-2,-2&#125;,dy[8]=&#123;2,-2,2,-2,1,-1,1,-1&#125;;char str[6];int ok()&#123; int num=0; for(int i=0;i&lt;5;i++) for(int j=0;j&lt;5;j++) num+=(a[i][j]!=res[i][j]); return num;&#125;void dfs(int d,int xx,int yy)&#123; int tmp=ok(); if(tmp==0)&#123; ans=d; return; &#125; if(d+tmp-1&gt;=ans)return; int nx,ny; for(int i=0;i&lt;8;i++)&#123; int nx=xx+dx[i],ny=yy+dy[i]; if(nx&lt;0||nx&gt;4||ny&lt;0||ny&gt;4)continue; swap(a[xx][yy],a[nx][ny]); dfs(d+1,nx,ny); swap(a[xx][yy],a[nx][ny]); &#125;&#125;int main()&#123; scanf("%d",&amp;t); while(t--)&#123; ans=16; for(int i=0;i&lt;5;i++)&#123; scanf("%s",str); for(int j=0;j&lt;5;j++)&#123; if(str[j]=='*')&#123; x=i;y=j; a[i][j]=2; &#125; else a[i][j]=(int)(str[j]-'0'); &#125; &#125; dfs(0,x,y); if(ans==16)printf("-1\n"); else printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>dfs</tag>
        <tag>IDA*</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1835 完全图（dp+组合数打表）]]></title>
    <url>%2F9562e52%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 初始有n个点，任意两个点之间有一条无向边，现在要移除一些无向边（至少一条），问移除后有恰好m个连通块的方案数是多少。 两个方案不同当且仅当存在至少一条无向边在某个方案中被移除，但是在另一个方案中没被移除。 答案可能很大请模一个998,244,353。 Input第一行读入n,m。1&lt;=m&lt;=n&lt;=500 Output第一行输出方案数。 Input示例13 2 Output示例13 题解：dp(i,j)表示i个点的完全图分成j个连通块的方案数 首先考虑先固定某个点，比如编号为x的点，那么假设某个连通块一定包含这个点，那么这个连通块所包含的点数范围是[1,i-(j-1)] 假设这个有点x的连通块共有k个点，k的范围是[1,i-(j-1)]，那么dp(i,j)的方法数就是C(i-1,k-1)*dp(k,1)*dp(i-k,j-1) 也就是在的剩下的i-1个点中选k-1个和x放一个连通块里，选好后连接的方法数为dp(k,1)，然后剩余点的方法数是dp(i-k,j-1) 综上，状态转移方程为： 然后考虑怎么求dp(k,1)，k个点在1个连通块的方法数，是所有连接的总方法数2^[i*(i-1)/2]（某条边连或不连），减去那些不合法的方法数，也就是形成多个连通块 最后wa了一组数据，n=500，m=1，因为题中说“移除一些无向边（至少一条）”，所以m=1的时候要减去完全图的那种情况，特判一下，即m=1时答案是dp(i,1)-1 此外，还从别人代码里学了个妙妙的组合数初始化，因为这题所有组合数差不多都要用到，所以先利用组合数性质c[i][j]=c[i-1][j-1]+c[i-1][j]，就可以o(n^2)递推打表～ 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;stack&gt;using namespace std;#define LL long longconst int p=998244353;const int N=505;LL dp[N][N],c[N][N];int n,m;LL qpow(LL a,LL b)&#123; LL ans=1; a%=p; while(b)&#123; if(b&amp;1)&#123; ans=ans*a%p; b--; &#125; b&gt;&gt;=1; a=a*a%p; &#125; return ans;&#125;void init()&#123; for(int i=0;i&lt;=n;i++)&#123; c[i][0]=c[i][i]=1; for(int j=1;j&lt;i;j++) c[i][j]=(c[i-1][j-1]+c[i-1][j])%p; &#125;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); init(); dp[1][1]=1; for(int i=2;i&lt;=n;i++)&#123; for(int j=2;j&lt;=i;j++)&#123; dp[i][j]=0; for(int k=1;k&lt;=i-j+1;k++) dp[i][j]=(dp[i][j]+(((c[i-1][k-1]*dp[k][1])%p)*dp[i-k][j-1])%p)%p; &#125; dp[i][1]=qpow(2,i*(i-1)/2); for(int j=2;j&lt;=i;j++) dp[i][1]=(dp[i][1]-dp[i][j]+p)%p; &#125; printf("%lld\n",dp[n][m]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>组合数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1102 面积最大的矩形（单调栈）]]></title>
    <url>%2Fdd1d064a%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 20 难度：3级算法题 有一个正整数的数组，化为直方图，求此直方图包含的最大矩形面积。例如 2,1,5,6,2,3，对应的直方图如下： 面积最大的矩形为5,6组成的宽度为2的矩形，面积为10。 Input第1行：1个数N，表示数组的长度(0 &lt;= N &lt;= 50000)第2 - N + 1行：数组元素A[i]。(1 &lt;= A[i] &lt;= 10^9) Output输出最大的矩形面积 Input示例12345676215623 Output示例110 题解：单调栈 直接对样例操作一波吧，先是0入栈，a[0]&gt;a[1]，算一波先，(1-0)*2=2，然后没了，那么先更新一下a[0]=1，因为延伸过去最高是1格，继续a[2]入栈，a[3]入栈，a[4]&lt;a[3]，然后卡在这里继续算一波，s.top()变为a[3]，(4-3)*6=1，s.top()变为a[2]，(4-2)*5=10，然后出栈，更新a[2]=a[4]=2，因为此时a[2]延伸过去可以到2格，然后a[5]入栈，最后算一波(6-5)*2=2，s.top()变为a[2]，(6-2)*2=8 代码：1234567891011121314151617181920212223242526272829303132333435#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;stack&gt;using namespace std;#define LL long longconst int N=50005;LL a[N];stack&lt;int&gt;s;int main()&#123; int n,cur; LL ans=0,tmp; scanf("%d",&amp;n); while(!s.empty())s.pop(); for(int i=0;i&lt;n;i++)scanf("%lld",&amp;a[i]); a[n]=-1; for(int i=0;i&lt;=n;i++)&#123; if(s.empty()||a[i]&gt;a[s.top()])s.push(i); else if(a[i]&lt;a[s.top()])&#123; while(!s.empty()&amp;&amp;a[i]&lt;a[s.top()])&#123; tmp=(i-s.top())*a[s.top()]; ans=max(ans,tmp); cur=s.top(); s.pop(); &#125; a[cur]=a[i]; s.push(cur); &#125; &#125; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Codeforces Round 516 Div. 2（A-E）]]></title>
    <url>%2Faba8e35b%2F</url>
    <content type="text"><![CDATA[1064 A. Make a triangle!http://codeforces.com/contest/1064/problem/A 题意：给三条边长，每次可以给任意一边长度加一，问组成三角形至少要加几次 1234567891011121314151617#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;stack&gt;using namespace std;int main()&#123; int a[3]; scanf("%d%d%d",&amp;a[0],&amp;a[1],&amp;a[2]); sort(a,a+3); if(a[0]+a[1]&gt;a[2])printf("0\n"); else printf("%d\n",a[2]-a[1]-a[0]+1); return 0;&#125; 1064 B. Equations of Mathematical Magic（思维）http://codeforces.com/contest/1064/problem/B 题意：给一个a，求满足条件的非负x的个数（式子中那个符号是异或） 也就是a=(a⊕x)+x，那么式子成立的条件是，a为0的位x也为0，a位1的位x为1或0，所以答案就是2^(a中1的个数) 我也不知道我干嘛写了个快速幂。。小手一抖就写了，这不重要(･-･; 123456789101112131415161718192021222324252627282930313233343536#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;stack&gt;using namespace std;#define LL long longLL qpow(LL a,LL b)&#123; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=(ans*a); b--; &#125; b/=2; a=a*a; &#125; return ans;&#125;int main()&#123; int t,num; LL n,tmp; scanf("%d",&amp;t); while(t--)&#123; scanf("%I64d",&amp;n); tmp=n;num=0; while(tmp)&#123; if(tmp&amp;1)num++; tmp/=2; &#125; printf("%I64d\n",qpow(2,num)); &#125; return 0;&#125; 1064 C. Oh Those Palindromes（字符串）http://codeforces.com/contest/1064/problem/C 题意：给你一个字符串，问它怎么排列能使回文子序列最多 我还在想怎么对称的时候学长秒给思路，tql，字母同样的放一起就行 1234567891011121314151617181920212223#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;stack&gt;using namespace std;int a[26];string s;int main()&#123; int n; scanf("%d",&amp;n); cin&gt;&gt;s; memset(a,0,sizeof(a)); for(int i=0;i&lt;n;i++)a[s[i]-'a']++; for(int i=0;i&lt;26;i++)&#123; for(int j=0;j&lt;a[i];j++) printf("%c",(char)(i+'a')); &#125; printf("\n"); return 0;&#125; 1064 D. Labyrinth（bfs）http://codeforces.com/contest/1064/problem/D 题意：给一个nxm的图，图上有空格和障碍格，给一个起点(r,c)（保证起点不是障碍格），给两个值x，y表示最多只能向左x次向右y次，上下不限，求问能到达多少个格子（起点也算） 一下子就写完了bfs，然后就陷入了无穷无尽的wa13，然后各种改乱交了好几发，我就睡着了╭(°A°’’)╮，嗷都是躺椅的锅。。 因为我bfs的思路有点问题，一个点如果vis了我就直接return掉了，但是可能存在一些情况是，这个点可以在左右次数剩余不同的情况下被vis，那么两个状态实际上都可以继续延伸，需要取更优的那种，所以这里就会出现问题了 看了别人的代码，有一种很巧妙的双端队列的写法，动上下的时候push_front，动左右的时候push_back，这样就可以保证优先性了，妙啊妙啊 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;deque&gt;using namespace std;const int N=2005;int a[N][N],vis[N][N],n,m,l,r,sx,sy,ans;char str[N];struct ss&#123; int x,y,ll,rr; ss(int a,int b,int c,int d)&#123; x=a;y=b;ll=c;rr=d; &#125;&#125;;void bfs()&#123; deque&lt;ss&gt;q; q.push_front(ss(sx,sy,l,r)); vis[sx][sy]=1; while(!q.empty())&#123; ss u=q.front(); q.pop_front(); if(u.x+1&lt;=n&amp;&amp;!vis[u.x+1][u.y]&amp;&amp;a[u.x+1][u.y])&#123; vis[u.x+1][u.y]=1; q.push_front(ss(u.x+1,u.y,u.ll,u.rr)); &#125; if(u.x-1&gt;=1&amp;&amp;!vis[u.x-1][u.y]&amp;&amp;a[u.x-1][u.y])&#123; vis[u.x-1][u.y]=1; q.push_front(ss(u.x-1,u.y,u.ll,u.rr)); &#125; if(u.y+1&lt;=m&amp;&amp;!vis[u.x][u.y+1]&amp;&amp;u.rr&gt;=1&amp;&amp;a[u.x][u.y+1])&#123; vis[u.x][u.y+1]=1; q.push_back(ss(u.x,u.y+1,u.ll,u.rr-1)); &#125; if(u.y-1&gt;=1&amp;&amp;!vis[u.x][u.y-1]&amp;&amp;u.ll&gt;=1&amp;&amp;a[u.x][u.y-1])&#123; vis[u.x][u.y-1]=1; q.push_back(ss(u.x,u.y-1,u.ll-1,u.rr)); &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; cin&gt;&gt;sx&gt;&gt;sy; cin&gt;&gt;l&gt;&gt;r; for(int i=1;i&lt;=n;i++)&#123; scanf("%s",str); for(int j=1;j&lt;=m;j++)&#123; if(str[j-1]=='*')a[i][j]=0; else a[i][j]=1; vis[i][j]=0; &#125; &#125; bfs(); ans=0; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) ans+=vis[i][j]; printf("%d\n",ans); return 0;&#125; 1064 E. Dwarves, Hats and Extrasensory Abilities（二分+思维）http://codeforces.com/contest/1064/problem/E 题意：给出n，然后有n次交互，输出一个坐标，然后系统返回是黑色或白色，表明刚刚输入的坐标是黑子或白子，最后要找到一条直线分开所有黑子和白子 没写过交互题0.0，和一般的题差别就是：输出之后要清空缓存区，fflush(stdout); 这个题大概算是个思维题吧，用一下二分的思想，画个图其实蛮好想的，而且n&lt;=30巨水，大致构造思路如下：（1，2，3，4记录了线m移动的顺序） 初始化l，r，m=(l+r)/2，并标记当前棋子颜色，然后每次同色的就使l=m，更新m的位置继续，如果不同色那么就使r=m，更新m继续，不断往中间挤，这样保证能把不同色棋子分到两边 注意这里要记录最后一次线往左移还是往右移，往右移的话最后那个线就是y=-x+b，过(m+0.5,m+0.5)，往左移的话就过(m-0.5,m-0.5)，初始化flag=1，也就是+0.5那种，因为特例只有一个点，那么不能把线移到负坐标轴去 感觉我这题代码写的蛮优美的嘻嘻∠( ᐛ 」∠)＿ 12345678910111213141516171819202122232425262728293031323334#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;deque&gt;using namespace std;string s;int now,n,m,l=0,r=(1&lt;&lt;29),flag=1;int solve(int x,int y)&#123; cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl; fflush(stdout); cin&gt;&gt;s; return s[0]=='b';&#125;int main()&#123; scanf("%d",&amp;n); n--; now=solve(0,0); while(n--)&#123; m=(l+r)&gt;&gt;1; if(solve(m,m)==now)&#123; l=m;flag=1; &#125; else&#123; r=m;flag=0; &#125; &#125; if(flag)printf("%d %d %d %d\n",m,m+1,m+1,m); else printf("%d %d %d %d\n",m,m-1,m-1,m); fflush(stdout); return 0;&#125; F. Candies for Childrenhttp://codeforces.com/contest/1064/problem/F CF 516 D. Candies for Children（分类讨论）]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>思维</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ural 1309 Dispute（相当奇妙的递推）]]></title>
    <url>%2Ff1aab9cf%2F</url>
    <content type="text"><![CDATA[周末学一个叫化归的东西٩(˃̶͈̀௰˂̶͈́)و，化归思想就是转化和归结，emmmm大概就是学一下这种解题手法，把一个看起来复杂实际也复杂的数列蜜汁操作一下变成我们熟悉的形式 http://acm.timus.ru/problem.aspx?space=1&amp;num=1309 题意：1234f(0) = 0, f(n) = g(n, f(n-1)), g(x,y) = ((y-1)x^5+x^3–x*y+3x+7y) % 9973 求f(n)，n是1e8 题解：先考虑怎么把这个复杂的大问题变成容易解决的小问题 看看这个数列有什么特点 g(x,y)=((y-1)x^5+x^3–x*y+3x+7y)%9973 然后把这个式子整理一下，把x看作常数，那么这个式子就将变成一个关于y的一阶线性递推数列 g(x,y)=((x^5-x+7)y-x^5+x^3+3x)%9973=g(n,f(n-1)) 也就是f(x)=((x^5-x+7)*f(n-1)-x^5+x^3+3x)%9973 令A=(x^5-x+7)，B=(-x^5+x^3+3x)，那么f(n)=An*f(n-1)+Bn，对于An，Bn，周期为p，易求 然后由f(n)=An*f(n-1)+Bn继续往下写出f(n-1)=A(n-1)*f(n-2)+B(n-1)...f(n-p)=A(n-p+1)*f(n-p)+B(n-p+1)，（公式太难打了就不写具体步骤了，纸上算一下答案就有了），代入整理一下最后得：f(n)=An*A(n-1)*...*A(n-p+1)*f(n-p)+An...A2B1+...+AnAn-1Bn-2+AnBn-1（差不多是这样吧。。0.0如有错误请指出），写清爽一点就是f(n)=Pn*f(n-p)+Qn，也就是说f(n)也存在周期p，当然那些一长串的东西变成的Qn,Pn同样也是以p为周期 这样以后问题就解决了，（n/p）和（n%p），先计算f(n%p)，然后继续递推（n/p）次计算f(n)，即转化为两次小递推 写完交了wa在10，输入了0，1，9973，9974这种关键点大概排查了一下，发现是9973有问题，直接输出0了。。改了一点小问题就got an ac啦\(≧▽≦)/ 代码：123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int p=9973;int n,bei;int getA(int x)&#123; int res=1; for(int i=0;i&lt;5;i++)res=(res*x)%p; res=((res-x+7)%p+p)%p; return res;&#125;int getB(int x)&#123; int res,tmp5=1,tmp3=1; for(int i=0;i&lt;5;i++)tmp5=(tmp5*x)%p; for(int i=0;i&lt;3;i++)tmp3=(tmp3*x)%p; res=((tmp3-tmp5+3*x%p)%p+p)%p; return res;&#125;int f(int x)&#123; if(x==0)return 0; return (getA(x)*f(x-1)%p+getB(x))%p;&#125;int main()&#123; scanf("%d",&amp;n); bei=n/p; n%=p; int P=1,Q=0,ans=f(n); for(int i=n+p;i&gt;n;i--)&#123; int tmp=i%p; Q=(Q+P*getB(tmp))%p; P=(P*getA(tmp))%p; &#125; // cout&lt;&lt;P&lt;&lt;" "&lt;&lt;Q&lt;&lt;endl; for(int i=0;i&lt;bei;i++) ans=(P*ans+Q)%p; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Python+有道」实现简易中译英英译中命令行字典]]></title>
    <url>%2Fd0f16a5f%2F</url>
    <content type="text"><![CDATA[整理我堆积如山的桌面的时候发现之前还搞了这么个玩意儿——用Python写的命令行字典，虽然Google浏览器可以直接翻译长篇大论，mac右键也可以直接查词，但是玩玩练练手也无妨啦～ 先放效果图： 英译中：正常查词是可以的，但是搞事情查词我也不晓得会出现什么 中译英：只能一个一个词查，不支持翻译句子，否则就会变成hello cute ∠( ᐛ 」∠)＿ 1.基本思路与可行性分析用有道查词可以发现，地址栏其实是没啥变化的，也就是http://dict.youdao.com/w/要查的单词/#keyfrom=dict2.top，所以我们就可以输入一个单词，自己构造出对应的url，然后就能获取对应的网页了 那么下一个问题是如何获取词义，截了张图（请忽视那些。。乱七八糟的不知道在讲什么的东西(♯｀∧´)） 清清楚楚就这四个，那么关键词就是“详细释义”：（google翻译就不行。。啥都找不着） Python实在是太强了，那么就可以使用正则表达式来查找我们要的词义 2.具体实现1）导入requests模块和re模块Requests官方文档 requests用来获取有道的网页 re.findall()用来查找「详细释义」的地方从而找到具体释义 2）获取网页url=&quot;http://dict.youdao.com/w/&quot;+word+&quot;/#keyfrom=dict2.index&quot; 然后用decode()方法对获取的内容解码： decode()方法 描述 Python decode() 方法以 encoding 指定的编码格式解码字符串。默认编码为字符串编码。 语法 str.decode(encoding=’UTF-8’,errors=’strict’) 参数（第二个可省略） encoding – 要使用的编码，如”UTF-8”。 errors – 设置不同错误的处理方案。默认为 ‘strict’,意为编码错误引起一个UnicodeError。 其他可能得值有 ‘ignore’, ‘replace’, ‘xmlcharrefreplace’, ‘backslashreplace’ 以及通过 codecs.register_error() 注册的任何值。 返回值 该方法返回解码后的字符串。 3）获取词义以及字符串处理re.findall语法如下：（返回形式是一个数组） findall(pattern, string, flags=0) 所以获取词义就在之前get()函数获得的内容中寻找&quot;详细释义.+&lt;p class=\&quot;collapse-content\&quot;&gt;&quot;这样的形式，第一步处理的内容放在l1中，接下来还要对l1进行第二步处理，只取里面的字母数子汉字部分 123l1=re.findall("详细释义.+&lt;p class=\"collapse-content\"&gt;",get(),re.S)l2=re.findall(" \w+",str(l1)) 下面顺便贴一下正则表达式里常用字符的意思，因为我记不住啊ORZ 正则表达式 \w \s \d \b . 匹配除换行符以外的任意字符 \w 匹配字母或数字或下划线或汉字 等价于 ‘[^A-Za-z0-9_]’ \s 匹配任意的空白符 \d 匹配数字 \b 匹配单词的开始或结束 ^ 匹配字符串的开始 $ 匹配字符串的结束 然后用strip()方法对l2数组里的字符串进行简单处理 strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列，该方法只能删除开头或是结尾的字符，不能删除中间部分的字符 4）输出结果好像没啥好说的，把l2中的元素print就行了 3.代码中译英和英译中差不多，直接看代码吧。。 英译中https://github.com/LeFlacon/Simple-Python-Practice/blob/master/dict.py 中译英https://github.com/LeFlacon/Simple-Python-Practice/blob/master/dict2.py 丢到github上了，emmmm其实是为了试一下git，因为之前好像没有什么能传的东西来着]]></content>
      <categories>
        <category>瞎折腾(=ﾟωﾟ)ﾉ</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《奇遇人生》 第3期：印尼攀峰！窦骁登5000米查亚峰，阿雅因高反放弃痛哭]]></title>
    <url>%2Fa0e37ddb%2F</url>
    <content type="text"><![CDATA[看完这期觉得窦骁也太棒了吧TAT，虽然我之前没有听说过这个人 登山可能就这样，就有很多的不确定性，所以我是觉得最可能这种变化，是我们必须要去面对的，在登山过程中，你们要更多的耐心，然后就是永远要期待，更好的事情发生 窦骁：今天不行还有明天，放轻松（阿雅：万一明天不行呢？）后天啊，（那万一后天也不行呢？）明日何其多，真的是 明日复明日，明日何其多 ～ 一个题写不出来没关系，反正明天我也不一定写的出来2333333，但是万一大大大大大后天突然会了呢∠( ᐛ 」∠)＿ 你的预期永远不要说让它，变成一个限定，框住你的一个东西，你是自由的 窦骁：Yosua，给你，这是她的包，陪她一起走，别催她，无论什么时候，只要她感觉不舒服或者状态不好，就把她带下去 这段真的被暖到了，窦骁真的太太太贴心了啊 阿雅：我刚才其实还是很想往上走，可是我就想到我的家人，然后我想到我女儿……所以我就想说，虽然我很想跟大家一起往上走，但是，但是我要为了我爱的人，要保护好自己，可是还是很不甘心 还是很不甘心，不管怎样，最后我总会妥协，因为我没法拿自己的安全开玩笑，我给不了他们10分的保证，所以只能大哭一场然后若无其事的平静的妥协，我不想这样可是除了这样我别无他法 或许是每一个维特在不同的社会环境不同的时代背景下都会有各自的烦恼吧 对于我来说每一次登山，都会是一个，新的一个体验，在你不断不断一次次试探自己的过程中，需要有经验，一步一个脚印，建立了勇气，它跟鲁莽是不一样，它跟玩命是不一样的 J’aime ma vie]]></content>
      <categories>
        <category>love&amp;peace</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[《奇遇人生》 第2期：美国追龙卷风！春夏与阿雅公路捕风，街头听歌落泪]]></title>
    <url>%2Fdf82d1f8%2F</url>
    <content type="text"><![CDATA[（我听说自闭症的孩子交流的方式很不同）确实，你必须像口译员一样（你经常拥抱她吗）经常拥抱，她也经常拥抱我（那很棒） 谢谢，你做的很好，你是摄影师吗？（不是）你可以的，你能成为一名很棒的摄影师（ ..）你当然可以，为什么不会呢（..）拿起相机去拍吧，你可以成为世界闻名的摄影师（..）真的，拿起相机去拍吧（可以，试试看）为什么不呢，你这么年轻，一切皆有可能 虽然调侃自己的时候会说，我都二十岁啦，已经老了啊，但是其实大多数情况下这是言不由衷，真话是：“为什么不呢，我这么年轻，一切皆有可能 ~ ” 人的心思就是很微妙，你一定有一个阶段，就是非常希望自己变得普通，当你过了那个阶段，你走到一个位置上，你意识到你只是一个普通人的时候，又非常希望自己不普通 春夏：我刚跟马丁说我觉得这是一个窗口，然后马丁说他也这么觉得，然后他说他觉得这个窗口就是上帝，然后他觉得上帝是女孩儿，是女性，我也这么觉得 春夏：就是因为你那么接近过那个目标，但你就是碰不到它，我觉得生活中大部分时候还是那种，我快要追到了，然后发现我完全没追到，就每天肯定都是，就是你想要的和你拥有的之间，是有很大差距的 我觉得追龙卷风的一个乐趣就是，可能我们没有追到风，但是在风的背后，我们可以看到这些美丽的景色，所以不要只关注龙卷风，而是要享受整个过程，就像一个盛大的自助餐 我们多么想要一个结果，但是我们追求的目的根本就不纯粹，我们根本没有享受这件事情 这块粉红花岗岩石头，是最坚硬的岩石之一，它不是圆形的，因为河水无法打磨它，它太坚硬了，因为我觉得你很坚强，内在坚强就像花岗岩石一样，把它做礼物是想告诉你，你已经拥有坚强的品质，时刻都要坚强，记住你才是自己生活的主人 J’aime ma vie]]></content>
      <categories>
        <category>love&amp;peace</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[《奇遇人生》 第1期：赞比亚荒野呼唤！阿雅小s探访大象孤儿院，遇残忍盗猎流泪]]></title>
    <url>%2Fb67f2784%2F</url>
    <content type="text"><![CDATA[唯有足够强大的爱，才能平息这世界的残忍 我想我们三个，永远永远永远，不要结婚 虽然为了大晚上的为了防卡开的低清画质，但是总有一天！我也要去看这样的星空 小s：就是像我们的小孩如果不见了，（阿雅：你不要这样问），我想说如果是我女儿出门，然后没回家，怎么找都找不到人，我真是崩溃了，我会崩溃的 我不是不坚强，只是有那么一瞬间真的会很脆弱，感觉自己很脆弱，保护不好自己，也对不起爱我的人 我认为是的，Chamilando是象群的首领，它妈妈被杀害的时候，它就在旁边，它来到这里之后，每天晚上睡觉都会尖叫，因为它很受伤，它会做噩梦 以前说人文主义，现在说博爱，当然，不是下图百度字典里的这个博爱，它太粗浅了 看到大象被猎杀的那个画面真的很难受，何况这只是1/100，只是1/(100*365)，只是1/(100*365*赞比亚荒野)，所以小s说的下面这段话可能就是让我突然想记录下来的原因吧： 生命真的很需要被尊重，千万不要觉得，好像我们只是一点点小力量，做了真的会改变这个世界吗，我觉得不管力量有多小，你就是做，就像你改变了我，我可以再用我微小的力量再改变其他人 J’aime ma vie]]></content>
      <categories>
        <category>love&amp;peace</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[51nod 1315 合法整数集]]></title>
    <url>%2F6f93207a%2F</url>
    <content type="text"><![CDATA[题目来源： TopCoder 基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 一个整数集合S是合法的，指S的任意子集subS有Fun（SubS）！=X，其中X是一个固定整数，Fun(A)的定义如下：A为一个整数集合，设A中有n个元素，分别为a0，a1，a2,…,an-1,那么定义：Fun(A)=a0 or a1 or … or an-1；Fun({}) = 0,即空集的函数值为0.其中，or为或操作。现在给你一个集合Y与整数X的值，问在集合Y至少删除多少个元素能使集合Y合法？ 例如：Y = {1,2,4}，X=7；显然现在的Y不合法，因为 1 or 2 or 4 = 7，但是删除掉任何一个元素后Y将合法。所以，答案是1. Input第一行两个整数N，X，其中N为Y集合元素个数，X如题所述，且1&lt;=N&lt;=50,1&lt;=X&lt;=1,000,000,000.之后N行，每行一个整数yi，即集合Y中的第i个元素，且1&lt;=yi&lt;=1,000,000,000. Output一个整数，表示最少删除多少个元素。 Input示例1234565 712478 Output示例12 题解：读不懂题。。静下心来才看懂。。 题意就是给你一个集合，集合的一个子集中的数或起来的值不等于x就是合法，求使集合合法至少要删除集合中几个元素 那么先把集合中的数排除掉一部分，对那些(ai|x)&gt;x的数来说，不管怎样最后都不会等于x的，这些数一定不删除 然后剩下的就是(ai|x)&lt;=x的数，就运用位运算的性质来解决，每个数用二进制表示，然后二进制不进位的相加，比如题中例子1，2，4，7，8就得到1222，每一位都和x对应的位比较，如果x的二进制i位为1，就说明可以通过删除所有包含i位的数来达到目的，也就是a[i]的大小 还有两种特殊情况，如果所有数都是一定不用删除的，特判一下输出0，如果还没删除之前x的i位是1，而没有任何数的i位是1，那么就可以直接输出0 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define INF 0x3f3f3f3fint a[233];int main()&#123; int n,x,c,cur,num=0,len,flag=0; scanf("%d%d",&amp;n,&amp;x); memset(a,0,sizeof(a)); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;c); if((c|x)&gt;x)continue; flag=1; cur=0; while(c)&#123; if(c&amp;1)a[cur]++; c/=2; cur++; &#125; num=max(num,cur); &#125; if(!flag)&#123; puts("0"); return 0; &#125; c=x; while(c)&#123; len++; c/=2; &#125; int ans=INF; for(int i=0;i&lt;len;i++)&#123; if(x&amp;(1&lt;&lt;i))&#123; if(a[i]==0)&#123; puts("0"); return 0; &#125; ans=min(a[i],ans); &#125; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何给个人博客换上专属免费域名[hexo+github+freenom]]]></title>
    <url>%2F59f6b91c%2F</url>
    <content type="text"><![CDATA[今天，天气有点冷，风没有往常喧嚣，我，终于有了自己的域名 又能水一篇博客了，前排感谢SunriseFox学长 ！！！ 首先前提是你有了一个部署在githubpage上的个人博客，比如这篇文章里写的这样 Mac OS下用「hexo+github」搭建个人博客！ 1.申请一个免费域名首先是域名申请网站 freenom 申请好像没啥好说的，就是输入一个自己想要的名字，然后选免费的购买233333，各种注册验证啥的 那么现在已经获得了一个想要的域名：leflacon.tk 2.DNS解析虽然学长给我讲了一下直接在freenom上面进行DNS解析的方法，但是我好像没咋耍成!?(･_･;?，所以转身寻求第三方DNS工具了 这里用的是CloudXNS 点击左上脚添加域名 输入获得的域名 这时候会发现接管状态这一项是“X” 点击域名会跳出如下页面，这里给的四个蓝色链接下面会用到 这里说要将域名的NS服务器修改，具体步骤如下 打开最右侧manage domain选项 然后Management Tools-&gt;Nameservers 选择Use custom nameservers (enter below)这项，如图填入之前给的四个蓝色链接 过一会会儿就收到邮件啦，此时接管状态已经显示ok了 然后点开域名，如图添加记录 3.新建CNAME文件在博客根目录的source文件夹下生成一个无后缀的文件“CNAME” 具体方法如下： 在source打开终端，输入sudo touch CNAME 然后打开CNAME文件内输入获得的域名leflacon.tk，我是用sublime的，不会出现啥无法读写的问题 然后在站点配置文件里修改如下两项： 这个是为了防止这两个文件被渲染 然后就是一系列hexo-clean-g-d 等待一下，现在无论在浏览器输入leflacon.tk还是leflacon.github.io都会跳转到leflacon.tk啦～ 其他搬运到新域名之后还是有一些些问题的 一个是busuanzi的访客量统计全部清零了(#ﾟДﾟ)简直是让人。。嘤嘤嘤嘤嘤嘤嘤。。。 还有一个是leancloud评论系统不能用了，这是因为没有把新域名添加到leancloud安全中心的Web安全域名中，所以如下进入设置-&gt;安全中心，添加域名再保存即可 好了，至此我目前能解决的问题都解决了，开始用新域名愉快的玩耍吧～先向百度Google交个链接∠( ᐛ 」∠)＿ 终于能过百度的http认证啦～（因为github禁止百度蜘蛛所以GitHubpage是过不了这个认证的）]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1033 骨牌覆盖 V2（插头dp，矩阵快速幂）]]></title>
    <url>%2Fb513d267%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 320 难度：7级算法题 在m*n的一个长方形方格中，用一个1*2的骨牌排满方格。问有多少种不同的排列方法。（n &lt;= 5) 例如：3 * 2的方格，共有3种不同的排法。（由于方案的数量巨大，只输出 Mod 10^9 + 7 的结果） Input2个数M N，中间用空格分隔（2 &lt;= m &lt;= 10^9，2 &lt;= n &lt;= 5） Output输出数量 Mod 10^9 + 7 Input示例12 3 Output示例13 题解：对插头dp还是。。拨云见雾0.0，先会了这题再说 dp[i][j]表示上一列状态为i到这一列状态为j是否合法，也就是两个块能不能插在一起，dfs后会得到一个(2^n)*(2^n)的矩阵 dfs(x,pre,now)代表第x行，pre状态和now状态，那么有三种合法情况，pre的第x行没有/now的第x行有，pre的第x行有/now的第x行没有，pre的第x行和x+1行和now的第x行和x+1行都是0（其实也就相当于两列里面有一个铺了2x1），也就是说无论如何要把x行填满才能继续下去 123401001□■□□■■□■■□10110 不想画图_(:з」∠)_反正大概就长成这个样子，可以拼一起就行 比如样例2x3的合法状态有： 1234567891011120 71 62 53 40 44 35 26 17 04 00 11 0 然后就是理解矩阵相乘了，因为最初dp[i][j]存的是两例之间的可达性，最后能形成一列，所以需要矩阵相乘，dp[i][j]=∑dp[i][k]*dp[k][j]，也就是如果ik可达kj可达，那么ij可达，且多一个完整的列，最后的答案是dp[0][(1&lt;&lt;n)-1]，也就是首列是空状态0，末列是满状态(1&lt;&lt;n)-1，总共m+1列，m个列满 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;#define LL long long typedef vector&lt;LL&gt;row;typedef vector&lt;row&gt;mat;const int p=1e9+7;LL dp[1&lt;&lt;5][1&lt;&lt;5];int n,m;mat mul(mat a,mat b)&#123; mat c(a.size(),row(b[0].size())); for(int i=0;i&lt;a.size();i++)&#123; for(int j=0;j&lt;b[0].size();j++)&#123; for(int k=0;k&lt;b.size();k++) c[i][j]=(c[i][j]+a[i][k]*b[k][j])%p; &#125; &#125; return c;&#125;mat qpow(mat a,int x)&#123; mat b(a.size(),row(a.size())); for(int i=0;i&lt;a.size();i++)b[i][i]=1; while(x&gt;0)&#123; if(x&amp;1)b=mul(b,a); a=mul(a,a); x&gt;&gt;=1; &#125; return b;&#125;void dfs(int x,int pre,int now)&#123; if(x&gt;n)return; if(x==n)&#123; dp[pre][now]++; // cout&lt;&lt;pre&lt;&lt;" "&lt;&lt;now&lt;&lt;endl; return; &#125; dfs(x+1,pre&lt;&lt;1,now&lt;&lt;1|1); dfs(x+1,pre&lt;&lt;1|1,now&lt;&lt;1); dfs(x+2,pre&lt;&lt;2,now&lt;&lt;2);&#125;int main()&#123; scanf("%d%d",&amp;m,&amp;n); mat a(1&lt;&lt;n,row(1&lt;&lt;n)); dfs(0,0,0); for(int i=0;i&lt;(1&lt;&lt;n);i++) for(int j=0;j&lt;(1&lt;&lt;n);j++) a[i][j]=dp[i][j]; a=qpow(a,m+1); printf("%lld\n",a[0][(1&lt;&lt;n)-1]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>矩阵快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1031 骨牌覆盖（斐波那契）]]></title>
    <url>%2F7e7c23c2%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 在2*N的一个长方形方格中，用一个1*2的骨牌排满方格。问有多少种不同的排列方法。 例如：2*3的方格，共有3种不同的排法。（由于方案的数量巨大，只输出 Mod 10^9 + 7 的结果） Input输入N(N &lt;= 1000) Output输出数量 Mod 10^9 + 7 Input示例13 Output示例13 题解：考虑最左边一列的铺法，因为要铺满，所以如果横向铺两个，方法数加上f[n-2]，如果纵向铺一个，方法数加上f[n-1]，那么f[n]=f[n-1]+f[n-2]，就是个赤裸裸的斐波那契了 初始f[1]=1，只有纵向一个，f[2]=2，纵向两个或者横向两个 代码：123456789101112131415161718#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int p=1e9+7;const int N=1005;int f[N];int main()&#123; int n; scanf("%d",&amp;n); f[1]=1;f[2]=2; for(int i=3;i&lt;=n;i++)f[i]=(f[i-1]+f[i-2])%p; printf("%d\n",f[n]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>推公式</tag>
        <tag>斐波那契</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1007 正整数分组（01背包）]]></title>
    <url>%2Fec4e8b99%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 将一堆正整数分为2组，要求2组的和相差最小。例如：1 2 3 4 5，将1 2 4分为1组，3 5分为1组，两组和相差1，是所有方案中相差最少的。 Input第1行：一个数N，N为正整数的数量。第2 - N+1行，N个正整数。(N &lt;= 100, 所有正整数的和 &lt;= 10000) Output输出这个最小差 Input示例123456512345 Output示例11 题解：01背包，背包大小sum/2，根据取不取当前数有状态转移方程dp[j]=max(dp[j],dp[j-a[i]]+a[i]) 代码：123456789101112131415161718192021222324#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=10005;int a[N],dp[N];int main()&#123; int n,sum=0; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;a[i]); sum+=a[i]; &#125; memset(dp,0,sizeof(dp)); for(int i=0;i&lt;n;i++)&#123; for(int j=sum/2;j&gt;=a[i];j--) dp[j]=max(dp[j],dp[j-a[i]]+a[i]); &#125; printf("%d\n",sum-2*dp[sum/2]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1024 矩阵中不重复的元素（暴力）]]></title>
    <url>%2F34f920df%2F</url>
    <content type="text"><![CDATA[题目来源： Project Euler基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 一个m*n的矩阵。 该矩阵的第一列是a^b,(a+1)^b,…..(a + n - 1)^b第二列是a^(b+1),(a+1)^(b+1),…..(a + n - 1)^(b+1)…….第m列是a^(b + m - 1),(a+1)^(b + m - 1),…..(a + n - 1)^(b + m - 1)(a^b表示a的b次方） 下面是一个4*4的矩阵： 2^2=4, 2^3=8, 2^4=16, 2^5=323^2=9, 3^3=27, 3^4=81, 3^5=2434^2=16, 4^3=64, 4^4=256, 4^5=10245^2=25, 5^3=125, 5^4=625, 5^5=3125 问这个矩阵里有多少不重复的数（比如4^3 = 8^2，这样的话就有重复了) 2^2=4, 2^3=8, 2^4=16, 2^5=323^2=9, 3^3=27, 3^4=81, 3^5=2434^2=16, 4^3=64, 4^4=256, 4^5=1024 m = 4, n = 3, a = 2, b = 2。其中2^4与4^2是重复的元素。 Input输入数据包括4个数：m,n,a,b。中间用空格分隔。m，n为矩阵的长和宽（2 &lt;= m,n &lt;= 100)。a，b为矩阵的第1个元素，a^b（2 &lt;= a , b &lt;= 100）。 Output输出不重复元素的数量。 Input示例14 3 2 2 Output示例111 题解：j^i，对j取log2然后相乘即可，也等同于直接取ln 代码：1234567891011121314151617181920212223242526#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;#define LL long long#define eps 1e-6vector&lt;double&gt;v;int main()&#123; int n,m,a,b; scanf("%d%d%d%d",&amp;m,&amp;n,&amp;a,&amp;b); for(int i=b;i&lt;=b+m-1;i++)&#123; for(int j=a;j&lt;=a+n-1;j++)&#123; v.push_back((double)i*log(j)); &#125; &#125; int num=v.size(),ans=m*n; sort(v.begin(),v.end()); for(int i=1;i&lt;num;i++) if(v[i]-v[i-1]&lt;eps)ans--; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1014 X^2 Mod P（枚举）]]></title>
    <url>%2F9fb00d50%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 X*X mod P = A，其中P为质数。给出P和A，求&lt;=P的所有X。 Input两个数P A，中间用空格隔开。(1 &lt;= A &lt; P &lt;= 1000000, P为质数) Output输出符合条件的X，且0 &lt;= X &lt;= P，如果有多个，按照升序排列，中间用空格隔开。如果没有符合条件的X，输出：No Solution Input示例113 3 Output示例14 9 题解：暴力枚举 代码：1234567891011121314151617181920212223#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;#define LL long longvector&lt;int&gt;v;int main()&#123; int p,a; scanf("%d%d",&amp;p,&amp;a); for(int i=1;i&lt;=p;i++)&#123; if((LL)i*i%p==a)v.push_back(i); &#125; int num=v.size(); if(num==0)puts("No Solution"); else&#123; for(int i=0;i&lt;num;i++)printf("%d ",v[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[51nod 1010 只包含因子2 3 5的数（打表+二分，stl）]]></title>
    <url>%2Ff7f1f3b6%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 K的因子中只包含2 3 5。满足条件的前10个数是： 2,3,4,5,6,8,9,10,12,15。所有这样的K组成了一个序列S，现在给出一个数n，求S中 &gt;= 给定数的最小的数。例如：n = 13，S中 &gt;= 13的最小的数是15，所以输出15。 Input第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 10000)第2 - T + 1行：每行1个数N(1 &lt;= N &lt;= 10^18) Output共T行，每行1个数，输出&gt;= n的最小的只包含因子2 3 5的数。 Input示例123456518133577 Output示例1234528153680 题解：打表然后二分答案，也可以直接用stl，lower_bound 代码：12345678910111213141516171819202122232425262728293031323334353637#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst LL maxx=1e18+233;const int N=50005;LL a[N];int ji=0;void init()&#123; for(LL i=1;i&lt;maxx;i*=2) for(LL j=1;i*j&lt;maxx;j*=3) for(LL k=1;k*i*j&lt;maxx;k*=5) a[ji++]=i*j*k;&#125;int main()&#123; init(); sort(a,a+ji); int t; LL n; scanf("%d",&amp;t); while(t--)&#123; scanf("%lld",&amp;n); LL l=1,r=ji,m; while(l&lt;r)&#123; m=(l+r)&gt;&gt;1; if(a[m]&gt;=n)r=m; else l=m+1; &#125; printf("%lld\n",a[l]); //printf("%lld\n",a[lower_bound(a+1,a+ji+1,n)-a]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>二分</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1050 循环数组最大子段和（dp）]]></title>
    <url>%2F1f726e05%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 N个整数组成的循环序列a[1],a[2],a[3],…,a[n]，求该序列如a[i]+a[i+1]+…+a[j]的连续的子段和的最大值（循环序列是指n个数围成一个圈，因此需要考虑a[n-1],a[n],a[1],a[2]这样的序列）。当所给的整数均为负数时和为0。例如：-2,11,-4,13,-5,-2，和最大的子段为：11,-4,13。和为20。 Input第1行：整数序列的长度N（2 &lt;= N &lt;= 50000)第2 - N+1行：N个整数 (-10^9 &lt;= S[i] &lt;= 10^9)Output输出循环数组的最大子段和。 Input示例12345676-211-413-5-2 Output示例120 题解：dp[i]表示以a[i]结尾的最大子段和是多少 状态转移方程 dp[i]=max(a[i],dp[i-1]+a[i]) 循环数组，那么有两种情况，第一种就是直接取到一个数组的最大子段和，还有一种情况是中间有一段和是特别小的负数，所以首位相连，比较这两种答案取大的那个 第一种情况直接跑一遍最大子段和dp即得，第二种情况就是先求总和sum，然后跑一遍最小子段和，总和减去最小子段和就是首尾相连情况能得到的最大子段和 代码：1234567891011121314151617181920212223242526272829#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=50005;LL a[N],dp1[N],dp2[N];int main()&#123; int n; scanf("%d",&amp;n); LL sum=0; for(int i=0;i&lt;n;i++)&#123; scanf("%lld",&amp;a[i]); sum+=a[i]; &#125; LL ans=a[0],res=a[0]; dp1[0]=a[0];dp2[0]=a[0]; for(int i=1;i&lt;n;i++)&#123; dp1[i]=max(a[i],dp1[i-1]+a[i]); ans=max(ans,dp1[i]); dp2[i]=min(a[i],dp2[i-1]+a[i]); res=min(res,dp2[i]); &#125; printf("%lld\n",max(ans,sum-res)); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 2516 取石子游戏（斐波那契博弈）]]></title>
    <url>%2F7eacad98%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others) Problem Description1堆石子有n个,两人轮流取.先取者第1次可以取任意多个，但不能全部取完.以后每次取的石子数不能超过上次取子数的2倍。取完者胜.先取者负输出”Second win”.先取者胜输出”First win”. Input输入有多组.每组第1行是2&lt;=n&lt;2^31. n=0退出. Output先取者负输出”Second win”. 先取者胜输出”First win”.参看Sample Output. Sample Input1234213100000 Sample Output123Second winSecond winFirst win 题解：斐波那契博弈 证明见这篇 -&gt;51nod 1070 Bash游戏 V4（斐波那契博弈） 代码：12345678910111213141516171819202122232425#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long long int f[100];int main()&#123; f[1]=1;f[2]=1; for(int i=3;i&lt;=80;i++)f[i]=f[i-1]+f[i-2]; LL n; while(scanf("%lld",&amp;n)&amp;&amp;n)&#123; int flag=0; for(int i=1;i&lt;=80;i++) if(f[i]==n)&#123; flag=1; puts("Second win"); break; &#125; if(!flag)puts("First win"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>斐波那契</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1070 Bash游戏 V4（斐波那契博弈）]]></title>
    <url>%2F891ad037%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 有一堆石子共有N个。A B两个人轮流拿，A先拿。每次拿的数量最少1个，最多不超过对手上一次拿的数量的2倍（A第1次拿时要求不能全拿走）。拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出N，问最后谁能赢得比赛。例如N = 3。A只能拿1颗或2颗，所以B可以拿到最后1颗石子。 Input第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 1000)第2 - T + 1行：每行1个数N。(1 &lt;= N &lt;= 10^9) Output共T行，如果A获胜输出A，如果B获胜输出B。 Input示例12343234 Output示例123BBA 题解：斐波那契博弈 结论是：斐波那契数列的数1,2,3,5,8,13,21,34,55,89……必败 粗糙的证明（数学归纳法）： 先证斐波那契数时先手必败 1.n=2时，先手必败，符合 2.假设i&lt;=k时，结论成立，对于i=k+1，f[k+1]=f[k]+f[k-1]，那么把这些石子分成两堆，f[k]和f[k-1]，对于f[k-1]，由假设得后手必胜，那么只需考虑后手取最后一堆最后取几个，以判断在后手取完f[k-1]之后，先手有没有可能一步取完f[k]，如果没有可能的话，由假设得还是先手胜 那么回到f[k-1]，后手取最多的情况是，先手第一次取的数目为x==f[k-1]/3，后手取y=2*f[k-1]/3，那么需要证2*y&lt;f[k]，即4*f[k-1]&lt;3*f[k]，用做差法： 12345673*f[k]-4*f[k-1]=3*f[k-1]+3*f[k-2]-4*f[k-1]=3*f[k-2]-f[k-1]=3*f[k-2]-f[k-2]-f[k-3]=2*f[k-2]-f[k-3]=2*f[k-3]+2*f[k-4]-f[k-3]=f[k-3]+2*f[k-4]&gt;0 由1，2得，假设成立，是斐波那契数必败 然后再考虑n不是斐波那契数的情况 用一下“Zeckendorf定理”（齐肯多夫定理）：任何正整数可以表示为若干个不连续的Fibonacci数之和 即把n分成k堆，n=f[a1]+f[a2]+……+f[ak]（a1&gt;a2&gt;……&gt;ap） 先手必胜策略是：先手先取完f[ak]，即最小的这一堆，由于是若干个不连续的Fibonacci数，由斐波那契数列定义有f[k]=f[k-1]+f[k-2]，即2*f[k]&lt;f[k-1]，所以f[a(k-1)]&gt;2*f[ak]，后手只能取f[a(k-1)]这一堆，且不能一次取完，此时后手相当于面临这个子游戏n=f[a(k-1)]，后手必败 代码：1234567891011121314151617181920212223242526#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int f[80];int main()&#123; f[1]=1;f[2]=1; for(int i=3;i&lt;=45;i++)f[i]=f[i-1]+f[i-2]; int t,n; scanf("%d",&amp;t); while(t--)&#123; int flag=0; scanf("%d",&amp;n); for(int i=1;i&lt;=45;i++) if(f[i]==n)&#123; flag=1; puts("B"); break; &#125; if(!flag)puts("A"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>斐波那契</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1068 Bash游戏 V3（巴什博弈）]]></title>
    <url>%2Ff32e27dd%2F</url>
    <content type="text"><![CDATA[题目来源： Ural 1180 基准时间限制：1 秒 空间限制：131072 KB 分值: 20 难度：3级算法题 有一堆石子共有N个。A B两个人轮流拿，A先拿。每次拿的数量只能是2的正整数次幂，比如(1,2,4,8,16….)，拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出N，问最后谁能赢得比赛。 例如N = 3。A只能拿1颗或2颗，所以B可以拿到最后1颗石子。（输入的N可能为大数） Input第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 1000)第2 - T + 1行：每行1个数N。(1 &lt;= N &lt;= 10^1000) Output共T行，如果A获胜输出A，如果B获胜输出B。 Input示例12343234 Output示例123ABA 题解：hdu 1847 Good Luck in CET-4 Everybody!（巴什博弈） 3的倍数必败，这个题给的n是10^1000，所以判断这个数能否被三整除，求一下各项和即可 代码：123456789101112131415161718192021#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int t,num,len; string n; scanf("%d",&amp;t); while(t--)&#123; cin&gt;&gt;n; len=n.length(); num=0; for(int i=0;i&lt;len;i++)num+=(n[i]-'0'); if(num%3==0)puts("B"); else puts("A"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>巴什博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1067 Bash游戏 V2（打表找规律）]]></title>
    <url>%2Fbe97bbf9%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 有一堆石子共有N个。A B两个人轮流拿，A先拿。每次只能拿1，3，4颗，拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出N，问最后谁能赢得比赛。例如N = 2。A只能拿1颗，所以B可以拿到最后1颗石子。 Input第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 10000)第2 - T + 1行：每行1个数N。(1 &lt;= N &lt;= 10^9) Output共T行，如果A获胜输出A，如果B获胜输出B。 Input示例12343234 Output示例123BAA 题解：这个题每次只能拿1，3，4颗，先根据N/P状态打个表： 1234567891011121314int f[233];int main()&#123; memset(f,0,sizeof(f)); f[1]=f[3]=f[4]=1;f[2]=-1; for(int i=1;i&lt;=100;i++)&#123; if(f[i+1]==0||f[i+1]==-1)f[i+1]=-f[i]; if(f[i+3]==0||f[i+3]==-1)f[i+3]=-f[i]; if(f[i+4]==0||f[i+4]==-1)f[i+4]=-f[i]; &#125; for(int i=1;i&lt;=100;i++)&#123; if(f[i]==-1)cout&lt;&lt;i&lt;&lt;" "; &#125; return 0;&#125; 结果如下： 2 7 9 14 16 21 23 28 30 35 37 42 44 49 51 56 58 63 65 70 72 77 79 84 86 91 93 98 所以答案就是n%7==0或n%7==2先手必败，其余先手必胜 知道结论了可以粗糙的证明一下： 12345n=7k+1，先手取1，留给后手必败7kn=7k+3，先手取3，留给后手必败7k，或取1，留给后手必败7k+2n=7k+4，先手取4，留给后手必败7kn=7k+5，先手取3，留给后手必败7k+2n=7k+6，先手取4，留给后手必败7k+2 代码：1234567891011121314151617#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int t,n; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); if(n%7==0||n%7==2)puts("B"); else puts("A"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>巴什博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1092 回文字符串（dp，lcs）]]></title>
    <url>%2Fe81fda88%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 回文串是指aba、abba、cccbccc、aaaa这种左右对称的字符串。每个字符串都可以通过向中间添加一些字符，使之变为回文字符串。例如：abbc 添加2个字符可以变为 acbbca，也可以添加3个变为 abbcbba。方案1只需要添加2个字符，是所有方案中添加字符数量最少的。 Input输入一个字符串Str，Str的长度 &lt;= 1000。 Output输出最少添加多少个字符可以使之变为回文字串。 Input示例1abbc Output示例12 题解：将字符串翻转，然后求新串和原串的最长公共子序列，和原串长度相减即为所求 基础lcs，dp[i][j]表示s1的前i个和s2的前j个的最长公共子序列，状态转移方程是 dp[i+1][j+1]=max(dp[i+1][j],dp[i][j+1],dp[i][j]+(s1[i]==s2[j]?1:0)) 代码：1234567891011121314151617181920212223242526#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=1005;string s1,s2;int dp[N][N],len1,len2;void lcs()&#123; for(int i=0;i&lt;len1;i++)&#123; for(int j=0;j&lt;len2;j++)&#123; if(s1[i]==s2[j])dp[i+1][j+1]=dp[i][j]+1; else dp[i+1][j+1]=max(dp[i+1][j],dp[i][j+1]); &#125; &#125;&#125;int main()&#123; cin&gt;&gt;s1; s2=s1;reverse(s2.begin(),s2.end()); len1=len2=s1.length(); lcs(); printf("%d\n",len1-dp[len1][len1]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>lcs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ural 1593 Square Country. Version 2（n最少能表示成几个完全平方数的和）]]></title>
    <url>%2Fc5057eab%2F</url>
    <content type="text"><![CDATA[http://acm.timus.ru/problem.aspx?space=1&amp;num=1593 Time limit: 1.0 secondMemory limit: 64 MB There live square people in a square country. Everything in this country is square also. Thus, the Square Parliament has passed a law about a land. According to the law each citizen of the country has a right to buy land. A land is sold in squares, surely. Moreover, a length of a square side must be a positive integer amount of meters. Buying a square of land with a side a one pays a2 quadrics (a local currency) and gets a square certificate of a landowner.One citizen of the country has decided to invest all of his N quadrics into the land. He can, surely, do it, buying square pieces 1 × 1 meters. At the same time the citizen has requested to minimize an amount of pieces he buys: “It will be easier for me to pay taxes,” — he has said. He has bought the land successfully.Your task is to find out a number of certificates he has gotten. InputThe only line contains a positive integer N ≤ 1015 , that is a number of quadrics that the citizen has invested. OutputThe only line contains a number of certificates that he has gotten. Sample1234input344output3 题意：给一个数n，n&lt;=1e15，求n最少能表示成几个完全平方数的和 题解：这个题的基础版：ural 1073 Square Country 还是用到四平方和定理：“每个正整数均可表示为4个整数的平方和” 直接暴力判断1，2，3的情况，其余输出4，但是这题n太大了，毫无意外的t掉了，所以要来点定理优化 n≠4^a*(8m+7)是n可以用三个平方数表示的一个充分必要条件 正整数n能表示为两平方数之和的充要条件，是在它的标准分解式中，形如4k+3的素因数的幂指数是偶数 形如 4k+3 的整数有形如 4k+3 的素因子 先判断1，然后除去n的所有因子2得m，此时如果m%4!=3，也就是说“4k+3的素因数的幂指数是奇数”的情况不存在，那么可以继续判断答案为2的可能，如果m=1那么符合定理要求答案为2，其余情况就要暴力找有没有可能是两个数的平方和，当然这里暴力也是要优化一下的，枚举的范围在[sqrt(n-sqrt(n)*sqrt(n)),sqrt(n)] 判断3，4时用到上面第一个定理，因为是充要条件，所以直接判断，不是3就是4，直接干掉快的不行 最后跑了312ms 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long long int main()&#123; LL n,m,sum,tmp1,tmp2; scanf("%lld",&amp;n); tmp1=sqrt(n); if(tmp1*tmp1==n)&#123; puts("1"); return 0; &#125; m=n; while(!(m&amp;1))m/=2; if(m%4!=3)&#123; if(m==1)&#123; puts("2"); return 0; &#125; m=n; sum=n; tmp1=sqrt(m); m=m-tmp1*tmp1; tmp2=sqrt(m); for(LL i=tmp1;i&gt;=tmp2;i--)&#123; m=sum; m=m-i*i; tmp2=sqrt(m); if(tmp2*tmp2+i*i==sum)&#123; puts("2"); return 0; &#125; &#125; &#125; m=n; while(m%4==0)m/=4; if(m%8!=7)&#123; puts("3"); &#125; else puts("4"); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>四平方和定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ural 1073 Square Country（四平方和定理，完全背包）]]></title>
    <url>%2F34784cdc%2F</url>
    <content type="text"><![CDATA[http://acm.timus.ru/problem.aspx?space=1&amp;num=1073 Time limit: 1.0 secondMemory limit: 64 MB There live square people in a square country. Everything in this country is square also. Thus, the Square Parliament has passed a law about a land. According to the law each citizen of the country has a right to buy land. A land is sold in squares, surely. Moreover, a length of a square side must be a positive integer amount of meters. Buying a square of land with a side a one pays a2 quadrics (a local currency) and gets a square certificate of a landowner.One citizen of the country has decided to invest all of his N quadrics into the land. He can, surely, do it, buying square pieces 1 × 1 meters. At the same time the citizen has requested to minimize an amount of pieces he buys: “It will be easier for me to pay taxes,” — he has said. He has bought the land successfully.Your task is to find out a number of certificates he has gotten. InputThe only line contains a positive integer N ≤ 60 000 , that is a number of quadrics that the citizen has invested. OutputThe only line contains a number of certificates that he has gotten. Sample1234input344output3 题意：给一个数n，n&lt;=60000，求n最少能表示成几个完全平方数的和 题解：因为这个题n不大，所以有两种方法，而进阶版的题n是1e15，背包的话状态就开不下了，需要用数学性质解决 -&gt; 1593. Square Country. Version 2 一种是当成完全背包做，dp[j]代表j最少能表示成几个完全平方数的和，从1-√n枚举i，状态转移方程为dp[j]=min(dp[j],dp[j-i*i]+1) 第二种方法是当成一个数论题做，用到四平方和定理：“每个正整数均可表示为4个整数的平方和” 所以直接暴力判断1，2，3的情况，其余输出4即可，不过写的时候要注意，如果当前找到了3的一组答案，不能直接输出，因为后续可能有2的答案，之前没考虑这个就wa了一发 代码：123456789101112131415161718192021#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define INF 0x3f3f3f3fconst int N=60005;int dp[N];int main()&#123; int n; scanf("%d",&amp;n); memset(dp,INF,sizeof(dp)); dp[0]=0; for(int i=1;i*i&lt;=n;i++) for(int j=i*i;j&lt;=n;j++) dp[j]=min(dp[j],dp[j-i*i]+1); printf("%d\n",dp[n]); return 0;&#125; 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int n,flag=0,tmp1,tmp2; scanf("%d",&amp;n); for(int i=sqrt(n);i&gt;0;i--)&#123; tmp1=n-i*i; if(tmp1==0)&#123; flag=1; puts("1"); return 0; &#125; else&#123; for(int j=sqrt(tmp1);j&gt;0;j--)&#123; tmp2=tmp1-j*j; if(tmp2==0)&#123; flag=1; puts("2"); return 0; &#125; else&#123; int k=sqrt(tmp2); if(k*k==tmp2)&#123; flag=1; &#125; &#125; &#125; &#125; &#125; if(!flag)puts("4"); else puts("3"); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>背包</tag>
        <tag>四平方和定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 3864 D_num（Pollard Rho大因数分解）]]></title>
    <url>%2F71a9f0a2%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem DescriptionOregon Maple was waiting for Bob When Bob go back home. Oregon Maple asks Bob a problem that as a Positive number N, if there are only four Positive number M makes Gcd(N, M) == M then we called N is a D_num. now, Oregon Maple has some Positive numbers, and if a Positive number N is a D_num , he want to know the four numbers M. But Bob have something to do, so can you help Oregon Maple?Gcd is Greatest common divisor. InputSome cases (case &lt; 100);Each line have a numeral N（1&lt;=N&lt;10^18） OutputFor each N, if N is a D_NUM, then output the four M (if M &gt; 1) which makes Gcd(N, M) = M. output must be Small to large, else output “is not a D_num”. Sample Input1236109 Sample Output1232 3 62 5 10is not a D_num 题意：给一个数n，n范围1e18，如果n有四个因数，输出除1以外的三个因数 题解：大因数分解 – Pollard Rho算法 分解完判断因数，只有两种情况可能有四个因数，一种是1,a,b,a*b，还有一种是1,a,a^2,a^3 t了无数发。。因为之前的板子快速幂里面的乘法还是直接乘，然后改成快速乘之后78ms过了。。太可怕了 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;#define LL long longvector&lt;LL&gt;v,ans;LL mul(LL a,LL b,LL p)&#123;//快速乘，防爆LL a%=p; LL res=0; while(b)&#123; if(b&amp;1)res=(res+a)%p; b&gt;&gt;=1; a=(a&lt;&lt;1)%p; &#125; return res;&#125;LL qpow(LL a,LL b,LL p)&#123;//快速幂 a%=p;b%=p; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=mul(ans,a,p); &#125; b&gt;&gt;=1; a=mul(a,a,p); &#125; return ans;&#125;LL gcd(LL a,LL b)&#123; return b==0?a:gcd(b,a%b);&#125;bool Miller_Rabin(LL n)&#123; if(n==2)return true; if(n&lt;2||!(n&amp;1))return false; int cishu=20,ji=0; LL m=n-1; while(!(m&amp;1))&#123; ji++; m&gt;&gt;=1; &#125; srand(100); while(cishu--)&#123; LL a=rand()%(n-1)+1; LL x=qpow(a,m,n),tmp=0; for(int i=0;i&lt;ji;i++)&#123; tmp=mul(x,x,n); if(tmp==1&amp;&amp;x!=1&amp;&amp;x!=n-1)return false; x=tmp; &#125; if(tmp!=1)return false; &#125; return true;&#125;LL Pollard_Rho(LL n,int c)&#123; LL i=1,k=2,x,y; x=rand()%(n-1)+1;y=x; while(1)&#123; i++; x=(mul(x,x,n)+c)%n; if(y==x)return n; LL d=gcd((y-x+n)%n,n); if(d!=1&amp;&amp;d!=n)return d; if(i==k)&#123; y=x; k&lt;&lt;=1; &#125; &#125;&#125;void find(LL n)&#123; if(n==1)return; if(Miller_Rabin(n))&#123; v.push_back(n); return; &#125; LL p=n; while(p&gt;=n)p=Pollard_Rho(p,rand()%(n-1)+1); find(p); find(n/p);&#125;int main()&#123; LL n; while(scanf("%lld",&amp;n)!=EOF)&#123; v.clear();ans.clear(); find(n); sort(v.begin(),v.end()); if(v.size()==2&amp;&amp;v[0]!=v[1]) printf("%lld %lld %lld\n",v[0],v[1],v[0]*v[1]); else if(v.size()==3&amp;&amp;v[0]==v[1]&amp;&amp;v[1]==v[2])&#123; printf("%lld %lld %lld\n",v[0],v[0]*v[0],v[0]*v[0]*v[0]); &#125; else printf("is not a D_num\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>Pollard_Rho算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大因数分解 -- Pollard Rho算法]]></title>
    <url>%2Fffac8316%2F</url>
    <content type="text"><![CDATA[研究了一篇论文，讲的很好，由浅入深，大致记录一下 试除法首先如果要对一个数进行因数分解，最直接的做法就是「试除法」 假设N是一个能被分解为p*q的数，就暴力的从i=2（i++）开始判断能否整除n，当然由于一半是偶数，所以可以优化先判断2，然后从3开始（i+=2）继续判断 这种方法可以改的更加暴力，不从i=2开始，直接给一个随机数i然后判断i能否整除n，那么对于n=p*q来说，找出其因数的概率是2/(n-1)，相当小啊，这不是我们要的 所以接下来要开一个叫 「Birthday Trick」（生日悖论） 的挂 生日悖论生日悖论问题： 如果一个房间里有23个或23个以上的人，那么至少有两个人的生日相同的概率要大于50%。这就意味着在一个典型的标准小学班级(30人)中，存在两人生日相同的可能性更高。对于60或者更多的人，这种概率要大于99%。 那么举个取随机数的例子，在[1,1000]中随机取一个数，取得42这个数的概率是1/1000，那么现在修改一下这个问题，在[1,1000]中随机取两个数i,j(i!=j)，i-j=42的概率是多少，如下：479/249750，差不多是1/500，快了一半 那么大胆假设，如果在[1,1000]中随机取k个数，x1,x2…xk，满足xi-xj=42的概率是多少呢（关于这段论文里的代码我没咋搞明白就懒得试了，mark一下再说吧，先直接丢结果） 然后回到之前的试除法，对于n=p*q来说，取一个[1,n]的随机数，直接得到p或q的概率是很小的，但是取k个数，xi-xj整除n的概率就会随着k的增大而增大，上面这种情况当k=√n时，概率已经上升到50%以上 用gcd优化对于一个10位整数来说，需要选取k=10^5个随机数（原因大概就是√n的时候的精确度已经差不多了），然而，这并没有优化，因为我们要做k^2=10^10次比较，所以这时候又出现了一个更妙的想法 选取k个数x1,x2…xk，询问是否存在gcd(xi-xj,n)&gt;1，举个例子，如果问有多少个数能整除n，答案只有两个，p和q，如果问有多少个数使得gcd(x,n)&gt;1，答案便很多了p,2p,3p…(q-1)p,q,2q,3q…(p-1)q，也就是说共有p+q-2个数 所以思路就是在[2,n-1]中随机选k个数，x1,x2…xk，判读是否存在gcd(xi-xj,n)&gt;1，若存在，则gcd(xi-xj,n)是n的一个因子，即之前举例的p或q 伪随机数：生成10^5个随机数要用到伪随机数的神奇函数f(i)=(x^2+a)mod n 可以自己指定a，也可以用rand()生成，f1=2（别的也行） 对于大多数数字，这个函数都是完全ok的，但是对于某些特殊数字，会陷入循环0.0，也就是传说中的f环，然后就找不到因子了，比如x1=2，a=1，n=8051就会出现f环，所以需要探测环的出现 一种方法用一个vis数组记录当前产生的所有数，但是如果n变大，内存就炸了 所以又要开挂了，Floyd周期检测策略，Floyd好厉害啊ʕ •ᴥ•ʔ 探测f环（Floyd周期检测策略）：假设我们在一个很长很长的圆形轨道上行走，我们如何知道我们已经走完了一圈呢？机智的方法是让A和B，从同一起点开始往前走，B的速度是A的速度的两倍，那么当B第一次赶上A时(套圈)，B就已经走了至少一圈了 所以如果有环，重新给个种子a就ok了 Pollard’s Rho 算法 ：以上都结合起来，就差不多是Pollard’s Rho 算法了 复杂度o(玄学n^(1/4))，不想看复杂度证明了╮(￣▽￣””)╭ 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;#define LL long longvector&lt;LL&gt;v;LL mul(LL a,LL b,LL p)&#123;//快速乘，防爆LL a%=p; LL res=0; while(b)&#123; if(b&amp;1)res=(res+a)%p; b&gt;&gt;=1; a=(a&lt;&lt;1)%p; &#125; return res;&#125;LL qpow(LL a,LL b,LL p)&#123;//快速幂 a%=p;b%=p; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=mul(ans,a,p); &#125; b&gt;&gt;=1; a=mul(a,a,p); &#125; return ans;&#125;LL gcd(LL a,LL b)&#123; return b==0?a:gcd(b,a%b);&#125;bool Miller_Rabin(LL n)&#123; if(n==2)return true; if(n&lt;2||!(n&amp;1))return false; int cishu=20,ji=0; LL m=n-1; while(!(m&amp;1))&#123; ji++; m&gt;&gt;=1; &#125; srand(100); while(cishu--)&#123; LL a=rand()%(n-1)+1; LL x=qpow(a,m,n),tmp=0; for(int i=0;i&lt;ji;i++)&#123; tmp=mul(x,x,n); if(tmp==1&amp;&amp;x!=1&amp;&amp;x!=n-1)return false; x=tmp; &#125; if(tmp!=1)return false; &#125; return true;&#125;LL Pollard_Rho(LL n,int c)&#123; LL i=1,k=2,x,y; x=rand()%(n-1)+1;y=x; while(1)&#123; i++; x=(mul(x,x,n)+c)%n; if(y==x)return n; LL d=gcd((y-x+n)%n,n); if(d!=1&amp;&amp;d!=n)return d; if(i==k)&#123; y=x; k&lt;&lt;=1; &#125; &#125;&#125;void find(LL n)&#123; if(n==1)return; if(Miller_Rabin(n))&#123; v.push_back(n); return; &#125; LL p=n; while(p&gt;=n)p=Pollard_Rho(p,rand()%(n-1)+1); find(p); find(n/p);&#125;int main()&#123; LL n; cin&gt;&gt;n; find(n); sort(v.begin(),v.end()); for(int i=0;i&lt;v.size();i++)&#123; cout&lt;&lt;v[i]&lt;&lt;" "; &#125; cout&lt;&lt;endl; return 0;&#125; 终于搞定了睡觉去～\(≧▽≦)/明天去搞两个题耍耍，最后附上那篇论文的链接 -&gt; A Quick Tutorial on Pollard’s Rho Algorithm]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>gcd</tag>
        <tag>Pollard_Rho算法</tag>
        <tag>生日悖论</tag>
        <tag>Floyd周期检测</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[busuanzi计数功能失效及解决办法]]></title>
    <url>%2F589bd519%2F</url>
    <content type="text"><![CDATA[上课前水一篇博客 这两天发现博客的计数区不计数了，如图： 然后上了一下busuanzi的官网，发现是js文件转移了 所以在foot.swig里改一下以前的开头即可 123&lt;script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;改为&lt;script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt;]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1094 和为k的连续区间（前缀和，map）]]></title>
    <url>%2F205f0ecd%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 一整数数列a1, a2, … , an（有正有负），以及另一个整数k，求一个区间[i, j]，(1 &lt;= i &lt;= j &lt;= n)，使得a[i] + … + a[j] = k。 Input第1行：2个数N,K。N为数列的长度。K为需要求的和。(2 &lt;= N &lt;= 10000，-10^9 &lt;= K &lt;= 10^9)第2 - N + 1行：A[i](-10^9 &lt;= A[i] &lt;= 10^9。 Output如果没有这样的序列输出No Solution。输出2个数i, j，分别是区间的起始和结束位置。如果存在多个，输出i最小的。如果i相等，输出j最小的。 Input示例12345676 10123456 Output示例11 4 题解：前缀和 o(n^2)暴力竟然过了，看了讨论区还可以再用map优化一下，优化后的代码也放下面了，62ms-&gt;15ms(・ω・)ノ 代码：o(n^2) 12345678910111213141516171819202122232425262728293031#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=1e4+5;LL a[N];int main()&#123; int n,flag=0; LL k,c; scanf("%d%lld",&amp;n,&amp;k); a[0]=0; for(int i=1;i&lt;=n;i++)&#123; scanf("%lld",&amp;c); a[i]=a[i-1]+c; &#125; for(int i=0;i&lt;=n-1;i++)&#123; if(flag)break; for(int j=i+1;j&lt;=n;j++) if(a[j]-a[i]==k)&#123; flag=1; printf("%d %d\n",i+1,j); break; &#125; &#125; if(!flag)printf("No Solution"); return 0;&#125; 12345678910111213141516171819202122232425262728293031323334353637#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;map&gt;using namespace std;#define LL long longconst int N=1e4+5;LL a[N];map&lt;LL,LL&gt;m;int main()&#123; int n,flag=0; LL k,c; scanf("%d%lld",&amp;n,&amp;k); a[0]=0; for(int i=1;i&lt;=n;i++)&#123; scanf("%lld",&amp;c); a[i]=a[i-1]+c; m[a[i]]++; &#125; for(int i=0;i&lt;=n-1;i++)&#123; if(flag)break; if(m[a[i]+k])&#123; for(int j=i+1;j&lt;=n;j++) if(a[j]-a[i]==k)&#123; flag=1; printf("%d %d\n",i+1,j); break; &#125; &#125; &#125; if(!flag)printf("No Solution"); return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1095 Anigram单词（map）]]></title>
    <url>%2Fcbd59ef1%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 一个单词a如果通过交换单词中字母的顺序可以得到另外的单词b，那么定义b是a的Anigram，例如单词army和mary互为Anigram。另：相同的2个单词不算Anigram。现在给定一个字典，输入Q个单词，从给出的字典中找出这些单词的Anigram。 Input第1行：1个数N，表示字典中单词的数量。(1 &lt;= N &lt;= 10000)第2 - N + 1行，字典中的单词，单词长度 &lt;= 10。第N + 2行：查询的数量Q。(1 &lt;= Q &lt;= 10000)第N + 3 - N + Q - 2行：用作查询的单词，单词长度 &lt;= 10。 Output共Q行，输出Anigram的数量，如果没有输出0。 Input示例123456789105adddadbadcaddid3addcacdda Output示例123102 题解：stl好厉害啊 用两个map，一个记录某字符串个数，一个记录某字符串排序后的串的个数，对于某串来说，能变成的串的个数就是上述两数相减 代码：1234567891011121314151617181920212223242526272829303132#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;map&gt;using namespace std;map&lt;string,int&gt;m1,m2;int main()&#123; int n,q,len; char s[11]; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%s",s); len=strlen(s); m1[s]++; sort(s,s+len); m2[s]++; &#125; scanf("%d",&amp;q); int t1,t2; for(int i=0;i&lt;q;i++)&#123; scanf("%s",s); len=strlen(s); t1=m1[s]; sort(s,s+len); t2=m2[s]; printf("%d\n",t2-t1); &#125; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1126 1119 机器人走方格 V2]]></title>
    <url>%2Fbb4502fa%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 M * N的方格，一个机器人从左上走到右下，只能向右或向下走。有多少种不同的走法？由于方法数量可能很大，只需要输出Mod 10^9 + 7的结果。 Input第1行，2个数M,N，中间用空格隔开。（2 &lt;= m,n &lt;= 1000000) Output输出走法的数量 Mod 10^9 + 7。 Input示例12 3 Output示例13 题解：c(m+n-2,m-1) 用费马小定理求组合数的板子交了一发200ms+(#ﾟДﾟ) 写了个扩展欧几里得的板子交还是200ms+… 然后看了下榜里的板子，研究了一下人家的15ms，发现是我求组合数那个函数跑得慢，之前写的那个循环m次每次都求了逆元再相乘，其实可以直接先相乘得到分母，最后求一次逆元即可，改了一下，现在两个都是15ms了(￣▽￣) 12345678910LL C(LL n,LL m)&#123; if(m&gt;n)return 0; LL ans=1; for(int i=1;i&lt;=m;i++)&#123; LL a=(n+i-m)%p; LL b=i%p; ans=ans*(a*qpow(b,p-2)%p)%p; &#125; return ans;&#125; 代码：1234567891011121314151617181920212223242526272829303132333435363738#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int p=1e9+7;LL qpow(LL a,LL b)&#123; LL ans=1; a%=p; while(b)&#123; if(b&amp;1)&#123; ans=ans*a%p; b--; &#125; b&gt;&gt;=1; a=a*a%p; &#125; return ans;&#125;LL C(LL n,LL m)&#123; if(m&gt;n)return 0; LL ans,a=1,b=1; for(int i=1;i&lt;=m;i++)&#123; a=(a*(n+i-m)%p)%p; b=(b*i%p)%p; &#125; ans=(a*qpow(b,p-2)%p)%p; return ans;&#125;int main()&#123; LL m,n; scanf("%lld%lld",&amp;m,&amp;n); printf("%lld\n",C(m+n-2,m-1)); return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int p=1e9+7;void ex_gcd(LL a,LL b,LL &amp;d,LL &amp;x,LL &amp;y)&#123; if(b==0)&#123; x=1;y=0;d=a; return; &#125; ex_gcd(b,a%b,d,y,x); y-=x*(a/b);&#125;LL inv(LL a)&#123; LL x,y,d; ex_gcd(a,p,d,x,y); if(d!=1)return 0; return (x%p+p)%p;&#125;LL C(LL n,LL m)&#123; if(m&gt;n)return 0; LL ans,a=1,b=1; for(int i=1;i&lt;=m;i++)&#123; a=(a*(n+i-m)%p)%p; b=(b*i%p)%p; &#125; ans=(a*inv(b)%p)%p; return ans;&#125;int main()&#123; LL m,n; scanf("%lld%lld",&amp;m,&amp;n); printf("%lld\n",C(m+n-2,m-1)); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>逆元</tag>
        <tag>组合数</tag>
        <tag>扩展欧几里得</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1126 求递推序列的第N项（找循环结，矩阵快速幂）]]></title>
    <url>%2Fe4d2c7ba%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 有一个序列是这样定义的：f(1) = 1, f(2) = 1, f(n) = (A * f(n - 1) + B * f(n - 2)) mod 7.给出A，B和N，求f(n)的值。 Input输入3个数：A,B,N。数字之间用空格分割。(-10000 &lt;= A, B &lt;= 10000, 1 &lt;= N &lt;= 10^9) Output输出f(n)的值。 Input示例13 -1 5 Output示例16 题解：和这个题差不多 -&gt; Best Solver – ACM-ICPC 2015 Shenyang（推公式，广义斐波那契） 找循环结，因为模7所以按理说很快就能找到然后return的，但是下面这种写法又t又wa 存在以下三个问题： 1.负数取模的问题 改成f[i]=((a*f[i-1]%7+b*f[i-2])%7+7)%7; 2.刚好是循环结倍数的特殊情况 当n%x=0，n+=x 3.循环条件问题 改成这样才行for(int i=3;i&lt;N;i++)，不然会t。。一开始不知道为啥，打表了这组数据2322 -6048 525119718，发现第三项开始是546231546231……，好特殊啊，自己半路循环了起来0.0 都改完之后那组数据还是re，2322 -6048 525119718，把return i-2改成了break，在最后return，然后就。。ac了。。ac了。。ac了。。(╯°□°）╯︵ ┻━┻ 嗯共计交了21发，下次再写循环结0.0我一定不要wa了 还有一个方法是矩阵快速幂，构造如下矩阵然后套板子，代码也放下面了 12( F(n) ) = ( a b )*( F(n-1) ) F(n-1) 1 0 F(n-2) 代码：1234567891011121314151617181920212223242526#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=2333; int f[N],a,b,n;int getnum()&#123; f[0]=1;f[1]=1;f[2]=1; int i; for(i=3;i&lt;N;i++)&#123; f[i]=((a*f[i-1]%7+b*f[i-2])%7+7)%7; if(f[i]==1&amp;&amp;f[i-1]==1)break; &#125; return i-2;&#125;int main()&#123; scanf("%d%d%d",&amp;a,&amp;b,&amp;n); int x=getnum(); n%=x; if(n==0)n+=x; printf("%d\n",f[n]); return 0;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;typedef vector&lt;int&gt;row;typedef vector&lt;row&gt;mat;const int p=7;mat mul(mat a,mat b)&#123; mat c(a.size(),row(b[0].size())); for(int i=0;i&lt;a.size();i++)&#123; for(int j=0;j&lt;b[0].size();j++)&#123; for(int k=0;k&lt;b.size();k++) c[i][j]=(c[i][j]+a[i][k]*b[k][j])%p; &#125; &#125; return c;&#125;mat qpow(mat a,int x)&#123; mat b(a.size(),row(a.size())); for(int i=0;i&lt;a.size();i++)b[i][i]=1; while(x&gt;0)&#123; if(x&amp;1)b=mul(b,a); a=mul(a,a); x&gt;&gt;=1; &#125; return b;&#125;int main()&#123; int n,aa,bb; scanf("%d%d%d",&amp;aa,&amp;bb,&amp;n); while(aa&lt;0)aa+=p; while(bb&lt;0)bb+=p; mat a(2,row(2)),b(2,row(1)),c(2,row(1)); a[0][0]=aa;a[0][1]=bb;a[1][0]=1;a[1][1]=0; b[0][0]=1;b[1][0]=1; if(n&gt;=3)&#123; a=qpow(a,n-2); c=mul(a,b); printf("%d\n",c[0][0]); &#125; else&#123; printf("1\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>矩阵快速幂</tag>
        <tag>斐波那契</tag>
        <tag>循环结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1133 不重叠的线段（贪心）]]></title>
    <url>%2Fc1989cb5%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 X轴上有N条线段，每条线段有1个起点S和终点E。最多能够选出多少条互不重叠的线段。（注：起点或终点重叠，不算重叠）。例如：[1 5][2 3][3 6]，可以选[2 3][3 6]，这2条线段互不重叠。 Input第1行：1个数N，线段的数量(2 &lt;= N &lt;= 10000)第2 - N + 1行：每行2个数，线段的起点和终点(-10^9 &lt;= S,E &lt;= 10^9) Output输出最多可以选择的线段数量。 Input示例123431 52 33 6 Output示例12 题解：n条线段最大没有交点的线段数 贪心，按照线段右端点排序，然后遍历判断 代码：1234567891011121314151617181920212223242526272829#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=10005; struct node&#123; int l,r;&#125;a[N*2];bool cmp(struct node x,struct node y)&#123; return x.r&lt;y.r;&#125;int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d%d",&amp;a[i].l,&amp;a[i].r); sort(a,a+n,cmp); int ans=1,tmp=a[0].r; for(int i=1;i&lt;n;i++)&#123; if(a[i].l&gt;=tmp)&#123; ans++; tmp=a[i].r; &#125; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1138 连续整数的和]]></title>
    <url>%2Ffab7cb46%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 给出一个正整数N，将N写为若干个连续数字和的形式(长度 &gt;= 2)。例如N = 15，可以写为1 + 2 + 3 + 4 + 5，也可以写为4 + 5 + 6，或7 + 8。如果不能写为若干个连续整数的和，则输出No Solution。 Input输入1个数N(3 &lt;= N &lt;= 10^9)。 Output输出连续整数中的第1个数，如果有多个按照递增序排列，如果不能分解为若干个连续整数的和，则输出No Solution。 Input示例115 Output示例123147 题解：先等差数列求和公式一下 要求的是首项a1 从sqrt(2*sum)开始枚举n即可，遇到整数a1就输出 代码：1234567891011121314151617181920#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int sum,flag=0; scanf("%d",&amp;sum); int m=(int)sqrt(2*sum); for(int i=m;i&gt;=2;i--)&#123; if((2*sum+i-i*i)%(2*i)==0&amp;&amp;(2*sum+i-i*i)&gt;0)&#123; flag=1; printf("%d\n",(2*sum+i-i*i)/(2*i)); &#125; &#125; if(!flag)puts("No Solution"); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1266 蚂蚁（贪心）]]></title>
    <url>%2F62f8e345%2F</url>
    <content type="text"><![CDATA[题目来源： Poj 基准时间限制：1 秒 空间限制：131072 KB 分值: 20 难度：2级算法题 n只蚂蚁以每秒1cm的速度在长为Lcm的竿子上爬行。当蚂蚁爬到竿子的端点时就会掉落。由于竿子太细，两只蚂蚁相遇时，它们不能交错通过，只能各自反向爬回去。对于每只蚂蚁，我们知道它距离竿子左端的距离xi，但不知道它当前的朝向。请计算各种情况当中，所有蚂蚁落下竿子所需的最短时间和最长时间。 例如：竿子长10cm，3只蚂蚁位置为2 6 7，最短需要4秒(左、右、右)，最长需要8秒（右、右、右）。 Input第1行：2个整数N和L，N为蚂蚁的数量，L为杆子的长度(1 &lt;= L &lt;= 10^9, 1 &lt;= N &lt;= 50000)第2 - N + 1行：每行一个整数A[i]，表示蚂蚁的位置(0 &lt; A[i] &lt; L) Output输出2个数，中间用空格分隔，分别表示最短时间和最长时间。 Input示例12343 10267 Output示例14 8 题解：水题，最短时间就是分两边下，最长时间就是所有蚂蚁同向下 代码：1234567891011121314151617181920212223242526#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=50005; int a[N];int main()&#123; int n,l,minn,maxx,z; int zl,zr,ans1,ans2; scanf("%d%d",&amp;n,&amp;l); minn=l;maxx=0;z=l/2;zl=zr=0; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;a[i]); minn=min(minn,a[i]); maxx=max(maxx,a[i]); if(a[i]&gt;=z)zr=max(zr,l-a[i]); else zl=max(zl,a[i]); &#125; ans1=max(zl,zr); ans2=max(l-minn,maxx); printf("%d %d\n",ans1,ans2); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1278 相离的圆（贪心）]]></title>
    <url>%2Feba1fb1b%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 平面上有N个圆，他们的圆心都在X轴上，给出所有圆的圆心和半径，求有多少对圆是相离的。 例如：4个圆分别位于1, 2, 3, 4的位置，半径分别为1, 1, 2, 1，那么{1, 2}, {1, 3} {2, 3} {2, 4} {3, 4}这5对都有交点，只有{1, 4}是相离的。 Input第1行：一个数N，表示圆的数量(1 &lt;= N &lt;= 50000)第2 - N + 1行：每行2个数P, R中间用空格分隔，P表示圆心的位置，R表示圆的半径(1 &lt;= P, R &lt;= 10^9) Output输出共有多少对相离的圆。 Input示例1234541 12 13 24 1 Output示例11 题解：把圆相离转化一下问题就变成了给n条线段[l,r]，求没有交点的线段个数 可以和这个题联系起来 -&gt; n条线段最多重叠个数 里面提供的这种记录入点出点再排序的思路在这个题上同样适用 要注意的是上面那个题在端点重合时是出点排入点前，而这个题相切的圆不算向离，所以入点排出点前，先少一个能相离的圆再结算前面的圆 令num=圆的个数，排序后遍历，遇到入点说明少一个能相离的圆num–，遇到出点ans+=num，妙啊妙啊 代码：1234567891011121314151617181920212223242526272829303132#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=50005; struct node&#123; int t,v;&#125;a[N*2];bool cmp(struct node x,struct node y)&#123; if(x.v!=y.v)return x.v&lt;y.v; else return x.t&lt;y.t;&#125;int main()&#123; int n,p,r; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%d%d",&amp;p,&amp;r); a[i].v=p-r;a[i+n].v=p+r; a[i].t=0;a[i+n].t=1; &#125; sort(a,a+2*n,cmp); int num=n,ans=0; for(int i=0;i&lt;2*n;i++)&#123; if(a[i].t==0)num--; else ans+=num; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1279 扔盘子（stack）]]></title>
    <url>%2F650f0a27%2F</url>
    <content type="text"><![CDATA[题目来源： Codility 基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 有一口井，井的高度为N，每隔1个单位它的宽度有变化。现在从井口往下面扔圆盘，如果圆盘的宽度大于井在某个高度的宽度，则圆盘被卡住（恰好等于的话会下去）。盘子有几种命运：1、掉到井底。2、被卡住。3、落到别的盘子上方。盘子的高度也是单位高度。给定井的宽度和每个盘子的宽度，求最终落到井内的盘子数量。 如图井和盘子信息如下：井：5 6 4 3 6 2 3盘子：2 3 5 2 4 最终有4个盘子落在井内。 本题由 @javaman 翻译。 Input第1行：2个数N, M中间用空格分隔，N为井的深度，M为盘子的数量(1 &lt;= N, M &lt;= 50000)。第2 - N + 1行，每行1个数，对应井的宽度Wi(1 &lt;= Wi &lt;= 10^9)。第N + 2 - N + M + 1行，每行1个数，对应盘子的宽度Di(1 &lt;= Di &lt;= 10^9) Output输出最终落到井内的盘子数量。 Input示例123456789101112137 5564362323524 Output示例14 题解：正常思路是对每一个盘子从上往下遍历井，这样复杂度是o(n^2)过不了，然后想一下怎么优化 考虑到一个盘子，如果能过宽的层下面的窄层，那么上面那个宽层肯定能过，所以从上往下的时候决定它能不能过的其实是一个宽度递减的序列，所以先预处理一下井，改为递减，存入栈中，比如样例5 6 4 3 6 2 3处理后就是5 5 4 3 3 2 2，然后逆向思考，从最下面的那个宽度开始遍历，复杂度o(n)，优美～ 一种是单调栈的写法125ms，还有一种不利用stl直接在输入的时候更新写法 代码：12345678910111213141516171819202122232425262728293031323334#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;stack&gt;using namespace std;#define INF 0x3f3f3f3fconst int N=50005;int w[N],d[N];stack&lt;int&gt;s;int main()&#123; int n,m,ans=0,tmp=INF; scanf("%d%d",&amp;n,&amp;m); for(int i=0;i&lt;n;i++)scanf("%d",&amp;w[i]); for(int i=0;i&lt;m;i++)scanf("%d",&amp;d[i]); for(int i=0;i&lt;n;i++)&#123; if(w[i]&lt;=tmp)tmp=w[i]; s.push(tmp); &#125; int cur=0; while(!s.empty()&amp;&amp;cur&lt;m)&#123; if(s.top()&lt;d[cur])&#123; s.pop(); continue; &#125; ans++; s.pop(); cur++; &#125; printf("%d\n",ans); return 0;&#125; 12345678910111213141516171819202122232425262728293031#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define INF 0x3f3f3f3fconst int N=50005;int w[N],d;int main()&#123; int n,m,ans=0; scanf("%d%d",&amp;n,&amp;m); scanf("%d",&amp;w[0]); for(int i=1;i&lt;n;i++)&#123; scanf("%d",&amp;w[i]); w[i]=min(w[i],w[i-1]); &#125; int ji=n; for(int i=0;i&lt;m;i++)&#123; scanf("%d",&amp;d); while(w[ji]&lt;d&amp;&amp;ji&gt;=0)ji--; if(ji&gt;=0)&#123; ans++; ji--; &#125; else break; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1417 天堂里的游戏（博弈）]]></title>
    <url>%2F455762c8%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 ……此处省略一堆没啥用的题面 让我们各自亮出硬币的一面，或正或反。如果我们都是正面，那么我给你A元，如果我们都是反面，我给你B元（A + B为偶数）。剩下的情况你给我（A + B） / 2元就可以了 Noder知道这个游戏他多半要输，可他并不在乎，他只想让自己输的慢一点。 那么你来帮美女计算一下，她选择出正面的概率应该是多少（以最简分数形式输出）？ 关于样例的解释： 美女采取了(3/8,5/8)这个方案，不论Noder采用什么方案，都是不能改变局面的。如果全部出正面，每次的期望收益是 (3+3+3-2-2-2-2-2)/8=-1/8元；如果全部出反面，每次的期望收益也是(-2-2-2+1+1+1+1+1)/8=-1/8元。而任何策略无非只是上面两种策略的线性组合，所以期望还是-1/8元。 Input第1行：一个数T，表示后面用作输入测试的数的数量（1 &lt;= T &lt;= 20)。第2 - T + 1行：每行2个数A, B中间用空格分隔。(1 &lt;= A, B &lt;= 10^9，且A + B为偶数)。 Output输出共T行，对应美女选择正面的概率，以最简分数形式输出，具体请参看输出样例。 Input示例12323 11 3 Output示例123/85/8 题解：样例解释暗示的很清楚了，取最优策略时，对方无论出正面还是反面期望都一样 假设美女出正面概率为x/y，那么若对方全出正面，期望为(x*a-(y-x)*(a+b)/2)/y，若对方全出反面，期望为((y-x)*b-x*(a+b)/2)/y (x*a-(y-x)*(a+b)/2)/y=((y-x)*b-x*(a+b)/2)/y，解得x/y=(a+3b)/(4a+4b)，gcd一下即得答案，注意要开LL 代码：123456789101112131415161718192021222324#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longLL gcd(LL a,LL b)&#123; return b==0?a:gcd(b,a%b);&#125;int main()&#123; int t; LL a,b,x,y,tmp; scanf("%d",&amp;t); while(t--)&#123; scanf("%lld%lld",&amp;a,&amp;b); x=a+3*b;y=4*(a+b); tmp=gcd(x,y); x/=tmp;y/=tmp; printf("%lld/%lld\n",x,y); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1428 活动安排问题（贪心）]]></title>
    <url>%2Ff0e39cec%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 有若干个活动，第i个开始时间和结束时间是[Si,fi)，同一个教室安排的活动之间不能交叠，求要安排所有活动，最少需要几个教室？ Input第一行一个正整数n (n &lt;= 10000)代表活动的个数。第二行到第(n + 1)行包含n个开始时间和结束时间。开始时间严格小于结束时间，并且时间都是非负整数，小于1000000000 Output一行包含一个整数表示最少教室的个数。 Input示例123431 23 42 9 Output示例12 题解：就是问最多重叠区间有几个，一开始没想到什么特优美的做法，就去翻了下评论区，下面这个做法蛮妙的 注意端点重合是不算的，所以cmp函数位置相同的还要对入点出点排下序，出点在前 代码：1234567891011121314151617181920212223242526272829303132#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=10005; struct node&#123; int t,v;&#125;a[N*2];bool cmp(struct node x,struct node y)&#123; if(x.v!=y.v)return x.v&lt;y.v; else return x.t&gt;y.t;&#125;int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%d%d",&amp;a[i].v,&amp;a[i+n].v); a[i].t=0;a[i+n].t=1; &#125; sort(a,a+2*n,cmp); int num=0,ans=0; for(int i=0;i&lt;2*n;i++)&#123; if(a[i].t==0)num++; else num--; ans=max(ans,num); &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1432 独木舟（贪心）]]></title>
    <url>%2Fa74119db%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 n个人，已知每个人体重。独木舟承重固定，每只独木舟最多坐两个人，可以坐一个人或者两个人。显然要求总重量不超过独木舟承重，假设每个人体重也不超过独木舟承重，问最少需要几只独木舟？ Input第一行包含两个正整数n (0&lt;n&lt;=10000)和m (0&lt;m&lt;=2000000000)，表示人数和独木舟的承重。接下来n行，每行一个正整数，表示每个人的体重。体重不超过1000000000，并且每个人的体重不超过m。 Output一行一个整数表示最少需要的独木舟数。 Input示例12343 6123 Output示例12 题解：最多只能坐两个人，先排个序再贪心即可，如果当前最重的加最轻的能上一条船就上，不能上就重的自己先走，然后找下一个重的人 代码：123456789101112131415161718192021222324252627282930#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=10005;LL a[N],m;int n;int main()&#123; scanf("%d%lld",&amp;n,&amp;m); for(int i=0;i&lt;n;i++)scanf("%lld",&amp;a[i]); sort(a,a+n); int cur=0,ans=0; for(int i=n-1;i&gt;=cur;i--)&#123; if(i==cur)&#123; ans++; break; &#125; if(a[i]+a[cur]&lt;=m)&#123; ans++; cur++; &#125; else ans++; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C. Stretching Streamers（NAIPC 2017）（记忆化dp）]]></title>
    <url>%2Fef2a130f%2F</url>
    <content type="text"><![CDATA[12345678910111213141516input4303245output1input4330245output3 题意：n个点有次序的围成一圈，每个点有一个权值a[i]，只有gcd&gt;1的两个数之间才能连线，每个点都要被连到且任意线之间不交叉，求方法数 题解：先n^2跑一遍建个图，表明i，j间能否相连 然后dp(i,j,c)，c表示ij是否相连，考虑某两个点i,j (i&lt;j) 如果ij已经相连，那么i和j-1相连或者j和i+1相连或者不连都是可行的，方案数要先加上dp(i,j-1,0)+dp(i,j-1,1)+dp(i+1,j,0)+dp(i+1,j,1)，(先把这四个处理掉，因为后面相乘没它们什么事)，其余情况是在[i+1,j-2]中找个点m，i连不连m都行，m+1连不连j也都行，两种方法数相乘 如果ij不相连，那么必须有一个m和i相连，（如果i不连m的话往后dp就再没有人和i相连了），然后m连不连j都行继续讨论下去，两种方法数相乘 return的时候记忆化一下，注意一下边界判断和dp顺序，别的好像没啥了 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int p=1e9+7;const int N=305;int a[N],n,ans[N][N][2];bool g[N][N];int gcd(int a,int b)&#123; return b==0?a:gcd(b,a%b);&#125;LL dp(int i,int j,int c)&#123; if(ans[i][j][c]!=-1)return ans[i][j][c]; if(i&gt;j)return 0; if(i==j)return 1; if(c==1&amp;&amp;!g[i][j])return 0; if(j-i==1&amp;&amp;c==1)return g[i][j]?1:0;//加边缘 if(j-i==1&amp;&amp;c==0)return 0; LL res=0; if(c)&#123;//连了ij res=(res+dp(i,j-1,0)+dp(i,j-1,1)+dp(i+1,j,0)+dp(i+1,j,1))%p; for(int m=j-2;m&gt;=i+1;m--)&#123; LL l=dp(i,m,0)+dp(i,m,1),r=dp(m+1,j,0)+dp(m+1,j,1); res=(res+l*r)%p; &#125; &#125; else&#123;//没连ij for(int m=j-1;m&gt;=i+1;m--)&#123; LL l=dp(i,m,1),r=(dp(m,j,0)+dp(m,j,1))%p; res=(res+l*r)%p; &#125; &#125; return ans[i][j][c]=res;&#125;int main()&#123; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d",&amp;a[i]); for(int i=0;i&lt;n;i++) for(int j=i+1;j&lt;n;j++) if(gcd(a[i],a[j])&gt;1)g[i][j]=g[j][i]=true; else g[i][j]=g[j][i]=false; memset(ans,-1,sizeof(ans)); printf("%lld\n",(dp(0,n-1,0)+dp(0,n-1,1))%p); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF 327 C. Magic Five（等比数列求和）]]></title>
    <url>%2F784bc526%2F</url>
    <content type="text"><![CDATA[There is a long plate s containing n digits. Iahub wants to delete some digits (possibly none, but he is not allowed to delete all the digits) to form his “magic number” on the plate, a number that is divisible by 5. Note that, the resulting number may contain leading zeros. Now Iahub wants to count the number of ways he can obtain magic number, modulo 1000000007 (109 + 7). Two ways are different, if the set of deleted positions in s differs. Look at the input part of the statement, s is given in a special form. InputIn the first line you’re given a string a (1 ≤ |a| ≤ 105), containing digits only. In the second line you’re given an integer k (1 ≤ k ≤ 109). The plate s is formed by concatenating k copies of a together. That is n = |a|·k. OutputPrint a single integer — the required number of ways modulo 1000000007 (109 + 7). Examples123456789101112131415input12561output4input139902output528input5552output63 NoteIn the first case, there are four possible ways to make a number that is divisible by 5: 5, 15, 25 and 125. In the second case, remember to concatenate the copies of a. The actual plate is 1399013990. In the third case, except deleting all digits, any choice will do. Therefore there are 26 - 1 = 63 possible ways to delete digits. 题意：给一个字符串a，循环k次，得到数字n 删去其中部分数字，使得到的数字是5的倍数，求方法数 题解：首先结尾是0或5的数字能被5整除，若a[i]=0或5，那么以a[i]结尾的数共有2^(i-1)个 那么k=1的答案很好求，问题在于数字n是a循环k次，而k很大，冷静一下推个公式玩玩 若a[i]=0或5,因为a[i+len],a[i+len*2]……a[i+len*(k-1)]都等于a[i]，所以他们的个数等比数列求和为： 大数取模分子逆元一下，就乘以pow(2^len-1,p-2) 最后，啥玩意儿啊精度问题也太可怕了吧。。wa5了好多发，最后ans三个乘一起再取模是使不得的(#ﾟДﾟ) 必须得前两个先取模，不然就爆LL了 代码：123456789101112131415161718192021222324252627282930313233343536373839#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;#define LL long longconst int p=1e9+7;string a;int k,len;LL ans=0;LL qpow(LL a,LL b)&#123; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=(ans*a)%p; b--; &#125; b/=2; a=a*a%p; &#125; return ans;&#125;int main()&#123; cin&gt;&gt;a; scanf("%d",&amp;k); len=a.length(); for(int i=0;i&lt;len;i++)&#123; if(a[i]=='0'||a[i]=='5') ans=(ans+qpow(2,i))%p; &#125; LL fm=qpow(2,len),fz=qpow(fm,k); fm=(fm-1+p)%p;fz=(fz-1+p)%p; ans=((ans*fz)%p*qpow(fm,p-2))%p; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>逆元</tag>
        <tag>推公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1561 The more, The Better（树型dp，依赖背包）]]></title>
    <url>%2Fc40a717a%2F</url>
    <content type="text"><![CDATA[Time Limit: 6000/2000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others) Problem DescriptionACboy很喜欢玩一种战略游戏，在一个地图上，有N座城堡，每座城堡都有一定的宝物，在每次游戏中ACboy允许攻克M个城堡并获得里面的宝物。但由于地理位置原因，有些城堡不能直接攻克，要攻克这些城堡必须先攻克其他某一个特定的城堡。你能帮ACboy算出要获得尽量多的宝物应该攻克哪M个城堡吗？ Input每个测试实例首先包括2个整数，N,M.(1 &lt;= M &lt;= N &lt;= 200);在接下来的N行里，每行包括2个整数，a,b. 在第 i 行，a 代表要攻克第 i 个城堡必须先攻克第 a 个城堡，如果 a = 0 则代表可以直接攻克第 i 个城堡。b 代表第 i 个城堡的宝物数量, b &gt;= 0。当N = 0, M = 0输入结束。 Output对于每个测试实例，输出一个整数，代表ACboy攻克M个城堡所获得的最多宝物的数量。 Sample Input123456789101112133 20 10 20 37 42 20 10 42 17 17 62 20 0 Sample Output12513 题意：给n个点，要求选m个且权值最大，如果某点被选择则某点父亲也要被选择 题解：m++，加一个0号点，森林变成树，森林的根都是0号点的儿子 dp[i][j]表示选取i点及子树的点，共j个的最大权值，然后在有儿子的节点上01背包dp[x][j]=max(dp[x][j],dp[x][j-k]+dp[son][k]) 代码：1234567891011121314151617181920212223242526272829303132333435#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;const int N=205;int dp[N][N],n,m,a,b;vector&lt;int&gt;g[N];void dfs(int x)&#123; for(int i=0;i&lt;g[x].size();i++)&#123; int son=g[x][i]; if(g[son].size())dfs(son); for(int j=m;j&gt;1;j--) for(int k=1;k&lt;j;k++) dp[x][j]=max(dp[x][j],dp[x][j-k]+dp[son][k]); &#125;&#125;int main()&#123; while(scanf("%d%d",&amp;n,&amp;m)!=EOF&amp;&amp;(n&amp;&amp;m))&#123; memset(dp,0,sizeof(dp)); for(int i=0;i&lt;=n;i++)g[i].clear(); m++; for(int i=1;i&lt;=n;i++)&#123; scanf("%d%d",&amp;a,&amp;b); g[a].push_back(i); for(int j=1;j&lt;=m;j++)dp[i][j]=b; &#125; dfs(0); printf("%d\n",dp[0][m]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1433 0和5（CF 352 A. Jeff and Digits）]]></title>
    <url>%2F50df051%2F</url>
    <content type="text"><![CDATA[题目来源： CodeForceshttp://codeforces.com/problemset/problem/352/A 基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 小K手中有n张牌，每张牌上有一个一位数的数，这个字数不是0就是5。小K从这些牌在抽出任意张（不能抽0张），排成一行这样就组成了一个数。使得这个数尽可能大，而且可以被90整除。 注意： 1.这个数没有前导0， 2.小K不需要使用所有的牌。 Input每个测试数据输入共2行。第一行给出一个n，表示n张牌。(1&lt;=n&lt;=1000)第二行给出n个整数a[0],a[1],a[2],…,a[n-1] ，a[i]是0或5 ，表示牌上的数字。 Output共一行，表示由所给牌组成的可以被90整除的最大的数，如果没有答案则输出”-1”（没有引号） Input示例1245 0 5 0 Output示例10 题解：水题。。然而wa了十几发。。原地爆炸。。 各项和相加是9的倍数的数才能被9整除 证明： 先假设一个三位数abc能被9整除，即有100*a+10*b+c=9k，移项得：a+b+c=9k-99a-9b=9(k-11a-b)，即各项和能被9整除 再假设一个n位数ab……yz，有10……0*a+……+10y+z=9k，a+b+……+z=9k-99……9a-……-9y，各项和能被9整除 所以要被90整除的话，必须有一个0在末尾，num5的个数贪心的取能取到的最大的9的倍数 代码：12345678910111213141516171819202122232425#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int n,num5=0,x,num0; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;x); if(x==5)num5++; &#125; num0=n-num5; if(num0==0)puts("-1"); else if(num5&lt;9)puts("0"); else&#123; num5=(int)(num5/9)*9; for(int i=0;i&lt;num5;i++)printf("5"); for(int i=0;i&lt;num0;i++)printf("0"); printf("\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1629 B君的圆锥（推公式，三分）]]></title>
    <url>%2Fe5ffcbea%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 B君要用一个表面积为S的圆锥将白山云包起来。 B君希望包住的白山云体积尽量大，B君想知道体积最大可以是多少。 注意圆锥的表面积包括底面和侧面。 Input一行一个整数，表示表面积S。(1 &lt;= S &lt;= 10^9) Output一行一个实数，表示体积。 Input示例18 Output示例11.504506 题解：懒得打公式了。。直接写吧 这是个上凸函数，所以还有一种方法是三分，因为没有写过三分的题所以虽然上面那种推公式的方法很方便，不过还是去写了三分法（我记得之前有个三分的题没补来着(#ﾟДﾟ)然而忘了什么题了） 初始三分的时候，要注意保证半径的合法性l=0,r=sqrt(s/(2*pai))，也就是极限情况h=∞或h=0 两种方法跑的都很快快 代码：123456789101112131415#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define pai M_PIint main()&#123; double s,rr; scanf("%lf",&amp;s); rr=s/(4*pai); printf("%lf\n",(double)sqrt(rr*s*s-2*pai*s*rr*rr)/3); return 0;&#125; 123456789101112131415161718192021222324#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define eps 1e-6#define pai M_PIdouble s;double v(double r)&#123; return (double)sqrt(r*r*s*s-2*pai*s*r*r*r*r)/3;&#125;int main()&#123; scanf("%lf",&amp;s); double l=0,r=sqrt(s/(2*pai)),m,rm; while(r-l&gt;eps)&#123; m=(l+r)/2.0;rm=(m+r)/2.0; if(v(m)&gt;=v(rm))r=rm; else l=m; &#125; printf("%lf\n",v(l)); return 0;&#125;]]></content>
      <categories>
        <category>计算几何</category>
      </categories>
      <tags>
        <tag>推公式</tag>
        <tag>三分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1413 权势二进制（CF 538 B. Quasi Binary）]]></title>
    <url>%2F73d62e33%2F</url>
    <content type="text"><![CDATA[题目来源： CodeForceshttp://codeforces.com/problemset/problem/538/B 基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 一个十进制整数被叫做权势二进制，当他的十进制表示的时候只由0或1组成。例如0，1，101，110011都是权势二进制而2，12，900不是。 当给定一个n的时候，计算一下最少要多少个权势二进制相加才能得到n。 Input单组测试数据。第一行给出一个整数n (1&lt;=n&lt;=1,000,000) Output输出答案占一行。 Input示例19 Output示例19 题解：这个题放二级里有点太水了。。 就是取所有位中出现的最大的那个数字 然后写了一下cf原题，原题里还有一个要求是要输出这些权值二进制。。写的一点都不优美的代码也放下面了0.0 代码：123456789101112131415#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; string s; cin&gt;&gt;s; int ans=1,len=s.length(); for(int i=0;i&lt;len;i++)ans=max(ans,s[i]-'0'); printf("%d\n",ans); return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int f(int w)&#123; if(w==1)return 1; else if(w==2)return 10; else if(w==3)return 100; else if(w==4)return 1000; else if(w==5)return 10000; else if(w==6)return 100000; else return 1000000;&#125;int main()&#123; int n,wei,tmp,ans[11],ji=0,res; scanf("%d",&amp;n); while(n)&#123; wei=0;tmp=n;res=0; while(tmp)&#123; tmp/=10;wei++; &#125; tmp=n; for(int i=wei;i&gt;0;i--)&#123; if(tmp/f(i))&#123; tmp-=f(i);res+=f(i); &#125; if(tmp/f(i))tmp%=f(i); &#125; n-=res; ans[ji++]=res; &#125; printf("%d\n",ji); for(int i=0;i&lt;ji-1;i++)printf("%d ",ans[i]); printf("%d\n",ans[ji-1]); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1489 蜥蜴和地下室（CF 6 D. Lizards and Basements 2）]]></title>
    <url>%2F61acc2f3%2F</url>
    <content type="text"><![CDATA[题目来源： CodeForceshttp://codeforces.com/contest/6/problem/D 基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 哈利喜欢玩角色扮演的电脑游戏《蜥蜴和地下室》。此时，他正在扮演一个魔术师。在最后一关，他必须和一排的弓箭手战斗。他唯一能消灭他们的办法是一个火球咒语。如果哈利用他的火球咒语攻击第i个弓箭手（他们从左到右标记），这个弓箭手会失去a点生命值。同时，这个咒语使与第i个弓箭手左右相邻的弓箭手（如果存在）分别失去b(1 ≤ b &lt; a ≤ 10)点生命值。 因为两个端点的弓箭手（即标记为1和n的弓箭手）与你相隔较远，所以火球不能直接攻击他们。但是哈利能用他的火球攻击其他任何弓箭手。 每个弓箭手的生命值都已知。当一个弓箭手的生命值小于0时，这个弓箭手会死亡。请求出哈利杀死所有的敌人所需使用的最少的火球数。 如果弓箭手已经死亡，哈利仍旧可以将他的火球扔向这个弓箭手。 Input第一行包含3个整数 n, a, b (3 ≤ n ≤ 10; 1 ≤ b &lt; a ≤ 10)，第二行包含n个整数——h1，h2，…，hn (1 ≤ hi ≤ 15)， hi 是第i个弓箭手所拥有的生命力。 Output以一行输出t——所需要的最少的火球数。 Input示例123 2 12 2 2 Output示例13 题解：因为不能直接打1和n，所以开头先通过打2和n-1来打爆1和n，然后剩下的[2,n-1]dfs，dfs(cur,num)表示直接打第cur个，那么对于cur-1来说只能用b打爆，而对于cur来说可以用a打爆，也可以通过打cur+1来用b打爆，枚举[x,y]次数即可 代码：12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;#define INF 0x3f3f3f3fint n,a,b,h[15],res;void dfs(int cur,int num)&#123; if(cur==n)&#123; res=min(res,num); return; &#125; if(h[cur-1]&lt;0)dfs(cur+1,num); int x=h[cur-1]/b+1,y=h[cur]/a+1; if(x&lt;0)x=0; for(int i=x;i&lt;=y;i++)&#123; h[cur-1]-=i*b;h[cur]-=i*a;h[cur+1]-=i*b; dfs(cur+1,num+i); h[cur-1]+=i*b;h[cur]+=i*a;h[cur+1]+=i*b; &#125;&#125;int main()&#123; scanf("%d%d%d",&amp;n,&amp;a,&amp;b); for(int i=1;i&lt;=n;i++)scanf("%d",&amp;h[i]); int num,ans=0; res=INF; num=h[1]/b+1;ans+=num; h[1]-=num*b;h[2]-=num*a;h[3]-=num*b; if(h[n]&gt;=0)&#123; num=h[n]/b+1;ans+=num; h[n]-=num*b;h[n-1]-=num*a; h[n-2]-=num*b; &#125; dfs(2,0); printf("%d\n",res+ans); return 0;&#125;]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 5983 Pocket Cube（模拟）]]></title>
    <url>%2F9fe4182d%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others) Problem DescriptionThe Pocket Cube, also known as the Mini Cube or the Ice Cube, is the 2 × 2 × 2 equivalence of a Rubik’s Cube. The cube consists of 8 pieces, all corners.Each piece is labeled by a three dimensional coordinate (h, k, l) where h, k, l ∈ {0, 1}. Each of the six faces owns four small faces filled with a positive integer. For each step, you can choose a certain face and turn the face ninety degrees clockwise or counterclockwise. You should judge that if one can restore the pocket cube in one step. We say a pocket cube has been restored if each face owns four same integers. InputThe first line of input contains one integer N(N ≤ 30) which is the number of test cases.For each test case, the first line describes the top face of the pocket cube, which is the common 2 × 2 face of pieceslabelled by (0, 0, 1),(0, 1, 1),(1, 0, 1),(1, 1, 1). Four integers are given corresponding to the above pieces.The second line describes the front face, the common face of (1, 0, 1),(1, 1, 1),(1, 0, 0),(1, 1, 0). Four integers aregiven corresponding to the above pieces.The third line describes the bottom face, the common face of (1, 0, 0),(1, 1, 0),(0, 0, 0),(0, 1, 0). Four integers aregiven corresponding to the above pieces.The fourth line describes the back face, the common face of (0, 0, 0),(0, 1, 0),(0, 0, 1),(0, 1, 1). Four integers aregiven corresponding to the above pieces.The fifth line describes the left face, the common face of (0, 0, 0),(0, 0, 1),(1, 0, 0),(1, 0, 1). Four integers are givencorresponding to the above pieces.The six line describes the right face, the common face of (0, 1, 1),(0, 1, 0),(1, 1, 1),(1, 1, 0). Four integers are givencorresponding to the above pieces.In other words, each test case contains 24 integers a, b, c to x. You can flat the surface to get the surface developmentas follows. 1234567891011121314151617+ - + - + - + - + - + - +| q | r | a | b | u | v |+ - + - + - + - + - + - +| s | t | c | d | w | x |+ - + - + - + - + - + - + | e | f | + - + - + | g | h | + - + - + | i | j | + - + - + | k | l | + - + - + | m | n | + - + - + | o | p | + - + - + OutputFor each test case, output YES if can be restored in one step, otherwise output NO. Sample Input1234567891011121314151617181920212223242541 1 1 12 2 2 23 3 3 34 4 4 45 5 5 56 6 6 66 6 6 61 1 1 12 2 2 23 3 3 35 5 5 54 4 4 41 4 1 42 1 2 13 2 3 24 3 4 35 5 5 56 6 6 61 3 1 32 4 2 43 1 3 14 2 4 25 5 5 56 6 6 6 Sample Output1234YESYESYESNO Source2016ACM/ICPC亚洲区青岛站-重现赛（感谢中国石油大学） 题意：给一个二阶魔方，问能否一部还原 题解：六个面六种转法，顺时针一次或逆时针一次（即顺时针三次），暴力模拟，特判不用转的情况 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;int a[7][5],b[7][5];bool ok()&#123; int flag=1; for(int i=1;i&lt;=6;i++)&#123; int tmp=b[i][1]; if(!flag)break; for(int j=2;j&lt;=4;j++)&#123; if(b[i][j]!=tmp)&#123; flag=0; break; &#125; &#125; &#125; return flag;&#125;void zhuan(int m)&#123; int t1,t2; if(m==1)&#123; t1=b[2][1];t2=b[2][2]; b[2][1]=b[5][2];b[2][2]=b[5][4]; b[5][2]=b[4][4];b[5][4]=b[4][3]; b[4][4]=b[6][3];b[4][3]=b[6][1]; b[6][3]=t1;b[6][1]=t2; &#125; else if(m==2)&#123; t1=b[1][3];t2=b[1][4]; b[1][3]=b[6][3];b[1][4]=b[6][4]; b[6][3]=b[3][2];b[6][4]=b[3][1]; b[3][2]=b[5][3];b[3][1]=b[5][4]; b[5][3]=t1;b[5][4]=t2; &#125; else if(m==3)&#123; t1=b[2][3];t2=b[2][4]; b[2][3]=b[6][4];b[2][4]=b[6][2]; b[6][4]=b[4][2];b[6][2]=b[4][1]; b[4][2]=b[5][1];b[4][1]=b[5][3]; b[5][1]=t1;b[5][3]=t2; &#125; else if(m==4)&#123; t1=b[1][2];t2=b[1][1]; b[1][2]=b[6][2];b[1][1]=b[6][1]; b[6][2]=b[3][3];b[6][1]=b[3][4]; b[3][3]=b[5][2];b[3][4]=b[5][1]; b[5][2]=t1;b[5][1]=t2; &#125; else if(m==5)&#123; t1=b[1][1];t2=b[1][3]; b[1][1]=b[4][1];b[1][3]=b[4][3]; b[4][1]=b[3][1];b[4][3]=b[3][3]; b[3][1]=b[2][1];b[3][3]=b[2][3]; b[2][1]=t1;b[2][3]=t2; &#125; else if(m==6)&#123; t1=b[1][4];t2=b[1][2]; b[1][4]=b[2][4];b[1][2]=b[2][2]; b[2][4]=b[3][4];b[2][2]=b[3][2]; b[3][4]=b[4][4];b[3][2]=b[4][2]; b[4][4]=t1;b[4][2]=t2; &#125;&#125;int main()&#123; int t,flag; scanf("%d",&amp;t); while(t--)&#123; flag=0; for(int i=1;i&lt;=6;i++)&#123; for(int j=1;j&lt;=4;j++) scanf("%d",&amp;a[i][j]); &#125; for(int j=1;j&lt;=6;j++) for(int k=1;k&lt;=4;k++) b[j][k]=a[j][k]; if(ok())&#123; puts("YES"); continue; &#125; for(int i=1;i&lt;=6;i++)&#123; for(int j=1;j&lt;=6;j++) for(int k=1;k&lt;=4;k++) b[j][k]=a[j][k]; zhuan(i); if(ok())&#123; flag=1; break; &#125; zhuan(i);zhuan(i); if(ok())&#123; flag=1; break; &#125; &#125; if(flag)puts("YES"); else puts("NO"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>模拟</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1521 一维战舰（CF 567 D. One-Dimensional Battle Ships）]]></title>
    <url>%2Fca3f6ac0%2F</url>
    <content type="text"><![CDATA[题目来源： CodeForceshttp://codeforces.com/contest/567/problem/D 基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 爱丽丝和鲍博喜欢玩一维战舰的游戏。他们在一行有n个方格的纸上玩这个游戏（也就是1×n的表格）。 在游戏开始的时候，爱丽丝放k个战舰在这个表格中，并不把具体位置告诉鲍博。每一只战舰的形状是 1×a 的长方形（也就是说，战舰会占据a个连续的方格）。这些战舰不能相互重叠，也不能相接触。 然后鲍博会做一系列的点名。当他点到某个格子的时候，爱丽丝会告诉他那个格子是否被某只战舰占据。如果是，就说hit，否则就说miss。 但是这儿有一个问题！爱丽丝喜欢撒谎。他每次都会告诉鲍博miss。 请你帮助鲍博证明爱丽丝撒谎了，请找出哪一步之后爱丽丝肯定撒谎了。 Input单组测试数据。第一行有三个整数n,k和a(1≤n,k,a≤2*10^5)，表示表格的大小，战舰的数目，还有战舰的大小。输入的n,k,a保证是能够在1×n的表格中放入k只大小为a的战舰，并且他们之间不重叠也不接触。第二行是一个整数m(1≤m≤n)，表示鲍博的点名次数。第三行有m个不同的整数x1,x2,…,xm，xi是鲍博第i次点名的格子编号。格子从左到右按照1到n编号。 Output输出一个整数，表示最早一次能够证明爱丽丝一定撒谎的点名编号。如果不能证明，输出-1。点名的编号依次从1到m编号。 Input示例123456789样例111 3 354 8 6 1 11样例25 1 321 5 Output示例12345样例输出13样例输出2-1 题解：脑子不转了已经。。半天没想通0.0 还是纸上模拟一下靠谱 因为战舰不能接触，也就是说两个战舰中间要有一个空格，所以1xn的格子能放的最多战舰数是(n+1)/(a+1)，然后如果当前格子i是miss，那么从i向左右拓展，知道遇到被标记的分隔l,r，然后先减去这个l～r区间内能放的战舰数，再加上l～x和x～r两个区间内能放的战舰数 代码：12345678910111213141516171819202122232425262728293031323334#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;const int N=200005;bool vis[N];int main()&#123; int n,k,a,m,c; scanf("%d%d%d%d",&amp;n,&amp;k,&amp;a,&amp;m); memset(vis,false,sizeof(vis)); vis[0]=vis[n+1]=true; int num=(n+1)/(a+1),l,r,flag=1; for(int i=0;i&lt;m;i++)&#123; scanf("%d",&amp;c); vis[c]=true; if(flag)&#123; for(l=c-1;l&gt;=0&amp;&amp;!vis[l];l--); for(r=c+1;r&lt;=n&amp;&amp;!vis[r];r++); int tmp=(r-l)/(a+1); num-=tmp; num+=(c-l)/(a+1)+(r-c)/(a+1); if(num&lt;k)&#123; flag=0; printf("%d\n",i+1); &#125; &#125; &#125; if(flag)printf("-1\n"); return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C. Greetings!（枚举，贪心，dfs） -- The North American Invitational Programming Contest 2016]]></title>
    <url>%2F9ee158e1%2F</url>
    <content type="text"><![CDATA[题意：有n种卡片，每种卡片长/宽/个数分别为wi，hi，qi 有k种大小的信封，大小任意，要求把卡片装到信封里，定义浪费值为信封大小减去卡片大小，求最小的浪费值 题解：不同的卡片放在同一种信封里信封的最优大小一般不同，所以首先枚举2^n个状态，预处理出每种状态的浪费值，肯定是贪心的取当前最大的长和宽作为这个信封的长和宽，浪费值存入st[i] dfs(now,k)和ans[now][k]代表状态now的卡片装k种信封的最小浪费值 12for(int i=now;i&gt;0;i=(i-1)&amp;now) res=min(res,st[i]+dfs(now-i,k-1)); i=(i-1)&amp;now就可以枚举完k-&gt;k-1的所有情况了，比如当前now=11001，那么k-1下共有11000,10001,10000,01001,01000,00001这六种情况，取最小的那一种返回，继续dfs至now=0||k=1为止 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=15;const LL INF=9223372036854775807;LL st[(1&lt;&lt;N)],ans[(1&lt;&lt;N)][16];struct aaa&#123; LL w,h,q;&#125;a[N];LL dfs(int now,int k)&#123; if(ans[now][k]&gt;=0)return ans[now][k]; if(k==1)&#123; ans[now][k]=st[now]; return ans[now][k]; &#125; if(now==0)return 0; LL res=INF; for(int i=now;i&gt;0;i=(i-1)&amp;now) res=min(res,st[i]+dfs(now-i,k-1)); ans[now][k]=res; return res;&#125;int main()&#123; int n,k; scanf("%d%d",&amp;n,&amp;k); for(int i=0;i&lt;n;i++) scanf("%lld%lld%lld",&amp;a[i].w,&amp;a[i].h,&amp;a[i].q); memset(ans,-1,sizeof(ans)); st[0]=0; for(int i=1;i&lt;(1&lt;&lt;n);i++)&#123; LL chang=0,kuan=0; st[i]=0; for(int j=0;j&lt;n;j++)&#123; if(i&amp;(1&lt;&lt;j))&#123; chang=max(chang,a[j].w); kuan=max(kuan,a[j].h); &#125; &#125; for(int j=0;j&lt;n;j++)&#123; if(i&amp;(1&lt;&lt;j)) st[i]+=a[j].q*(chang*kuan-a[j].w*a[j].h); &#125; &#125; printf("%lld\n",dfs((1&lt;&lt;n)-1,k)); return 0;&#125;]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>dfs</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1596 搬货物（CF 587 A. Duff and Weight Lifting）]]></title>
    <url>%2F6e572fe1%2F</url>
    <content type="text"><![CDATA[题目来源： CodeForceshttp://codeforces.com/contest/587/problem/A 基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 现在有n个货物，第i个货物的重量是 2^(wi) 。每次搬的时候要求货物重量的总和是一个2的幂。问最少要搬几次能把所有的货物搬完。 样例解释： 1，1，2作为一组。 3，3作为一组。 Input单组测试数据。第一行有一个整数n (1≤n≤10^6)，表示有几个货物。第二行有n个整数 w1,w2,…,wn，(0≤wi≤10^6)。 Output输出最少的运货次数。 Input示例123样例输入151 1 2 3 3 Output示例12样例输出12 题解：一开始不会写。。我好菜啊咋就想不到呢。。看了别人的题解恍然大悟。。其实是个水题。。 二进制，模拟一下就知道两个1可以变成一个2，两个2可以变成一个3 …… 从小到大以此类推，扫一遍的o(n)做法 注意数组开1e6+5是不够的，wa了两个测试点，比如极限数据1e6个1e6，那么向后推要到log2(1e6)，大概是2^20左右，所以数组开大一点就行了 然后讨论区说这题卡输入输出，自己加个挂就行 代码：123456789101112131415161718192021222324252627282930313233#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=1000025;int w[N];void read(int &amp;x)&#123; char ch=getchar();x=0; for(;ch&lt;'0'||ch&gt;'9';ch=getchar()); for(;ch&gt;='0'&amp;&amp;ch&lt;='9';ch=getchar())x=x*10+ch-'0';&#125;int main()&#123; int n,c; scanf("%d",&amp;n); memset(w,0,sizeof(w)); while(n--)&#123; read(c); w[c]++; &#125; int ans=0; for(int i=0;i&lt;N;i++)&#123; if(w[i]&gt;1)&#123; w[i+1]+=w[i]/2; w[i]%=2; &#125; if(w[i]==1)ans++; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>模拟</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1873 初中的算术（java高精度）]]></title>
    <url>%2Fff888e9d%2F</url>
    <content type="text"><![CDATA[Input示例1234样例输入10.4321 20样例输入21.0100 12 Output示例1234样例输出1.00000005148554641076956121994511276767154838481760200726351203835429763013462401样例输出21.126825030131969720661201 又水了一题 java虽然没有很快 但是它写的快呀╮(￣▽￣””)╭ 代码：123456789101112131415161718import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigDecimal a=cin.nextBigDecimal(); int n=cin.nextInt(); a=a.pow(n); String res=a.stripTrailingZeros().toPlainString(); if(res.startsWith("0"))&#123; res=res.substring(1); &#125; System.out.println(res); cin.close(); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1649 齐头并进（CF 601 A. The Two Routes）]]></title>
    <url>%2Fb8d3ced1%2F</url>
    <content type="text"><![CDATA[题目来源： CodeForceshttp://codeforces.com/contest/601/problem/A 基准时间限制：1 秒 空间限制：131072 KB 分值: 10 难度：2级算法题 在一个叫奥斯汀的城市，有n个小镇（从1到n编号），这些小镇通过m条双向火车铁轨相连。当然某些小镇之间也有公路相连。为了保证每两个小镇之间的人可以方便的相互访问，市长就在那些没有铁轨直接相连的小镇之间建造了公路。在两个直接通过公路或者铁路相连的小镇之间移动，要花费一个小时的时间。 现在有一辆火车和一辆汽车同时从小镇1出发。他们都要前往小镇n，但是他们中途不能同时停在同一个小镇（但是可以同时停在小镇n）。火车只能走铁路，汽车只能走公路。 现在请来为火车和汽车分别设计一条线路；所有的公路或者铁路可以被多次使用。使得火车和汽车尽可能快的到达小镇n。即要求他们中最后到达小镇n的时间要最短。输出这个最短时间。(最后火车和汽车可以同时到达小镇n，也可以先后到达。) 样例解释： 在样例中，火车可以按照 1⟶3⟶4 行驶，汽车 1⟶2⟶4 按照行驶，经过2小时后他们同时到过小镇4。 Input单组测试数据。第一行有两个整数n 和 m (2≤n≤400, 0≤m≤n*(n-1)/2) ，表示小镇的数目和铁轨的数目。接下来m行，每行有两个整数u 和 v，表示u和v之间有一条铁路。(1≤u,v≤n, u≠v)。输入中保证两个小镇之间最多有一条铁路直接相连。 Output输出一个整数，表示答案，如果没有合法的路线规划，输出-1。 Input示例1234 21 33 4 Output示例12 题解：仔细读题会发现“为了保证每两个小镇之间的人可以方便的相互访问，市长就在那些没有铁轨直接相连的小镇之间建造了公路”，所以其实不会出现题中那个“中途不能同时停在同一个小镇”的问题，要么铁路一步直达公路绕路，要么铁路不能一步直达公路必一步直达，想通这点就好做了 先判断一下公路1-n有无一步直达，然后跑一遍dijkstra即可 去榜里找了个有注释的Dijkstra的模版。。 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=505;const int INF=0x3f3f3f3f;int d[N],a[N][N];bool vis[N];int n,m;void dijkstra()&#123; memset(d,INF,sizeof(d)); memset(vis,false,sizeof(vis)); d[1]=0; int minn,tmp; for(int i=0;i&lt;n;i++)&#123; minn=INF; for(int j=1;j&lt;=n;j++)&#123; if(!vis[j]&amp;&amp;d[j]&lt;minn)&#123; tmp=j; minn=d[j]; &#125; &#125; vis[tmp]=true; for(int j=1;j&lt;=n;j++)&#123; if(!vis[j]&amp;&amp;a[tmp][j]+d[tmp]&lt;d[j]) d[j]=a[tmp][j]+d[tmp]; &#125; &#125;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); memset(a,INF,sizeof(a)); int u,v; for(int i=0;i&lt;m;i++)&#123; scanf("%d%d",&amp;u,&amp;v); a[u][v]=1; a[v][u]=1; &#125; if(a[1][n]==1)&#123; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=n;j++)&#123; a[i][j]=(a[i][j]==1?INF:1); &#125; &#125; &#125; dijkstra(); printf("%d\n",d[n]==INF?-1:d[n]); return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>dijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1003 阶乘后面0的数量（勒让德定理）]]></title>
    <url>%2F37192e8b%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 n的阶乘后面有多少个0？6的阶乘 = 1*2*3*4*5*6 = 720，720后面有1个0。 Input一个数N(1 &lt;= N &lt;= 10^9) Output输出0的数量 Input示例15 Output示例11 题解：n是1e9，一开始的做法是暴力枚举所有数，先除以10，再算因数2的个数，再算因数5的个数，因为2*5=10，果不其然的又t又wa了。。 然后看了讨论区 知道了一个叫勒让德定理的东西 证明如下：（其实直接理解也行。。还是蛮好想的） 有了这个东西只要计算因数2和因数5的个数然后取小的那个即可 然后因为因数2肯定比5多，所以最后其实只要算因数5的个数即可 代码：123456789101112131415161718#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int n,num5=0,tmp=0; scanf("%d",&amp;n); tmp=5; while(tmp&lt;=n)&#123; num5+=n/tmp; tmp*=5; &#125; printf("%d\n",num5); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>勒让德定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1002 数塔取数问题（dp）]]></title>
    <url>%2Fdbf07d5c%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 一个高度为N的由正整数组成的三角形，从上走到下，求经过的数字和的最大值。每次只能走到下一层相邻的数上，例如从第3层的6向下走，只能走到第4层的2或9上。 1234 5 8 4 3 6 97 2 9 5 例子中的最优方案是：5 + 8 + 6 + 9 = 28 Input第1行：N，N为数塔的高度。(2 &lt;= N &lt;= 500)第2 - N + 1行：每行包括1层数塔的数字，第2行1个数，第3行2个数……第k+1行k个数。数与数之间用空格分隔（0 &lt;= A[i] &lt;= 10^5) 。 Output输出最大值 Input示例12345458 43 6 97 2 9 5 Output示例128 题解：dp水题 从上一层的状态递推下一层 状态转移方程为 dp[i][j]=max(dp[i-1][j-1],dp[i-1][j])+a[i][j] 代码：12345678910111213141516171819202122232425262728293031#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=505;int a[N][N],dp[N][N];int main()&#123; int n; scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=i;j++)&#123; scanf("%d",&amp;a[i][j]); &#125; &#125; memset(dp,0,sizeof(dp)); dp[1][1]=a[1][1]; for(int i=2;i&lt;=n;i++)&#123; for(int j=1;j&lt;=i;j++)&#123; dp[i][j]=max(dp[i-1][j-1],dp[i-1][j])+a[i][j]; &#125; &#125; int ans=dp[n][1]; for(int i=2;i&lt;=n;i++)&#123; ans=max(ans,dp[n][i]); &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1001 数组中和等于K的数对]]></title>
    <url>%2Ff1a4e5b1%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 给出一个整数K和一个无序数组A，A的元素为N个互不相同的整数，找出数组A中所有和等于K的数对。例如K = 8，数组A：{-1,6,5,3,4,2,9,0,8}，所有和等于8的数对包括(-1,9)，(0,8)，(2,6)，(3,5)。 Input第1行：用空格隔开的2个数，K N，N为A数组的长度。(2 &lt;= N &lt;= 50000，-10^9 &lt;= K &lt;= 10^9)第2 - N + 1行：A数组的N个元素。（-10^9 &lt;= A[i] &lt;= 10^9) Output第1 - M行：每行2个数，要求较小的数在前面，并且这M个数对按照较小的数升序排列。如果不存在任何一组解则输出：No Solution。 Input示例123456789108 9-165342908 Output示例1234-1 90 82 63 5 题解：先排序，然后选定a[i]，用一个指针从后往前寻找是否存在对应的a[j] 代码：123456789101112131415161718192021222324252627#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=50005;int a[N];int main()&#123; int k,n; scanf("%d%d",&amp;k,&amp;n); for(int i=0;i&lt;n;i++)scanf("%d",&amp;a[i]); sort(a,a+n); int cur=n-1,flag=0; for(int i=0;i&lt;n;i++)&#123; if(cur&gt;i)&#123; while(a[i]+a[cur]&gt;k)cur--; if(a[i]+a[cur]==k&amp;&amp;cur!=i)&#123; flag=1; printf("%d %d\n",a[i],a[cur]); &#125; &#125; &#125; if(!flag)printf("No Solution"); return 0;&#125;]]></content>
      <categories>
        <category>模拟</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF 1029 F. Multicolored Markers（暴力）]]></title>
    <url>%2F531fe264%2F</url>
    <content type="text"><![CDATA[题意：给a个红色方格，b个紫色方格，要求拼成矩形且红色块或紫色块中有一个也为矩形，看题目里的图应该比较清楚吧 题解：写了个最垃圾的做法。。直接暴力枚举0.0 感觉大家好像有一些妙妙的做法300ms+就过了。。我这个跑了1200ms+啊啊啊啊啊留下了咸鱼的泪水 代码：123456789101112131415161718192021222324252627282930313233343536#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;#define LL long longvector&lt;LL&gt;v;LL getnum(LL a,LL b)&#123; v.clear(); LL ans=(a+b+1)*2; for(LL i=1;i*i&lt;=a;i++) if(a%i==0)v.push_back(i); int ji=v.size(); for(LL i=1;i*i&lt;=(a+b);i++)&#123; if((a+b)%i==0)&#123; for(int j=0;j&lt;ji;j++)&#123; if(v[j]&lt;=i)&#123; if(a/v[j]&lt;=(a+b)/i) ans=min(ans,2*(i+(a+b)/i)); &#125; else break; &#125; &#125; &#125; return ans;&#125;int main()&#123; LL a,b; scanf("%lld%lld",&amp;a,&amp;b); LL res=min(getnum(a,b),getnum(b,a)); printf("%lld\n",res); return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[51nod 1004 n^n的末位数字（快速幂）]]></title>
    <url>%2Fa20ca391%2F</url>
    <content type="text"><![CDATA[题目来源： Author Ignatius.L (Hdu 1061)基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题给出一个整数N，输出N^N（N的N次方）的十进制表示的末位数字。 Input一个数N（1 &lt;= N &lt;= 10^9） Output输出N^N的末位数字 Input示例113 Output示例13 水一发快速幂 代码：1234567891011121314151617181920212223242526#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longLL qpow(LL a,LL b,int p)&#123; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=(ans*a)%p; b--; &#125; b/=2; a=a*a%p; &#125; return ans;&#125;int main()&#123; LL n; scanf("%lld",&amp;n); printf("%lld\n",qpow(n,n,10)); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1080 两个数的平方和]]></title>
    <url>%2F22830a9e%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 给出一个整数N，将N表示为2个整数i与j的平方之和（i &lt;= j)，如果有多种表示，按照i的递增序输出。例如：N = 130，130 = 3^2 + 11^2 = 7^2 + 9^2（注：3^2 + 11^2同11^2 + 3^2算1种） Input一个数N(1 &lt;= N &lt;= 10^9) Output共K行：每行2个数，i j，表示N = i^2 + j^2（0 &lt;= i &lt;= j)。如果无法分解为2个数的平方和，则输出No Solution Input示例1130 Output示例123 117 9 题解：水题，最大也就根号n 代码：12345678910111213141516171819202122#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int n; scanf("%d",&amp;n); int m=sqrt(n),flag=0; for(int i=0;i&lt;=m;i++)&#123; int tmp=sqrt(n-i*i); if(tmp&lt;i)break; if(tmp*tmp+i*i==n)&#123; printf("%d %d\n",i,tmp); flag=1; &#125; &#125; if(!flag)printf("No Solution\n"); return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[51nod 1015 水仙花数]]></title>
    <url>%2F61030f3f%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 水仙花数是指一个 n 位数 ( n &gt;= 3 )，它的每个位上的数字的 n 次幂之和等于它本身。（例如：1^3 + 5^3 + 3^3 = 153）给出一个整数M，求 &gt;= M的最小的水仙花数。 Input一个整数M（10 &lt;= M &lt;= 1000） Output输出&gt;= M的最小的水仙花数 Input示例199 Output示例1153 水。。 代码：123456789101112131415161718192021222324252627#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int m; scanf("%d",&amp;m); m=max(m,100); for(int i=m;;i++)&#123; int sum=0,x=i,a,n; if(x/1000)n=4; else if(x/100)n=3; while(x)&#123; a=x%10; sum+=pow(a,n); x/=10; &#125; if(sum==i)&#123; printf("%d\n",i); return 0; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[51nod 1082 与7无关的数（打表）]]></title>
    <url>%2Fcdd10d6d%2F</url>
    <content type="text"><![CDATA[题目来源： 有道难题基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 一个正整数，如果它能被7整除，或者它的十进制表示法中某个位数上的数字为7，则称其为与7相关的数。求所有小于等于N的与7无关的正整数的平方和。例如：N = 8，&lt;= 8与7无关的数包括：1 2 3 4 5 6 8，平方和为：155。 Input第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 1000)第2 - T + 1行：每行1个数N。（1 &lt;= N &lt;= 10^6) Output共T行，每行一个数，对应T个测试的计算结果。 Input示例123456545678 Output示例1234530559191155 题解：暴力打个表然后输出 代码：1234567891011121314151617181920212223242526272829303132#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=1e6+5;LL ans[N];bool f(int x)&#123; if(x%7==0)return false; while(x)&#123; if(x%10==7)return false; x/=10; &#125; return true;&#125;int main()&#123; int t,n; LL res=0; scanf("%d",&amp;t); for(int i=1;i&lt;=1e6;i++)&#123; if(f(i))res+=(LL)i*i; ans[i]=res; &#125; while(t--)&#123; scanf("%d",&amp;n); printf("%lld\n",ans[n]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[51nod 1083 矩阵取数问题（dp)]]></title>
    <url>%2F2d58815c%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 一个N*N矩阵中有不同的正整数，经过这个格子，就能获得相应价值的奖励，从左上走到右下，只能向下向右走，求能够获得的最大价值。例如：3 * 3的方格。 1231 3 32 1 32 2 1 能够获得的最大价值为：11。 Input第1行：N，N为矩阵的大小。(2 &lt;= N &lt;= 500)第2 - N + 1行：每行N个数，中间用空格隔开，对应格子中奖励的价值。（1 &lt;= N[i] &lt;= 10000) Output输出能够获得的最大价值。 Input示例123431 3 32 1 32 2 1 Output示例111 题解：水。。dp dp[i][j]表示在(i,j)这个位置能够获得的最大价值 来自两个方向，状态转移方程为dp[i][j]=max(dp[i][j-1]+a[i][j],dp[i-1][j]+a[i][j]) 代码：123456789101112131415161718192021222324#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=505;int dp[N][N],a[N][N];int main()&#123; int n; scanf("%d",&amp;n); memset(dp,0,sizeof(dp)); for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) scanf("%d",&amp;a[i][j]); for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=n;j++)&#123; dp[i][j]=max(dp[i][j-1]+a[i][j],dp[i-1][j]+a[i][j]); &#125; &#125; printf("%d\n",dp[n][n]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1087 1 10 100 1000]]></title>
    <url>%2F7ee1bb3b%2F</url>
    <content type="text"><![CDATA[题目来源： Ural 1209基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 1,10,100,1000…组成序列1101001000…，求这个序列的第N位是0还是1。 Input第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 10000)第2 - T + 1行：每行1个数N。（1 &lt;= N &lt;= 10^9) Output共T行，如果该位是0，输出0，如果该位是1，输出1。 Input示例12343123 Output示例123110 题解：水题暴力一发。。200ms+。。 然后1，3，6，10……高斯求和再水一发15ms 代码：1234567891011121314151617181920212223242526#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;vector&lt;int&gt;v;int main()&#123; int t,n; scanf("%d",&amp;t); int x=1,ji=1; v.push_back(1); while(x&lt;=1e9)&#123; x+=ji; v.push_back(x); ji++; &#125; while(t--)&#123; scanf("%d",&amp;n); if(find(v.begin(),v.end(),n)!=v.end())puts("1"); else puts("0"); &#125; return 0;&#125; 12345678910111213141516171819202122#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int t,n; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); if(n==1)&#123; puts("1"); continue; &#125; int tmp=sqrt(2*(n-1)); if(tmp*(tmp+1)==2*(n-1))puts("1"); else puts("0"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1267 4个数和为0（暴力+二分）]]></title>
    <url>%2F34ddef5a%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 20 难度：3级算法题 给出N个整数，你来判断一下是否能够选出4个数，他们的和为0，可以则输出”Yes”，否则输出”No”。 Input第1行，1个数N，N为数组的长度(4 &lt;= N &lt;= 1000)第2 - N + 1行：A[i]（-10^9 &lt;= A[i] &lt;= 10^9) Output如果可以选出4个数，使得他们的和为0，则输出”Yes”，否则输出”No”。 Input示例1234565-11-524 Output示例1Yes 题解：n^4暴力肯定华丽丽的t掉 ╮(￣▽￣””)╭ 学了个妙妙的o(n^2)的方法，先排序，然后枚举前两个数，后两个数在[j+1,n-1]的范围内找，用两个指针，二分的原理，如果当前sum&gt;0说明需要一个小一点的数，那么就取a[–r]，如果sum&lt;0说明要取一个大一点的数，即a[++l] 代码：123456789101112131415161718192021222324252627282930313233#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;const int N=1005;int a[N];int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d",&amp;a[i]); sort(a,a+n); for(int i=0;i&lt;n;i++)&#123; for(int j=i+1;j&lt;n;j++)&#123; int l,r,sum; l=j+1;r=n-1; while(l&lt;r)&#123; sum=a[i]+a[j]+a[l]+a[r]; if(sum&gt;0)r--; else if(sum&lt;0)l++; else&#123; puts("Yes"); return 0; &#125; &#125; &#125; &#125; puts("No"); return 0;&#125;]]></content>
      <categories>
        <category>二分</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1090 3个数和为0（暴力，二分）]]></title>
    <url>%2Ffb0210e3%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 给出一个长度为N的无序数组，数组中的元素为整数，有正有负包括0，并互不相等。从中找出所有和 = 0的3个数的组合。如果没有这样的组合，输出No Solution。如果有多个，按照3个数中最小的数从小到大排序，如果最小的数相等则按照第二小的数排序。 Input第1行，1个数N，N为数组的长度(0 &lt;= N &lt;= 1000)第2 - N + 1行：A[i]（-10^9 &lt;= A[i] &lt;= 10^9) Output如果没有符合条件的组合，输出No Solution。如果有多个，按照3个数中最小的数从小到大排序，如果最小的数相等则继续按照第二小的数排序。每行3个数，中间用空格分隔，并且这3个数按照从小到大的顺序排列。 Input示例123456787-3-2-10123 Output示例12345-3 0 3-3 1 2-2 -1 3-2 0 2-1 0 1 题解：o(n^3)暴力竟然水过去了？？？好弱。。 1267 4个数和为0这个题暴力就水不过去了0.0，所以还是要想优化的，方法类似四个数的和这个题 先排序，然后枚举第一个数，剩下两个数在[i+1,n-1]里选，用两个指针，二分的原理，如果当前sum&gt;0说明需要一个小一点的数，那么就取a[–r]，如果sum&lt;0说明要取一个大一点的数，即a[++l] 就有一组数据一直过不去，然后下载了数据发现。。输出No Solution我直接puts(“No”)了。。行吧自闭了 代码：12345678910111213141516171819202122232425262728#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=1005;int a[N];int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d",&amp;a[i]); sort(a,a+n); int flag=0; for(int i=0;i&lt;n-2;i++)&#123; for(int j=i+1;j&lt;n-1;j++)&#123; for(int k=j+1;k&lt;n;k++)&#123; if(a[i]+a[j]+a[k]==0)&#123; flag=1; printf("%d %d %d\n",a[i],a[j],a[k]); &#125; &#125; &#125; &#125; if(!flag)printf("No Solution\n"); return 0;&#125; 123456789101112131415161718192021222324252627282930313233#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;vector&gt;using namespace std;const int N=1005;int a[N];int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d",&amp;a[i]); sort(a,a+n); int flag=0; for(int i=0;i&lt;n-1;i++)&#123; int l,r,sum; l=i+1;r=n-1; while(l&lt;r)&#123; sum=a[i]+a[l]+a[r]; if(sum&gt;0)r--; else if(sum&lt;0)l++; else&#123; flag=1; printf("%d %d %d\n",a[i],a[l],a[r]); l++;r--; &#125; &#125; &#125; if(!flag)puts("No Solution"); return 0;&#125;]]></content>
      <categories>
        <category>二分</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1091 线段的重叠（贪心）]]></title>
    <url>%2Fddee45d%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 X轴上有N条线段，每条线段包括1个起点和终点。线段的重叠是这样来算的，[10 20]和[12 25]的重叠部分为[12 20]。给出N条线段的起点和终点，从中选出2条线段，这两条线段的重叠部分是最长的。输出这个最长的距离。如果没有重叠，输出0。 Input第1行：线段的数量N(2 &lt;= N &lt;= 50000)。第2 - N + 1行：每行2个数，线段的起点和终点。(0 &lt;= s , e &lt;= 10^9) Output输出最长重复区间的长度。 Input示例12345651 52 42 83 77 9 Output示例14 题解：贪心 先排序，按左端点从小到大排，如果相同的按右端点大的优先 然后记录一个maxr，拿样例模拟一下，如果当前的r大于maxr，那么应该是区间交错的情况，比如[1,5][2,8]，那么重叠部分就是maxr-l，更新maxr，反之如果r小于maxr，比如[2,8][3,7]，那么重叠部分就是r-l 代码：12345678910111213141516171819202122232425262728293031#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=50005;struct q&#123; int l,r;&#125;q[N];bool cmp(struct q q1,struct q q2)&#123; if(q1.l!=q2.l)return q1.l&lt;q2.l; else return q1.r&gt;q2.r;&#125;int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d%d",&amp;q[i].l,&amp;q[i].r); sort(q,q+n,cmp); int ans=0,maxr=q[0].r; for(int i=1;i&lt;n;i++)&#123; if(maxr&gt;q[i].r)ans=max(ans,q[i].r-q[i].l); else&#123; ans=max(ans,maxr-q[i].l); maxr=q[i].r; &#125; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1182 完美字符串]]></title>
    <url>%2Ff8170462%2F</url>
    <content type="text"><![CDATA[题目来源： Facebook Hacker Cup选拔基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 约翰认为字符串的完美度等于它里面所有字母的完美度之和。每个字母的完美度可以由你来分配，不同字母的完美度不同，分别对应一个1-26之间的整数。 约翰不在乎字母大小写（也就是说字母A和a的完美度相同）。给定一个字符串，输出它的最大可能的完美度。例如：dad，你可以将26分配给d，25分配给a，这样整个字符串完美度为77。 Input输入一个字符串S(S的长度 &lt;= 10000)，S中没有除字母外的其他字符。 Output由你将1-26分配给不同的字母，使得字符串S的完美度最大，输出这个完美度。 Input示例1dad Output示例177 题解：水。。贪心，出现越多的字母分配越大的数字 代码：12345678910111213141516171819202122#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;char s[10005];int a[26];int main()&#123; scanf("%s",s); int len=strlen(s),ans=0; for(int i=0;i&lt;26;i++)a[i]=0; for(int i=0;i&lt;len;i++)&#123; if(s[i]&gt;='A'&amp;&amp;s[i]&lt;='Z')a[s[i]-'A']++; else a[s[i]-'a']++; &#125; sort(a,a+26); for(int i=0;i&lt;26;i++)ans+=a[i]*(i+1); printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1283 最小周长]]></title>
    <url>%2Fd6ce1fc2%2F</url>
    <content type="text"><![CDATA[题目来源： Codility基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 一个矩形的面积为S，已知该矩形的边长都是整数，求所有满足条件的矩形中，周长的最小值。例如：S = 24，那么有{1 24} {2 12} {3 8} {4 6}这4种矩形，其中{4 6}的周长最小，为20。 Input输入1个数S(1 &lt;= S &lt;= 10^9)。 Output输出最小周长。 Input示例124 Output示例120 题解：水。。从根号n开始找就行 代码：123456789101112131415#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int n; scanf("%d",&amp;n); int a=sqrt(n); while(n%a!=0)a--; printf("%d\n",2*a+2*(n/a)); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1284 2 3 5 7的倍数（容斥）]]></title>
    <url>%2F9f1d8b77%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 给出一个数N，求1至N中，有多少个数不是2 3 5 7的倍数。 例如N = 10，只有1不是2 3 5 7的倍数。 Input输入1个数N(1 &lt;= N &lt;= 10^18)。 Output输出不是2 3 5 7的倍数的数共有多少。 Input示例110 Output示例11 题解：容斥水题 是2，3，5，7的倍数的数的个数为： n/2+n/3+n/5+n/7-n/6-n/10-n/14-n/15-n/21-n/35+n/30+n/42+n/70+n/105-n/210 代码：123456789101112131415#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longint main()&#123; LL n; scanf("%lld",&amp;n); LL ans=n/2+n/3+n/5+n/7-n/6-n/10-n/14-n/15-n/21-n/35+n/30+n/42+n/70+n/105-n/210; printf("%lld\n",n-ans); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1289 大鱼吃小鱼（stack）]]></title>
    <url>%2Fd971ae59%2F</url>
    <content type="text"><![CDATA[题目来源： Codility基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 有N条鱼每条鱼的位置及大小均不同，他们沿着X轴游动，有的向左，有的向右。游动的速度是一样的，两条鱼相遇大鱼会吃掉小鱼。从左到右给出每条鱼的大小和游动的方向（0表示向左，1表示向右）。问足够长的时间之后，能剩下多少条鱼？ Input第1行：1个数N，表示鱼的数量(1 &lt;= N &lt;= 100000)。第2 - N + 1行：每行两个数A[i], B[i]，中间用空格分隔，分别表示鱼的大小及游动的方向(1 &lt;= A[i] &lt;= 10^9，B[i] = 0 或 1，0表示向左，1表示向右）。 Output输出1个数，表示最终剩下的鱼的数量。 Input示例12345654 03 12 01 05 0 Output示例12 题解：用栈模拟 向右游的鱼入栈，向左的鱼判断吃或被吃 代码：1234567891011121314151617181920212223242526272829303132#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;stack&gt;using namespace std;stack&lt;int&gt;s;int main()&#123; int n,c,d; scanf("%d",&amp;n); int ans=n; for(int i=0;i&lt;n;i++)&#123; scanf("%d%d",&amp;c,&amp;d); if(d==1)s.push(c); else&#123; while(!s.empty())&#123; if(s.top()&lt;c)&#123; s.pop(); ans--; &#125; else&#123; ans--; break; &#125; &#125; &#125; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>模拟</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1305 Pairwise Sum and Divide（思维）]]></title>
    <url>%2Fb6db0c64%2F</url>
    <content type="text"><![CDATA[题目来源： HackerRank基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 有这样一段程序，fun会对整数数组A进行求值，其中Floor表示向下取整： 123456fun(A) sum = 0 for i = 1 to A.length for j = i+1 to A.length sum = sum + Floor((A[i]+A[j])/(A[i]*A[j])) return sum 给出数组A，由你来计算fun(A)的结果。例如：A = {1, 4, 1}，fun(A) = [5/4] + [2/1] + [5/4] = 1 + 2 + 1 = 4。 Input第1行：1个数N，表示数组A的长度(1 &lt;= N &lt;= 100000)。第2 - N + 1行：每行1个数A[i]（1 &lt;= A[i] &lt;= 10^9)。 Output输出fun(A)的计算结果。 Input示例1231 4 1 Output示例14 题解：暴力是不可能的 首先考虑把Floor((A[i]+A[j])/(A[i]*A[j]))转化成Floor(1/A[i]+1/A[j])，然后就会发现如果a[i]=1那么1/a[i]就是答案加一，总共会加n-1次，如果a[i]=2，只有a[j]=2同时成立的时候，才会有答案加一，其余情况向下取整都是0 所以统计a[i]=1的个数，每次加n-1，统计a[i]=2的个数num，最后加上C(num,2) 代码：1234567891011121314151617181920#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longint main()&#123; int n,num=0; scanf("%d",&amp;n); LL ans=0,c; for(int i=0;i&lt;n;i++)&#123; scanf("%lld",&amp;c); if(c==1)ans+=n-1; else if(c==2)num++; &#125; printf("%lld\n",ans+num*(num-1)/2); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1344 走格子]]></title>
    <url>%2Fc2424f60%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 有编号1-n的n个格子，机器人从1号格子顺序向后走，一直走到n号格子，并需要从n号格子走出去。机器人有一个初始能量，每个格子对应一个整数A[i]，表示这个格子的能量值。如果A[i] &gt; 0，机器人走到这个格子能够获取A[i]个能量，如果A[i] &lt; 0，走到这个格子需要消耗相应的能量，如果机器人的能量 &lt; 0，就无法继续前进了。问机器人最少需要有多少初始能量，才能完成整个旅程。 例如：n = 5。{1，-2，-1，3，4} 最少需要2个初始能量，才能从1号走到5号格子。途中的能量变化如下3 1 0 3 7。 Input第1行：1个数n，表示格子的数量。(1 &lt;= n &lt;= 50000)第2 - n + 1行：每行1个数A[i]，表示格子里的能量值(-1000000000 &lt;= A[i] &lt;= 1000000000) Output输出1个数，对应从1走到n最少需要多少初始能量。 Input示例12345651-2-134 Output示例12 题解：水题，贪心思路，找到那个最小的前缀和即可 代码：12345678910111213141516171819202122#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long long#define INF 0x3f3f3f3fint main()&#123; int n; scanf("%d",&amp;n); LL sum=0,c,ans=INF; while(n--)&#123; scanf("%lld",&amp;c); sum+=c; ans=min(sum,ans); &#125; if(ans&lt;0)printf("%lld\n",-ans); else printf("%lld\n",0); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1347 旋转字符串]]></title>
    <url>%2Fada46a5d%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 S[0…n-1]是一个长度为n的字符串，定义旋转函数Left(S)=S[1…n-1]+S[0].比如S=”abcd”,Left(S)=”bcda”.一个串是对串当且仅当这个串长度为偶数，前半段和后半段一样。比如”abcabc”是对串,”aabbcc”则不是。 现在问题是给定一个字符串，判断他是否可以由一个对串旋转任意次得到。 Input第1行：给出一个字符串（字符串非空串，只包含小写字母，长度不超过1000000） Output对于每个测试用例，输出结果占一行，如果能，输出YES，否则输出NO。 Input示例12aaab Output示例12YESNO 题解：一开始以为要枚举旋转前前半段和后半段的分界线，然后判断是否有相同的情况，但是这样1e6太长了啊。。拿abcabc旋转一下，bcabca，cabcab，可以发现一个对串不管怎么旋转都还是个对串，发现这点问题就解决了，直接判断对串即可 代码：1234567891011121314151617181920212223242526272829#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=1e6+5;char s[1000005];int main()&#123; while(scanf("%s",s)!=EOF)&#123; int len=strlen(s); if(len&amp;1)&#123; puts("NO"); &#125; else&#123; int flag=1; for(int i=0;i&lt;len/2;i++)&#123; if(s[i]!=s[len/2+i])&#123; puts("NO"); flag=0; break; &#125; &#125; if(flag)puts("YES"); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>思维</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1381 硬币游戏]]></title>
    <url>%2Fff9df0f5%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 有一个简单但是很有趣的游戏。在这个游戏中有一个硬币还有一张桌子，这张桌子上有很多平行线（如下图所示）。两条相邻平行线之间的距离是1，硬币的半径是R，然后我们来抛硬币到桌子上，抛下之后硬币有时候会和一些直线相交（相切的情况也算是相交），有时候不会。 请你来计算一下抛一次硬币之后，该硬币和直线相交数目的期望。 Input第一行给出一个整数T，表示有T组数据(1&lt;=T&lt;=10000)。第2行到T+1，每行给出一个整数R。(0&lt; R &lt;= 10,000,000,000) Output对于每一个数据，在一行中输出答案的整数部分即可。 Input示例1211 Output示例12 题解：反正只要求期望的整数部分，所以圆的直径就是期望值 官方证明严谨些 代码：123456789101112131415161718#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longint main()&#123; int t; LL r; scanf("%d",&amp;t); while(t--)&#123; scanf("%lld",&amp;r); printf("%lld\n",r&lt;&lt;1); &#125; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[51nod 2020 排序相减（6174猜想）]]></title>
    <url>%2F6f66f8f8%2F</url>
    <content type="text"><![CDATA[题目来源： syu练习题 基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 “排序相减”操作是指对于任意一个四位数n，将四个数字分别进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n1，然后继续将n1中的四个数字进行顺序排序和逆序排序，得到两个数取相减后结果的绝对值n2,以此类推，最后总会得到一个数字黑洞，无法跳出。 例如:样例2中4176 = 6532 - 2356 Input第一行输入一个整数T，表示数据组数（1&lt;T&lt;10000）；第二行输入一个正整数n(1000&lt;=n&lt;=9999)和一个正整数 k（1&lt;=k&lt;=100）,表示操作次数； Output对于每组数据，输出对于开始的数据n在第k次“排序相减”后结果绝对值。 Input示例12321234 23562 1 Output示例1283524176 题解：水之后随便试了几个样例，发现循环多次之后黑洞竟然都是6174，然后就去查了一下，百度百科还真有这玩意儿 6174猜想 ，1955年，卡普耶卡(D.R.Kaprekar)研究了对四位数的一种变换：任给出四位数k0,用它的四个数字由大到小重新排列成一个四位数m,再减去它的反序数rev(m),得出数k1=m-rev(m),然后，继续对k1重复上述变换，得数k2.如此进行下去，卡普耶卡发现，无论k0是多大的四位数， 只要四个数字不全相同，最多进行7次上述变换，就会出现四位数6174. 代码：1234567891011121314151617181920212223242526272829303132#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int n,m,k;void f()&#123; int a[4]; a[3]=n%10; a[2]=(n/10)%10; a[1]=(n/100)%10; a[0]=n/1000; sort(a,a+4); n=a[0]*1000+a[1]*100+a[2]*10+a[3]; m=a[3]*1000+a[2]*100+a[1]*10+a[0];&#125;int main()&#123; int t; cin&gt;&gt;t; while(t--)&#123; cin&gt;&gt;n&gt;&gt;k; while(k--)&#123; f(); if(n&lt;m)swap(n,m); n=n-m; &#125; cout&lt;&lt;n&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1675 序列变换（莫比乌斯函数）]]></title>
    <url>%2Fcd27113b%2F</url>
    <content type="text"><![CDATA[Input示例12331 1 11 1 1 Output示例17 题解：虽然学了莫比乌斯但是没写过题就不咋会用(⌒-⌒; ) 炫酷反演魔术 这篇还没看懂0.0 mark一下 然后丢个官方题解吧 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=1e5+5;int a[N],b[N],prime[N],num[N],mu[N],n;bool vis[N];void mobius()&#123; memset(vis,false,sizeof(vis)); mu[1]=1; int ji=0; for(int i=2;i&lt;N;i++)&#123; if(!vis[i])&#123; prime[ji++]=i; mu[i]=-1; &#125; for(int j=0;j&lt;ji;j++)&#123; if(i*prime[j]&gt;N)break; vis[i*prime[j]]=true; if(i%prime[j]==0)&#123; mu[i*prime[j]]=0;break; &#125; else mu[i*prime[j]]=-mu[i]; &#125; &#125;&#125;LL solve(int x)&#123; LL res=0; for(int i=x;i&lt;=n;i+=x)num[b[a[i]]]++; for(int i=x;i&lt;=n;i+=x)res+=num[a[b[i]]]; for(int i=x;i&lt;=n;i+=x)num[b[a[i]]]--; return res;&#125;int main()&#123; mobius(); scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++)scanf("%d",&amp;a[i]); for(int i=1;i&lt;=n;i++)scanf("%d",&amp;b[i]); LL ans=0; for(int i=1;i&lt;=n;i++)ans+=mu[i]*solve(i); printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>容斥</tag>
        <tag>莫比乌斯函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 6304 Chiaki Sequence Revisited（二分）]]></title>
    <url>%2F3a23cc5c%2F</url>
    <content type="text"><![CDATA[题意：数列定义如上，求前n项和 题解：打个表 然后oeis一下 然后。。就没有然后了0.0 先记录一下数字i的出现次数 123456789数字 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ……次数 2 2 1 3 1 2 1 4 1 2 1 3 1 2 1 ……最后出现该数字的项数 2 4 5 8 9 11 12 16 17 19 20 23 21 23 24 1次: (1),3,5,7,9,... 公差为２（1特例先不管）2次: 2,6,10,14,... 公差为４3次: 4,12,20,28,... 公差为８4次: 8,24,40,56... 公差为16 可以发现i的出现次数为（1除外） 可以推出最后出现该数字的项数，即下文f(i)，比如最后出现数字5的项数为8，即f(5)=5+2+1=8，联系上述规律代码很好理解 sum(i)表示数字i出现完为止的和是多少，就是高斯求和一下乘个倍数，注意大数取模所以除以二要改成乘以inv2 先二分小于等于n的fun(x)的最大的x是多少，那么多出的部分全都是x+1，所以多出部分答案为(n-fun(x)-1)*(x+1)+1（1多出现了一次） 然后再加上前面的sum(x)即可 精度问题wa了好多发 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;set&gt;using namespace std;#define LL long longconst LL inv2=5e8+4;const int N=1e5+5;const int p=1e9+7;void read(LL &amp;x)&#123; char ch=getchar();x=0; for(;ch&lt;'0'||ch&gt;'9';ch=getchar()); for(;ch&gt;='0'&amp;&amp;ch&lt;='9';ch=getchar())x=x*10+ch-'0';&#125;LL f(LL x)&#123; LL res=0; while(x)&#123; res+=x; x&gt;&gt;=1; &#125; return res;&#125;LL sum(LL x)&#123; LL res=0,tmp=1; while(x)&#123; res=(res+x%p*((x+1)%p)%p*inv2%p*tmp%p)%p; x&gt;&gt;=1; tmp=tmp*2%p; &#125; return res;&#125;int main()&#123; int t; LL n; scanf("%d",&amp;t); while(t--)&#123; read(n); LL l=1,r=n,m; while(l&lt;=r)&#123; m=(l+r)&gt;&gt;1; if(f(m)+1&lt;=n)l=m+1; else r=m-1; &#125; LL ans=((n-f(r)-1)%p)*((r+1)%p)%p; ans=(ans+sum(r)+1)%p; printf("%lld\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>二分</category>
      </categories>
      <tags>
        <tag>逆元</tag>
        <tag>推公式</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 6301 Distinct Values（贪心，set）]]></title>
    <url>%2F5a4c73da%2F</url>
    <content type="text"><![CDATA[Chiaki has an array of n positive integers. You are told some facts about the array: for every two elements ai and aj in the subarray al..r (l≤i&lt;j≤r), ai≠aj holds.Chiaki would like to find a lexicographically minimal array which meets the facts. 题意：构造一个长为n的整数序列，给m个要求，每个要求给出一个[l,r]区间，区间内任意两个数不相等，求满足这m个限制且字典序最小的序列 题解：如果没有限制，那么构造的序列显然就是n个1，假如[l,r]有限制，那么[l,r]内就应该被替换成2，3，4，5，……就是贪心的思路，但是。。我不知道咋写。。还是看标程去了，标程真的好妙啊(つД`)ノ 首先如果大区间包含小区间的话，小区间相当于没有用，所以q[i]数组存的是以i为左端点的最大右端点位子 然后从q[1]开始处理，q[i]即当前需要处理到的位子，l,r两个指针，r表示当前已经处理到的位子，l右移更新set中待填入的元素，如果r&lt;q[i]那么就从集合中取出数字构造答案 l右移更新那段真的妙，我只能靠纸上模拟。。mark以后再想想吧 代码：12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;set&gt;using namespace std;const int N=100005;int q[N],ans[N];set&lt;int&gt;s;int main()&#123; int t,n,m,l,r; scanf("%d",&amp;t); while(t--)&#123; s.clear(); scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)q[i]=i; while(m--)&#123; scanf("%d%d",&amp;l,&amp;r); q[l]=max(q[l],r); &#125; for(int i=1;i&lt;=n;i++)s.insert(i); l=1;r=0; for(int i=1;i&lt;=n;i++)&#123; if(r&gt;q[i])continue; while(l&lt;i)&#123; s.insert(ans[l]); l++; &#125; while(r&lt;q[i])&#123; ans[++r]=*s.begin(); s.erase(ans[r]); &#125; &#125; for(int i=1;i&lt;n;i++)printf("%d ",ans[i]); printf("%d\n",ans[n]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>stl</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 6300 Triangle Partition（构造）]]></title>
    <url>%2F3fb087ea%2F</url>
    <content type="text"><![CDATA[Chiaki has 3n points p1,p2,…,p3n. It is guaranteed that no three points are collinear.Chiaki would like to construct n disjoint triangles where each vertex comes from the 3n points. 题意：给出3*n个点，保证没有三点共线，要求构造n个互不相交的三角形 题解：水题。。因为说了没有三点共线，所以直接按照x排个序，三个三个的取形成的三角形肯定不相交 代码：1234567891011121314151617181920212223242526272829#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=1005;struct sjx&#123; int x,y,num;&#125;a[N*3];bool cmp(struct sjx s1,struct sjx s2)&#123; return s1.x&lt;s2.x;&#125;int main()&#123; int t,n; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); for(int i=0;i&lt;3*n;i++)&#123; scanf("%d%d",&amp;a[i].x,&amp;a[i].y); a[i].num=i+1; &#125; sort(a,a+3*n,cmp); for(int i=0;i&lt;3*n-1;i++)printf("%d ",a[i].num); printf("%d\n",a[3*n-1].num); &#125; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 6299 Balanced Sequence（贪心）]]></title>
    <url>%2F420f3cff%2F</url>
    <content type="text"><![CDATA[Chiaki has n strings s1,s2,…,sn consisting of ‘(‘ and ‘)’. A string of this type is said to be balanced: if it is the empty string if A and B are balanced, AB is balanced, if A is balanced, (A) is balanced. Chiaki can reorder the strings and then concatenate them get a new string t. Let f(t) be the length of the longest balanced subsequence (not necessary continuous) of t. Chiaki would like to know the maximum value of f(t) for all possible t. 题意：定义合法括号序列是：() ()() (()) 给n个包含’(‘和’)’的字符串，可以重新调整这n个串的顺序，求最长合法序列 题解：写了一发过了样例然后wa了，好真实。。然后改啊改又wa了好几发。。更真实了0.0最后a了但是思路和第一遍完全一样啊摔◡ ヽ(`Д´)ﾉ ┻━┻ 对于任意一个串来说，刨去合法的序列，最后剩下的一定是)))(((这种形式，所以记录一下剩下的左右括号数，然后贪心的交换序列来使这些括号能更多的和别的串的括号组合 对于任意两个处理完的串贪心策略如下：如果k1的左括号比右括号多，而k2的左括号比右括号少，比如))(((((和))))))((，那么肯定是把k1放前面，反之k2在前，这样二者中间才能形成更多括号，同理如果k1，k2都是左括号少右括号多，即))))))(((和)))))))))))((，那么左括号多的在前面，如果k1，k2都是左括号多右括号少，即))((((((((((和)))((((((((，右括号少的在前面 排序之后然后l记录当前已有的左括号数，然后和后续的右括号配对，每次更新l，具体见代码，还是很好理解的 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const int N=100005;char s[N];struct kh&#123; int l,r;&#125;a[N];bool cmp(struct kh k1,struct kh k2)&#123; if(k1.l&gt;k1.r&amp;&amp;k2.l&lt;=k2.r)return true; else if(k1.l&lt;=k1.r&amp;&amp;k2.l&gt;k2.r)return false; else if(k1.l&lt;=k1.r&amp;&amp;k2.l&lt;=k2.r)return k1.l&gt;k2.l; else return k1.r&lt;k2.r;&#125;int main()&#123; int t,n,l,r; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); int ans=0; for(int i=0;i&lt;n;i++)&#123; scanf("%s",s); int len=strlen(s); l=0;r=0; for(int j=0;j&lt;len;j++)&#123; if(s[j]=='(')l++; else if(s[j]==')'&amp;&amp;l&gt;0)&#123; ans++;l--; &#125; else r++; &#125; a[i].l=l; a[i].r=r; &#125; sort(a,a+n,cmp); l=0; for(int i=1;i&lt;n;i++)&#123; l+=a[i-1].l; if(a[i].r&gt;l)&#123; ans+=l;l=0; &#125; else&#123; ans+=a[i].r; l-=a[i].r; &#125; &#125; printf("%d\n",ans*2); &#125; return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 6298 Maximum Multiple]]></title>
    <url>%2F5b7386c2%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=6298 Given an integer n, Chiaki would like to find three positive integers x, y and z such that: n=x+y+z, x∣n, y∣n, z∣n and xyz is maximum. 题意：给一个整数n，找到三个整数x，y，z满足n=x+y+z, x∣n, y∣n, z∣n ，且x*y*zmax 题解：把n看成单位1，因为要满足n=x+y+z, x∣n, y∣n, z∣n，所以其实也就下面这三种情况： 1231=1/3+1/3+1/31=1/2+1/4+1/41=1/2+1/3+1/6 又因为如果n能被3整除的话，那么第一种得到的结果肯定比第三种大，所以就不用判断第三种了，先第一种在第二种即可 代码：12345678910111213141516171819202122232425#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longint main()&#123; int n,t; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); if(n%3==0)&#123; LL ans=(LL)n*n*n/27; printf("%lld\n",ans); &#125; else if(n%4==0)&#123; LL ans=(LL)n*n*n/32; printf("%lld\n",ans); &#125; else printf("-1\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[51nod 1557 两个集合（STL set）]]></title>
    <url>%2F4a010063%2F</url>
    <content type="text"><![CDATA[题目来源： CodeForces 468 B. Two Setshttp://codeforces.com/contest/468/problem/B 基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 小X有n个互不相同的整数： p1,p2,…,pn 。他想把这些整数分到两个集合A和B里边。但是要符合下面两个条件。 · 如果x属于A，那么a-x也肯定属于A。 · 如果x属于B，那么b-x也肯定属于B。 判断一下是否存在一种方案来分配这些数字到集合A，B中。 注意：如果一个集合为空也是可以的。 Input单组测试数据。第一行有三个整数n,a,b (1≤n≤10^5; 1≤a,b≤10^9)。第二行有n个不一样的整数 p1,p2,…,pn (1≤pi≤10^9). Output如果可行，那么输出YES，否则输出NO。 Input示例124 5 92 3 4 5 Output示例1YES 题解：这题评论区好像有很多种做法，但是感觉都好麻烦啊。。我喜欢那种只要想通了写一点点代码就行的题 _ (:з」∠) _ 思路如下： 因为属于a集合的话那么x,a-x相当于被绑定成封闭的一对了，放哪其实无所谓，所以一开始直白的写了个如果任何数既没有a-x又没有b-x就输出no，然后wa了五个测试点。。 因为还有一种情况，a-x和b-x都存在的时候，如果x属于a，那么a-x属于a，且x不属于b，b-(a-x)不属于b属于a，同理，若x属于b，会得到a-(b-x)属于b 所以如果a-x和b-x都存在的时候，b-(a-x)和a-(b-x)必须有一项存在 然后还是wa了发现是自己愚蠢的漏写了x=*it这种致命的话(T ^ T)我咋老是干这种事。。 代码：12345678910111213141516171819202122232425262728293031323334#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;set&gt;using namespace std;set&lt;int&gt;s,v;int main()&#123; cin.tie(0);ios_base::sync_with_stdio(false); int n,a,b,x; cin&gt;&gt;n&gt;&gt;a&gt;&gt;b; for(int i=1;i&lt;=n;i++)&#123; cin&gt;&gt;x; s.insert(x); &#125; set&lt;int&gt;::iterator it; for(it=s.begin();it!=s.end();it++)&#123; x=*it; if(!s.count(a-x)&amp;&amp;!s.count(b-x))&#123; puts("NO"); return 0; &#125; if(s.count(a-x)&amp;&amp;s.count(b-x))&#123; if(!s.count(a-b+x)&amp;&amp;!s.count(b-a+x))&#123; puts("NO"); return 0; &#125; &#125; &#125; puts("YES"); return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>stl</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1791 合法括号子段（dp）]]></title>
    <url>%2Fdd814372%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 有一个括号序列，现在要计算一下它有多少非空子段是合法括号序列。 合法括号序列的定义是： 1.空序列是合法括号序列。 2.如果S是合法括号序列，那么(S)是合法括号序列。3.如果A和B都是合法括号序列，那么AB是合法括号序列。 Input多组测试数据。第一行有一个整数T（1&lt;=T&lt;=1100000），表示测试数据的数量。接下来T行，每一行都有一个括号序列，是一个由’(‘和’)’组成的非空串。所有输入的括号序列的总长度不超过1100000。 Output输出T行，每一行对应一个测试数据的答案。 Input示例1234565(()()()(()(()) Output示例1234501312 题解：dp[i]表示以i结尾的子段数量 手动模拟几个 状态转移方程为dp[i]=dp[pos[i]+1]+1，pos[i]表示左括号i配对的右括号所在的位置，pos初始化为-1 要从后往前dp，因为右括号无所谓，但是一旦遇到左括号，就开始有值 答案为所有dp之和 代码：1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;#include &lt;stack&gt;using namespace std;#define LL long longconst int N=1000005;int dp[N],pos[N];char s[N];stack&lt;int&gt;sk;int main()&#123; int t,n; scanf("%d",&amp;t); while(t--)&#123; scanf("%s",s); n=strlen(s); while(!sk.empty())sk.pop(); LL ans=0; for(int i=0;i&lt;n;i++)&#123; dp[i]=0;pos[i]=-1; &#125; for(int i=0;i&lt;n;i++)&#123; if(s[i]=='(')&#123; sk.push(i); continue; &#125; else if(sk.empty())continue; else pos[sk.top()]=i;sk.pop(); &#125; for(int i=n-1;i&gt;=0;i--)&#123; if(pos[i]!=-1)&#123; dp[i]=dp[pos[i]+1]+1; ans+=dp[i]; &#125; &#125; printf("%lld\n",ans); &#125;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1574 排列转换（CF 584 E.Anton and Ira）]]></title>
    <url>%2F6a5982f6%2F</url>
    <content type="text"><![CDATA[题目来源： CodeForces http://codeforces.com/contest/584/problem/E 基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 现在有两个长度为n的排列p和s。要求通过交换使得p变成s。交换 pi 和 pj 的代价是|i-j|。要求使用最少的代价让p变成s。 Input单组测试数据。第一行有一个整数n (1≤n≤200000)，表示排列的长度。第二行有n个范围是1到n的整数，表示排列p。每个整数只出现一次。第三行有n个范围是1到n的整数，表示排列s。每个整数只出现一次。 Output输出一个整数，表示从排列p变到s最少要多少代价。 Input示例12344 2 1 33 2 4 1 Output示例13 题解：下面这个来自评论区的思路我一直都没咋理解。。可能是放假静不下心吧。。先mark着（鸽巢原理） 1234567猜了一下结论,居然对了..........具体操作是:假设排列s是1,2,3,...,nk为排列p中最大的 没有放到正确位置的数,k的位置为posk的右边一定有一个数x&lt;=pos(因为&lt;=pos的数有pos个,不可能全挤在pos-1个位置里)交换k和x,两个数都离目标更近了且没有走远路.重复这个步骤 我的思路如下： 一个数c要到它的目标位置，最短代价就是i和a[c]的距离，所以只要证明每个数都只需要移动abs(i-a[c])最终可以使整个数列达到要求 那么递推的想，对于两个数来说，如果他们是刚好需要互换位子的，直接换即可 对于三个数1，2，3来说，如果他们都不在自己的位子上，比如2，3，1，那么2要向右1个单位，3向右1个单位，1向左2个单位，1向左的可以借助2，3向右的完成，所以总移动距离是4 对于n个都不在各自位子上的数来说，无论如何所有需要向左的都可以借助需要向右的数来完成，而满足他们不会走多余的路 又因为这题代价是双方交换，所以最后的答案是总移动距离除以2 代码：1234567891011121314151617181920212223242526#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=200005;int a[N];int main()&#123; cin.tie(0);ios_base::sync_with_stdio(false); int n,c; LL ans=0; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++)&#123; cin&gt;&gt;c; a[c]=i; &#125; for(int i=1;i&lt;=n;i++)&#123; cin&gt;&gt;c; ans+=abs(i-a[c]); &#125; cout&lt;&lt;(ans&gt;&gt;1)&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>鸽巢原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1580 铺管道（CF 518 F.Pasha and Pipe）]]></title>
    <url>%2F15885f20%2F</url>
    <content type="text"><![CDATA[题目来源： CodeForces http://codeforces.com/contest/518/problem/F 基准时间限制：1.5 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 现在要在一个城市中铺设管道。 这个城市是由 n×m 小方格组成的。每一个小方格要么是空的（管道可以铺设在上面），要么是实的（管道不能铺在上面）。空的用’.’表示，实的用’#’表示。 管道铺设的规则如下： · 整条管道是形状是宽度为1的折线； · 管道只能铺设在空的格子上面； · 管道的两个端点只能在边缘上，但是不能在角上； · 管道最多只能转两个弯（90度）； · 在管道上的格子有且只能有两个是在边缘上的； · 如果管道是一条直线，那么他的两个端点必须是落在不同的边上； · 对于管道上的非边缘格子，每一个格子会有且仅有两个相邻的其它格子在管道上； · 对于管道上处于边缘的格子，仅有一个相邻的格子处于管道上。 下面有一些合法的管道铺设例子： 12345....# ....# .*..#***** ****. .***...#.. ..#*. ..#*.#...# #..*# #..*#..... ...*. ...*. 下面是一些非法铺设的例子： 12345.**.# *...# .*.*#..... ****. .*.*...#.. ..#*. .*#*.#...# #..*# #*.*#..... ...*. .***. 这些例子中管道用’*’表示。 现在给定城市的地图，请计算一下有多少种方法铺设管道。 样例解释： 在这个样例中，有三种方法铺设管道（管道用’*’表示）。 123.*. .*. ....*# **# **#.*. ... .*. Input单组测试数据。第一行有两个整数 n,m (2≤n,m≤2000)，表示城市地图的高和宽。接下来n行，每一行有m个字母，表示城市地图。如果字符是’.’，表示该格子是空的，管道可以铺设。如果字符是’#’，表示该格子是实的，管道不能铺设。 Output输出一个整数，表示管道铺设方案的种数。 Input示例12343 3.....#... Output示例13 题解：好题，放空了好久好久才解决。。好难啊不会。。然后就没出息的找题解去了。。◡ ヽ(`Д´)ﾉ ┻━┻ 看了大佬的代码才知道原来这种题是这么做的https://www.cnblogs.com/dancer16/p/7351701.html妙啊妙啊 就大佬博文里的那四种情况，直上直下，一个折，两个折同向，两个折反向，然后再把图转向做一遍，思路很简单但是代码不好写啊。。 a[i][j]false表示空，true表示实 先预处理d[i][j]和u[i][j]两个数组，分别表示t[1][j]-&gt;t[i][j]下达和t[n][j]-&gt;t[i][j]上达 因为起点只能在边缘上，折线也不是很复杂，所以枚举起点然后累加方法数，具体见代码注释，要是自己写好像还是写不出来。。mark 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=2005;int n,m;char s[N];bool a[N][N],b[N][N],d[N][N],u[N][N];LL ans=0;void solve(bool t[][N],int nn,int mm,int flag)&#123; memset(d,false,sizeof(d)); memset(u,false,sizeof(u)); for(int i=1;i&lt;=nn;i++) //down，t[i-1][j]-&gt;t[i][j] //其实是t[1][j]-&gt;t[i][j]，合法为0 for(int j=1;j&lt;=mm;j++) d[i][j]=d[i-1][j]|t[i][j]; for(int i=nn;i&gt;0;i--) //up，t[i+1][j]-&gt;t[i][j] //其实是t[n][j]-&gt;t[i][j]，合法为0 for(int j=1;j&lt;=mm;j++) u[i][j]=u[i+1][j]|t[i][j]; for(int i=2;i&lt;nn;i++)&#123; int tmp=0; if(!t[i][1]&amp;&amp;flag)tmp=1; d[i][1]=u[i][1]=1;//管道上处于边缘的格子，仅有一个相邻的格子处于管道上 for(int j=2;j&lt;mm;j++)&#123; if(t[i][j])&#123; tmp=0;continue; &#125; ans+=((!d[i][j])+(!u[i][j]))*tmp; //上[右……右]下，下[右……右]上，上[右……右]上，下[右……右]下， //[右……右]下，[右……右]上 ans+=(!d[i][j]&amp;&amp;!u[i][j-1])+(!u[i][j]&amp;&amp;!d[i][j-1]); //上右上，下右下 tmp+=(!d[i][j-1])+(!u[i][j-1]); //算能到达第i行的部分数配合下一次循环使用 &#125; if(!t[i][mm]&amp;&amp;flag) ans+=tmp+(!d[i][mm-1])+(!u[i][mm-1]); //下[右……右]，上[右……右]，左右直达 &#125; if(flag)&#123;//左右直达在别的里面求了，所以不用 for(int j=2;j&lt;mm;j++)ans+=(!d[nn][j]);//上下直达 &#125;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)&#123; scanf("%s",s+1); for(int j=1;j&lt;=m;j++)a[i][j]=s[j]=='#'; &#125; solve(a,n,m,1); //把图转过来再来一遍 for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) b[j][i]=a[i][j]; solve(b,m,n,0); printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[51nod 1799 二分答案（二分，阶乘分块打表）]]></title>
    <url>%2F6e6d7226%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 lyk最近在研究二分答案类的问题。对于一个有n个互不相同的数且从小到大的正整数数列a（其中最大值不超过n），若要找一个在a中出现过的数字m，一个正确的二分程序是这样子的： 123456l=1; r=n; mid=(l+r)/2;while (l&lt;=r)&#123; if (a[mid]&lt;=m) l=mid+1; else r=mid-1; mid=(l+r)/2;&#125; 最终a[r]一定等于m。但是这个和谐的程序被熊孩子打乱了。熊孩子在一开始就将a数组打乱顺序。（共有n!种可能）lyk想知道最终r=k的期望。由于小数点非常麻烦，所以你只需输出将答案乘以n!后对1000000007取模就可以了。 在样例中，共有2个数，被熊孩子打乱后的数列共有两种可能(1,2)或者(2,1)，其中(1,2)经过上述操作后r=1，(2,1)经过上述操作后r=0。r=k的期望为0.5，0.5*2!=1，所以输出1。 Input3个整数n,m,k(1&lt;=m&lt;=n&lt;=10^9,0&lt;=k&lt;=n)。 Output一行表示答案 Input示例12 1 1 Output示例11 题解：刚开始读题读了好久，一直没读懂，后来才发现没理解第一句话，“有n个互不相同的数且从小到大的正整数数列a（其中最大值不超过n）”，其实就是1-n这n个数。。 那就可以做了，运用一下二分的原理，如果确定最后要走到k那个位置的话，其实二分的路径实际上是已经确定了的，就是一个mid点跳到另一个mid点…最后到的mid点是k，所以只要求出大于k的位置的mid的个数和小于k的位置的mid的个数 对于小于等于k的位置的small个数来说，可以填比m小或等于m的数，即有A(m,small)种情况，对于大于k的位置的big个数来说，可以填比m大的数，即有A(n-m,big)种情况 对于剩下非mid的位置来说，就是求剩余数字的阶乘 这题求阶乘也要用技巧，毕竟1e9太大了，所以要分块打表，1e7到1e9，每隔1e7打一个，这样求大点的数阶乘可以在1e7内次循环求出，代码也放在下面了 还有一个注意点就是乘的时候要强制类型转化成LL，否则会wa 这个题做了很久才想通。。还是我太菜了见的太少了啊T^T不过还是有收获哒(・ω・)ノ 代码：1234567891011121314151617181920212223#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;using namespace std;#define LL long longconst int p=1000000007;int main()&#123; LL ans=1; int n=1e7; for(int i=2;i&lt;=n;i++)&#123; ans=ans*i%p; &#125; printf("%lld\n",ans); while(n&lt;=1e9)&#123; for(int i=n+1;i&lt;=n+1e7;i++)&#123; ans=(LL)ans*i%p; &#125; n+=1e7; printf("%lld\n",ans); &#125; return 0;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;#define LL long long const int p=1000000007;const int N=10000000;const int num[]=&#123;1,682498929,491101308,76479948,723816384, 67347853,27368307,625544428,199888908,888050723, 927880474,281863274,661224977,623534362,970055531, 261384175,195888993,66404266,547665832,109838563, 933245637,724691727,368925948,268838846,136026497, 112390913,135498044,217544623,419363534,500780548, 668123525,128487469,30977140,522049725,309058615, 386027524,189239124,148528617,940567523,917084264, 429277690,996164327,358655417,568392357,780072518, 462639908,275105629,909210595,99199382,703397904, 733333339,97830135,608823837,256141983,141827977, 696628828,637939935,811575797,848924691,131772368, 724464507,272814771,326159309,456152084,903466878, 92255682,769795511,373745190,606241871,825871994, 957939114,435887178,852304035,663307737,375297772, 217598709,624148346,671734977,624500515,748510389, 203191898,423951674,629786193,672850561,814362881, 823845496,116667533,256473217,627655552,245795606, 586445753,172114298,193781724,778983779,83868974, 315103615,965785236,492741665,377329025,847549272,698611116&#125;;int getnum(int n)&#123; if(!n)return 1; int tmp=num[n/N]; for(int i=n/N*N+1;i&lt;=n;i++)tmp=(LL)tmp*i%p; return tmp;&#125;int main()&#123; int n,m,k,l,r,mid,big,small; int ans=1; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); l=1;r=n;big=small=0; while(l&lt;=r)&#123; mid=(l+r)/2; if(mid&lt;=k)&#123; l=mid+1;small++; &#125; else&#123; r=mid-1;big++; &#125; &#125; for(int i=m-small+1;i&lt;=m;i++)ans=(LL)ans*i%p; for(int i=n-m-big+1;i&lt;=n-m;i++)ans=(LL)ans*i%p; ans=(LL)ans*getnum(n-big-small)%p; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1717 好数（找规律）]]></title>
    <url>%2Fd34e925e%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 有n个数 a[1],a[2],…,a[n]开始都是0现在进行操作 t从1~n依次增加每次把下标时t的倍数的数都反转（0变成1,1变成0）如果最后a[i]为0，那么称此时的i为好数。现在对于给定的n，求这时候的好数个数。n&lt;=1e15 Input一个数n，表示有n个数。（n&lt;=1e15） Output一个数，表示好数的个数。 Input示例12 Output示例11 题解：先模拟一下，跑一下下面这段代码，找“好数”的规律 123456789101112131415161718#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;stack&gt;using namespace std;#define LL long longbool a[105];int main()&#123; memset(a,false,sizeof(a)); for(int i=1;i&lt;105;i++)&#123; for(int j=i;j&lt;105;j+=i)a[j]=!a[j]; &#125; for(int i=1;i&lt;105;i++) if(a[i])printf("%d ",i); return 0;&#125; 输出1 4 9 16 25 36 49 64 81 100 可以发现有且只有完全平方数不是好数 那么答案就是n-sqrt(n) 代码：1234567891011#include &lt;cstdio&gt;#include &lt;cmath&gt;using namespace std;#define LL long longint main()&#123; LL n; scanf("%lld",&amp;n); printf("%lld\n",(LL)(n-sqrt(n)+1)); return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[51nod 1637 幸运数字转换（死循环）]]></title>
    <url>%2F835a9757%2F</url>
    <content type="text"><![CDATA[题目来源： CodeForces基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 比得喜欢幸运数字。这里所说的幸运数字是由4和7组成的正整数。比如，数字47，744，4是幸运数字，而5，17，467就不是。 比得有一个没有前导0的n位数的整数。他用了一个数组d来表示这个整数。数组的第一个编号从数字的最高位开始，下标从1开始。比得想对d进行以下操作k次： 查找最小的x(1≤x＜n)使得 dx ＝ 4 且 dx+1 ＝ 7 ，如果x是奇数，则让 dx ＝ dx+1 ＝ 4 ，否则，让 dx ＝ dx+1 ＝ 7 。 如果没有找到相应的x，则此次操作作为最后一次操作，数组保持不变。 现在，给定初始数字作为数组d，和数字k。帮助比得计算k次操作后的结果。 样例解释：在样例中，数组的变化如下： 4727447→4427447→4427477→4427447→4427477。 Input单组测试数据第一行包含两个整数n和k（1≤n≤10^5，0≤k≤10^9）。分别表示给定数字的位数，和操作的次数。第二行有一个n位数的整数，代表数组d。第1位数代表d1。题目保证数字的第1位数不为0。 Output共一行，代表对数组d进行k次操作后的结果。 Input示例127 44727447 Output示例14427477 题解：1e9那么大的k，不是循环结就是死循环了，这题就是死循环，题目中那个样例解释已经提示了，其实就是只要出现447或者477，两个就会一直卡在那里循环来循环去，所以对于47来说，如果变成44就判断下一位是不是7，如果变成77就判断前一位是不是4，如果出现这两种的话判断一下剩下的k来决定最终是447还是477 第一遍先字符串读入然后存入数组了，200ms+，后来改成直接char，15ms 代码：12345678910111213141516171819202122232425262728293031323334#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;using namespace std;const int N=100005;char a[N];int main()&#123; int n,k; scanf("%d%d",&amp;n,&amp;k); scanf("%s",a+1); for(int i=1;i&lt;n&amp;&amp;k!=0;i++)&#123; if(a[i]=='4'&amp;&amp;a[i+1]=='7')&#123; k--; if(i&amp;1)&#123; a[i+1]='4'; if(a[i+2]=='7')&#123; if(k&amp;1)a[i+1]='7'; break; &#125; &#125; else&#123; a[i]='7'; if(a[i-1]=='4')&#123; if(k&amp;1)a[i]='4'; break; &#125; &#125; &#125; &#125; printf("%s\n",a+1); return 0;&#125;]]></content>
      <categories>
        <category>模拟</category>
      </categories>
      <tags>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1829 函数（斯特林数）]]></title>
    <url>%2F6ed0cc8f%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 想知道f:A-&gt;B这个函数（其中|A|=n, |B|=m）的所有映射关系要使B的每个元素都要被A的一个元素覆盖到。数字可能很大你只要输出方案数模1,000,000,007即可。 Input一共一行两个数，n和m。（1&lt;=n,m&lt;=1,000,000) Output一共一行包含一个方案数。 Input示例12 2 Output示例12 题解：其实就是n个不同球放到m个不同盒子中，且任意一个盒子都不为空，求方法数的问题 先把问题转化一下，n个不同球放到m个相同盒子中，且任意一个盒子都不为空，那么这显然是个第二类斯特林数S(n,m) 关于斯特林数百度百科讲的很详细 斯特林数 放段斯特林数直接dp递推的代码，当然这个复杂度and内存做题肯定是不行的。。只是记录一下这个dp思路而已 1234567891011121314151617181920int dp[N][N];void init()&#123; for(int i=0;i&lt;N;i++)&#123; dp[i][i]=1; dp[i][0]=0; &#125;&#125;int Stirling(int n,int m)&#123; for(int i=2;i&lt;=n;i++) for(int j=1;j&lt;=m;j++) dp[i][j]=dp[i-1][j-1]+dp[i-1][j]*j; return dp[n][m];&#125;int main()&#123; int n,m; init(); scanf("%d%d",&amp;n,&amp;m); printf("%d\n",Stirling(n,m)); return 0;&#125; 然后再回到原问题，n个不同球放到m个不同盒子中，答案已经出来了ans=m!*S(n,m) ans=∑(-1)^i*c(m,i)*(m-i)^n {i=0~m} 组合数要用逆元求，逆元要先线性与处理，如果直接跑循环求组合数的话会T 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;using namespace std;#define LL long longconst LL p=1000000007;const int N=1000005;LL mul[N],inv[N];void init()&#123;//线性求逆元 mul[0]=1; for(int i=1; i&lt;N; i++) mul[i]=mul[i-1]*i%p; inv[0]=inv[1]=1; for(int i=2; i&lt;N; i++) inv[i]=(LL)(p-p/i)*inv[p%i]%p; for(int i=1; i&lt;N; i++) inv[i]=inv[i-1]*inv[i]%p;&#125;LL qpow(LL a,LL b,LL p)&#123; LL ans=1; a%=p; while(b)&#123; if(b&amp;1)&#123; ans=ans*a%p; b--; &#125; b&gt;&gt;=1; a=a*a%p; &#125; return ans;&#125;LL C(LL n,LL m)&#123; return mul[n]*inv[m]%p*inv[n-m]%p;&#125;int main()&#123; int n,m; init(); scanf("%d%d",&amp;n,&amp;m); LL ans=0; for(LL i=0;i&lt;=m;i++)&#123; if(i&amp;1)ans=(ans-C(m,i)*qpow(m-i,n,p)%p+p)%p; else ans=(ans+C(m,i)*qpow(m-i,n,p)%p)%p; &#125; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>逆元</tag>
        <tag>推公式</tag>
        <tag>组合数</tag>
        <tag>斯特林数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1946 特殊表示法（斐波那契性质，卡输入输出）]]></title>
    <url>%2F7d2b0472%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 众所周知，斐波那契数列是人们常用来讨论的一个递推式系数为整数而具有无理数递推式的数列。 F[0]=1;F[1]=1;F[2]=2;F[3]=3;F[4]=5;….. 下面规定，对一个数n，它的特殊表示法为 a[1]*F[1]+a[2]*F[2]+...a[n]*F[n]。其中a[1..n]为一个取值0/1的数列。（不包括F[0]）同时，规定a数列不存在两个相邻的1，并且a[n]=1。现在给两个数A和B的特殊表示法，需要你求出A+B的特殊表示法。保证n,m&lt;=1,000,000 Input第一行一个数n，表示A的特殊表示法的长度。第二行n个数，表示A的特殊表示法。第三行一个数m，表示B的特殊表示法的长度。第四行m个数，表示B的特殊表示法。 Output第一行一个数L，表示A+B的特殊表示法的长度。第二行L个数，表示A+B的特殊表示法。 Input示例123420 111 Output示例1230 0 1 题解：整整t了一个晚上一个早上加一个中午啊啊啊，一开始没思路就去看题解了，然后题解给了斐波那契的三个性质，说按照性质模拟即可，我只会用两个，然后t了，scanf改成读入挂read()，又t了，然后开始怀疑人生。。是不是因为没用第三个性质所以卡不过去？？然后就陷入了。。无边无际的发呆之中。。这个题卡的我TAT完全刷新了对输入输出的认识，总之最后读入直接getchar，输出putchar，ac。。 下面讲思路： 题解是说利用斐波那契的这三个性质： 123F[i]+F[i+1]=F[i+2]2f(i)=F(i-2)+F(i+1)∑f(i)&#123;i=1~n&#125;=f(n+2)-1 做这题之前还真没发现斐波那契数列有第三个性质，推导过程如下： 123456789f(0)+f(1)=f(2)f(1)+f(2)=f(3)f(2)+f(3)=f(4)...f(n-2)+f(n-1)=f(n)f(n-1)+f(n)=f(n+1)f(n)+f(n+1)=f(n+2)叠加抵消得∑f(i)&#123;i=1~n&#125;=f(n+2)-f(1)，即∑f(i)=f(n+2)-1， 但是事实是。。我用不来啊。。懵逼 所以就利用第一二个性质，因为特殊表示只有0，1存在，所以相加后的数组，有2出现的话都是要处理掉的，问题在于怎么处理能不遗漏且最简 先从前往后把2处理一遍，处理方法用性质1和2，每次处理都要更新n，因为如果有操作i+1之类的话，最后的长度会变大，然后对于a[1]，a[2]来说需要特判，这里有个问题0.0，我后来看了榜里别人的代码，在对于a[2]=3的处理中，我认为应该是下面这样，但是我看了两个人的代码他们写的都是a[2]–，虽然两种都ac了，但是？？？？？。。。。。 1234if(a[2]==3)&#123; a[3]++;a[2]-=2;a[1]++; n=max(n,3);&#125; 倒着处理完了之后，再正着处理几遍，原理很简单就利用性质1，比如样例1 1，就是0 0 1，一直往后推，直到磨几遍把这个序列都摊成01就可以了 读入直接getchar，输出putchar读入直接getchar，输出putchar读入直接getchar，输出putchar 好了至此这个题就a掉了，应该没啥坑点了0.0 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;using namespace std;const int N=1000005;int a[N];void read(int &amp;x)&#123; char ch=getchar();x=0; for(;ch&lt;'0'||ch&gt;'9';ch=getchar()); for(;ch&gt;='0'&amp;&amp;ch&lt;='9';ch=getchar())x=x*10+ch-'0';&#125;int main()&#123; int n,m,c; scanf("%d",&amp;n);getchar(); for(int i=1;i&lt;=n;i++)a[i]=getchar()-'0',getchar(); scanf("%d",&amp;m);getchar(); for(int i=1;i&lt;=m;i++)&#123; c=getchar()-'0',getchar(); a[i]+=c; &#125; n=max(m,n); for(int i=n;i&gt;=3;i--)&#123; if(a[i]&gt;=2)&#123; a[i+1]++;a[i]-=2;a[i-2]++; n=max(n,i+1); &#125; if(a[i]&amp;&amp;a[i-1])&#123; a[i+1]++;a[i]--;a[i-1]--; n=max(n,i+1); &#125; &#125; //for(int i=1;i&lt;=n;i++)printf("%d ",a[i]); if(a[2]==3)&#123; a[3]++;a[2]-=2;a[1]++; n=max(n,3); &#125; else if(a[1]&gt;=2&amp;&amp;!a[2])&#123; a[2]++;a[1]-=2; n=max(n,2); &#125; while(1)&#123; bool flag=0; for(int i=1;i&lt;=n;i++)&#123; if(a[i]&amp;&amp;a[i+1]&amp;&amp;!a[i+2])&#123; a[i+2]++;a[i]--;a[i+1]--; n=max(n,i+2); flag=1; &#125; &#125; if(!flag)break; &#125; printf("%d\n",n); for(int i=1;i&lt;=n;i++)putchar(a[i]+48),putchar(' '); printf("\n"); return 0;&#125;]]></content>
      <categories>
        <category>模拟</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>斐波那契</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 2000 四边形分割平面（n个m边形分割平面公式推导）]]></title>
    <url>%2Fde762ff3%2F</url>
    <content type="text"><![CDATA[题目来源： syu比赛题基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 用N个四边方形最多可以把平面分成几个区域? Input第一行输入一个整数T，表示数据组数（1&lt;=T&lt;=10000）；第二行输入一个正整数n(1&lt;=n&lt;=1000)； Output对于每组数据，请输出结果。 Input示例123212 Output示例12210 题解：这题可以扩展为n个m边形最多可以把平面分成几个区域 首先f(1)=2对任意m都成立 然后求递推式f(n)=f(n-1)+2*m(n-1)，就拿四边形来举例 要加上第三个四边形的时候，四条边一条一条加，看图可以发现多加的红边实际上就是切割了已有的两个四边形的角，从而产生了四个蓝圈内的新区域，总共可以加四条红边，所以每加一个四边形增加的区域数就是2*4*(n-1) 所以对m边形来说，每加一个m边形增加的区域数为2*m(n-1)，即证 代码：123456789101112131415161718192021222324252627282930#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long long const int N=1005;LL f[N];void init()&#123; f[1]=2; for(int i=2;i&lt;N;i++)f[i]=f[i-1]+8*(i-1);&#125;int main()&#123; int t,n; init(); scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); printf("%lld\n",f[n]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
        <tag>分割平面</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1960 范德蒙矩阵（贪心）]]></title>
    <url>%2Fe98fffcf%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 40 难度：4级算法题 LYK最近在研究范德蒙矩阵与矩阵乘法，一个范德蒙矩阵的形式如下： 它想通过构造一个含有1~nm的n*m的矩阵G，使得G*V得到的n*n的矩阵T中所有位置上的元素之和最大。其中n,m&lt;=100000，ai&lt;=2*10^9你只需输出这个值对1e9+7取模后的结果。 在样例中，矩阵G为 121 42 3 当然可能存在其它的方法使得答案最大。 Input第一行两个数n,m，接下来一行m个数表示ai。 Output一个数表示答案 Input示例122 22 3 Output示例137 题解：不会写_ (:з」∠) _ ，看了题解的，矩阵忘的差不多了。。 其实不难，只要发现G矩阵中Gij对答案的贡献是Gij*V&#39;中第j行所有元素之和，那就可以想到贪心获取最大值了 贪心思路是：先给ai排个序，1-mn中大的数肯定优先和大的ai乘 第j行所有元素之和可以直接用等比数列搞一搞，要注意a=1和a&gt;=mod的特殊情况，也就是(a1^n-1)/(a1-1)，这里有除法就要用一下逆元，费马小定理，最后按照贪心顺序存入b数组中 最后的答案就是:b[0]*∑[1~n]+b[1]*∑[n+1~2n]+b[2]*∑[2n+1~3n]+...+b[m-1]*[n*(m-1)+1~mn] 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long long const LL p=1000000007;const int N=100005;LL a[N],b[N],res,n,m;LL qpow(LL a,LL b)&#123; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=(ans*a)%p; b--; &#125; b&gt;&gt;=1; a=a*a%p; &#125; return ans;&#125;int main()&#123; scanf("%lld%lld",&amp;n,&amp;m); for(int i=0;i&lt;m;i++)scanf("%lld",&amp;a[i]); sort(a,a+m); for(int i=0;i&lt;m;i++)&#123; a[i]=(a[i]+p)%p; if(a[i]==0)b[i]=1; else if(a[i]==1)b[i]=n; else b[i]=(qpow(a[i],n)-1+p)*qpow(a[i]-1,p-2)%p; &#125; res=0; LL num=(n*(n+1)/2)%p; for(int i=0;i&lt;m;i++)&#123; res=(res+num*b[i]%p)%p; num=(num+n*n)%p; &#125; printf("%lld\n",res); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 2133 排队接水（贪心）]]></title>
    <url>%2Fd2c81766%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 5 难度：1级算法题 n个人一起排队接水，第i个人需要b[i]的时间来接水。1 &lt;= n &lt;= 10000 &lt;= b[i] &lt;= 1000同时只能有一个人接水，正在接水的人和没有接水的人都需要等待。完成接水的人会立刻消失，不会继续等待。你可以决定所有人接水的顺序，并希望最小化所有人等待时间的总和。 Input第一行一个整数n 接下来n行，每行一个整数表示b[i] Output一行一个整数，表示所有人等待时间的总和的最小值 Input示例12343123 Output示例110 题解：水。。 贪心，等待时间长的人先打水，这样这个数字要乘上的次数就小 代码：12345678910111213141516171819202122232425262728293031#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long long const int N=1005;int a[N];bool cmp(int a,int b)&#123; return a&gt;b;&#125;int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d",&amp;a[i]); sort(a,a+n,cmp); LL ans=0; for(int i=0;i&lt;n;i++)&#123; ans+=a[i]*(i+1); &#125; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1019 逆序数（树状数组，归并排序）]]></title>
    <url>%2Fcf682b8e%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。 如2 4 3 1中，2 1，4 3，4 1，3 1是逆序，逆序数是4。给出一个整数序列，求该序列的逆序数。 Input第1行：N，N为序列的长度（n &lt;= 50000)第2 - N + 1行：序列中的元素（0 &lt;= A[i] &lt;= 10^9） Output输出逆序数 Input示例1234542431 Output示例14 题解：先是树状数组，原理就是排序思想加上区间求和和点更新，（用线段树也有一样的效果），62ms 首先一般的排序思想是这样的：比如对4 2 3 1这个序列来说，先找最小的1，在他前面有三个数，那么记下+3，把这个1变成0，然后找2，在他前面有一个数，记下+1，把2变成0，然后3前面有一个数，记下+1，3变成0，答案就是3+1+1=5 怎么和树状数组联系到一块呢，比如当前4 2 3 1对应着1 1 1 1，然后第四个位置前面有三个1，区间求和，答案加3 树状数组具体操作是倒过来的，一开始都是0 0 0 0，然后第一位的数字是“4”，是第四小，先更新为1，即0 0 0 1，然后求和[1,4]得1，答案加上（i-1=0），然后第二位数字是“2”，是第二小，更新为1，即0 1 0 1，然后求和[1,2]得1，答案加上（i-1=1），第三位数字是3，是第三小，更新为1，即0 1 1 1，求和[1,3]得2，答案加上（i-2=1），第四位数字是1，第一小，1 1 1 1，求和[1,1]得1，答案加上（i-1=3），所以逆序数就是0+1+1+3=5， 要先离散化一波，具体见代码 第二种方法是归并排序，冒泡儿水不过去╮(￣▽￣””)╭ 那么问题在于归并排序的逆序数咋求，这时候就要在“并”里加句妙妙的话，ans+=(m-q)，见代码 举个例子: 1 3 4 2 5 6 l mid mid+1 r 填入1，然后判断3&gt;2在右边选择2填的时候，3和3后面的所有数（即3，4）都大于2，所以这时候逆序数就加2 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=50005;int c[N],n,tmp[N];int lowbit(int x)&#123; return (x&amp;-x);&#125;LL sum(int x)&#123;//求和1～x LL ans=0; while(x&gt;0)&#123; ans+=c[x]; x-=lowbit(x); &#125; return ans;&#125;void add(int x,int d)&#123;//更新 while(x&lt;=n)&#123; c[x]+=d; x+=lowbit(x); &#125;&#125;int main()&#123; pair&lt;int,int&gt;a[N]; int ans=0; scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++)&#123;//first记录数字，second记录数字所在位子 scanf("%d",&amp;a[i].first); a[i].second=i; &#125; sort(a+1,a+1+n); for(int i=1;i&lt;=n;i++)tmp[a[i].second]=i; //tmp[i]存的是第i位上的数排第几小 //和上面结合起来其实是做了离散化的操作 for(int i=1;i&lt;=n;i++)&#123; add(tmp[i],1); ans+=i-sum(tmp[i]); &#125; printf("%d\n",ans); return 0;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=100005;int ans=0,a[N],c[N];void merges(int l,int mid,int r)&#123;//并 int p=l,q=l,m=mid+1; while(p&lt;=mid&amp;&amp;m&lt;=r)&#123; if(a[p]&lt;=a[m])c[q++]=a[p++]; else&#123; c[q++]=a[m++]; ans+=(m-q);//计算逆序数 &#125; &#125; while(p&lt;=mid)c[q++]=a[p++]; while(m&lt;=r)c[q++]=a[m++]; for(int i=l;i&lt;q;i++)a[i]=c[i];&#125;void merge_sort(int l,int r)&#123;//归 if(l&lt;r)&#123; int m=(l+r)/2; merge_sort(l,m); merge_sort(m+1,r); merges(l,m,r); &#125;&#125;int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d",&amp;a[i]); merge_sort(0,n-1); printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>归并排序</tag>
        <tag>树状数组</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1005 大数加法]]></title>
    <url>%2F1076b80c%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 给出2个大整数A,B，计算A+B的结果。 Input第1行：大数A第2行：大数B(A,B的长度 &lt;= 10000 需注意：A B有可能为负数） Output输出A + B Input示例1268932147586468711654886 Output示例1537643802472 12345678910111213141516import java.io.*; import java.math.*;import java.util.*;public class Main&#123; public static void main(String[] args)&#123; Scanner cin=new Scanner(System.in); int t; BigInteger a,b,c; a=cin.nextBigInteger(); b=cin.nextBigInteger(); c=a.add(b); System.out.println(c); cin.close(); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1008 N的阶乘 mod P]]></title>
    <url>%2Fba46f35b%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 输入N和P（P为质数），求N! Mod P = ? (Mod 就是求模 %) 例如：n = 10， P = 11，10! = 36288003628800 % 11 = 10 Input两个数N,P，中间用空格隔开。(N &lt; 10000, P &lt; 10^9) Output输出N! mod P的结果。 Input示例110 11 Output示例110 123456789101112131415#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;using namespace std;#define LL long longint main()&#123; LL n,p,ans=1; scanf("%lld%lld",&amp;n,&amp;p); for(int i=1;i&lt;=n;i++)&#123; ans=(ans*i)%p; &#125; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1000 A + B]]></title>
    <url>%2F9c67c163%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 给出2个整数A和B，计算两个数的和。 Input2个整数A B，中间用空格分割。（0 &lt;= A, B &lt;= 10^9） Output输出A + B的计算结果。 Input示例11 2 Output示例13 不集齐全部题目。。就有点。。难受 123456789101112#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;using namespace std;#define LL long longint main()&#123; LL a,b; scanf("%lld%lld",&amp;a,&amp;b); printf("%lld\n",a+b); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1012 最小公倍数LCM]]></title>
    <url>%2Fec404005%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 输入2个正整数A，B，求A与B的最小公倍数。 Input2个数A,B，中间用空格隔开。(1&lt;= A,B &lt;= 10^9) Output输出A与B的最小公倍数。 Input示例130 105 Output示例1210 123456789101112131415#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;using namespace std;#define LL long longLL gcd(LL a,LL b)&#123; return b==0?a:gcd(b,a%b);&#125;int main()&#123; LL a,b; scanf("%lld%lld",&amp;a,&amp;b); printf("%lld\n",a*b/gcd(a,b)); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>gcd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1018 排序]]></title>
    <url>%2F5fc91746%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 给出N个整数，对着N个整数进行排序 Input第1行：整数的数量N（1 &lt;= N &lt;= 50000)第2 - N + 1行：待排序的整数（-10^9 &lt;= A[i] &lt;= 10^9） Output共n行，按照递增序输出排序好的数据。 Input示例123456554321 Output示例1234512345 归并排序 sort 原来不写一堆头文件会变快的么0.0？？sort那个去了一堆头文件之后从203ms到了15ms。。。 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=50005;int a[N],c[N];void merges(int l,int mid,int r)&#123;//并 int p=l,q=l,m=mid+1; while(p&lt;=mid&amp;&amp;m&lt;=r)&#123; if(a[p]&lt;=a[m])c[q++]=a[p++]; else&#123; c[q++]=a[m++]; &#125; &#125; while(p&lt;=mid)c[q++]=a[p++]; while(m&lt;=r)c[q++]=a[m++]; for(int i=l;i&lt;q;i++)a[i]=c[i];&#125;void merge_sort(int l,int r)&#123;//归 if(l&lt;r)&#123; int m=(l+r)/2; merge_sort(l,m); merge_sort(m+1,r); merges(l,m,r); &#125;&#125;int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d",&amp;a[i]); merge_sort(0,n-1); for(int i=0;i&lt;n;i++)printf("%d\n",a[i]); return 0;&#125; 1234567891011121314#include&lt;stdio.h&gt;#include&lt;algorithm&gt;using namespace std;const int N=50005;int a[N];int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d",&amp;a[i]); sort(a,a+n); for(int i=0;i&lt;n;i++)printf("%d\n",a[i]); return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1011 最大公约数GCD]]></title>
    <url>%2F57427b30%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 输入2个正整数A，B，求A与B的最大公约数。 Input2个数A,B，中间用空格隔开。(1&lt;= A,B &lt;= 10^9) Output输出A与B的最大公约数。 Input示例130 105 Output示例115 毫无意义的水了一发。。只是想把51nod基础题那个分类凑齐而已。。 1234567891011121314#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;using namespace std;int gcd(int a,int b)&#123; return b==0?a:gcd(b,a%b);&#125;int main()&#123; int a,b; scanf("%d%d",&amp;a,&amp;b); printf("%d\n",gcd(a,b)); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>gcd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1027 大数乘法（java大数）]]></title>
    <url>%2F47a64668%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 给出2个大整数A,B，计算A*B的结果。 Input第1行：大数A第2行：大数B(A,B的长度 &lt;= 1000，A,B &gt;= 0） Output输出A * B Input示例12123456234567 Output示例128958703552 水。。1234567891011121314import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger a,b; a=cin.nextBigInteger(); b=cin.nextBigInteger(); System.out.println(a.multiply(b)); cin.close(); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1006 最长公共子序列Lcs（dp+路径打印）]]></title>
    <url>%2F6bb0247a%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 给出两个字符串A B，求A与B的最长公共子序列（子序列不要求是连续的）。 比如两个串为： abcicbaabdkscab ab是两个串的子序列，abc也是，abca也是，其中abca是这两个字符串最长的子序列。 Input第1行：字符串A 第2行：字符串B (A,B的长度 &lt;= 1000) Output输出最长的子序列，如果有多个，随意输出1个。 Input示例12abcicbaabdkscab Output示例1abca 题解：基础lcs加上一个路径打印 dp[i][j]表示s1的前i个和s2的前j个的最长公共子序列 状态转移方程是 dp[i+1][j+1]=max(dp[i+1][j],dp[i][j+1],dp[i][j]+(s1[i]==s2[j]?1:0)) 路径打印见代码注释，根据dp关系写出路径 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=1005;char s1[N],s2[N],ans[N];int dp[N][N],len1,len2;void lcs()&#123; for(int i=0;i&lt;len1;i++)&#123; for(int j=0;j&lt;len2;j++)&#123; if(s1[i]==s2[j])dp[i+1][j+1]=dp[i][j]+1; else dp[i+1][j+1]=max(dp[i+1][j],dp[i][j+1]); &#125; &#125;&#125;int main()&#123; scanf("%s %s",s1,s2); len1=strlen(s1);len2=strlen(s2); lcs(); int c1=len1-1,c2=len2-1; int ji=0; while(c1&gt;=0&amp;&amp;c2&gt;=0)&#123; if(s1[c1]==s2[c2])&#123; ans[ji++]=s1[c1]; c1--;c2--; &#125; else if(dp[c1+1][c2]&gt;=dp[c1][c2+1])c2--; //说明答案出自s1的[0,c1]和s2的[0,c2-1] else c1--; //同理答案出自s1的[0,c1-1]和s2的[0,c2] &#125; for(int i=ji-1;i&gt;=0;i--)printf("%c",ans[i]); printf("\n"); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>lcs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1066 Bash游戏（巴什博弈）]]></title>
    <url>%2Ff715085c%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 有一堆石子共有N个。A B两个人轮流拿，A先拿。每次最少拿1颗，最多拿K颗，拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出N和K，问最后谁能赢得比赛。 例如N = 3，K = 2。无论A如何拿，B都可以拿到最后1颗石子。 Input第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 10000) 第2 - T + 1行：每行2个数N，K。中间用空格分隔。（1 &lt;= N,K &lt;= 10^9) Output共T行，如果A获胜输出A，如果B获胜输出B。 Input示例1234543 24 27 38 3 Output示例1234BAAB 题解：hdu 1846 Brave Game（巴什博弈） 代码：123456789101112131415161718192021222324#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int t; scanf("%d",&amp;t); while(t--)&#123; int n,k; scanf("%d%d",&amp;n,&amp;k); if(n%(k+1)==0)puts("B"); else puts("A"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>巴什博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1046 A^B Mod C（快速幂）]]></title>
    <url>%2F3c67f84b%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 给出3个正整数A B C，求A^B Mod C。 例如，3 5 8，3^5 Mod 8 = 3。 Input3个正整数A B C，中间用空格分隔。(1 &lt;= A,B,C &lt;= 10^9) Output输出计算结果 Input示例13 5 8 Output示例13 代码：1234567891011121314151617181920212223242526272829303132#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long long LL qpow(LL a,LL b,LL p)&#123; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=(ans*a)%p; b--; &#125; b&gt;&gt;=1; a=a*a%p; &#125; return ans;&#125;int main()&#123; LL a,b,c; scanf("%lld%lld%lld",&amp;a,&amp;b,&amp;c); printf("%lld\n",qpow(a,b,c)); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1069 Nim游戏（尼姆博弈）]]></title>
    <url>%2Fc2af3f7c%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 有N堆石子。A B两个人轮流拿，A先拿。每次只能从一堆中取若干个，可将一堆全取走，但不可不取，拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出N及每堆石子的数量，问最后谁能赢得比赛。 例如：3堆石子，每堆1颗。A拿1颗，B拿1颗，此时还剩1堆，所以A可以拿到最后1颗石子。 Input第1行：一个数N，表示有N堆石子。（1 &lt;= N &lt;= 1000) 第2 - N + 1行：N堆石子的数量。(1 &lt;= A[i] &lt;= 10^9) Output如果A获胜输出A，如果B获胜输出B。 Input示例12343111 Output示例1A 题解：[hdu 2176 取(m堆)石子游戏（尼姆博弈）]https://leflacon.github.io/42b4455d/ 代码：1234567891011121314151617181920212223242526#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=200005;int main()&#123; int n; scanf("%d",&amp;n); int sum=0,c[N]; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;c[i]); sum^=c[i]; &#125; if(sum==0)printf("B\n"); else printf("A\n"); return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>尼姆博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1049 最大子段和（dp）]]></title>
    <url>%2F84babd30%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB N个整数组成的序列a[1],a[2],a[3],…,a[n]，求该序列如a[i]+a[i+1]+…+a[j]的连续子段和的最大值。当所给的整数均为负数时和为0。 例如：-2,11,-4,13,-5,-2，和最大的子段为：11,-4,13。和为20。 Input第1行：整数序列的长度N（2 &lt;= N &lt;= 50000)第2 - N + 1行：N个整数（-10^9 &lt;= A[i] &lt;= 10^9） Output输出最大子段和。 Input示例12345676-211-413-5-2 Output示例120 题解：dp[i]表示以a[i]结尾的最大子段和是多少 状态转移方程 dp[i]=max(a[i],dp[i-1]+a[i])，也就是说如果dp[i-1]小于0，那么前面都不要了直接从a[i]继续连 代码：1234567891011121314151617181920212223242526272829#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=50005;LL a[N],dp[N];int main()&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%lld",&amp;a[i]); LL ans=a[0]; dp[0]=a[0]; for(int i=1;i&lt;n;i++)&#123; dp[i]=max(a[i],dp[i-1]+a[i]); ans=max(ans,dp[i]); &#125; printf("%lld\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1072 威佐夫游戏]]></title>
    <url>%2Fec8b12a4%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 有2堆石子。A B两个人轮流拿，A先拿。每次可以从一堆中取任意个或从2堆中取相同数量的石子，但不可不取。拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出2堆石子的数量，问最后谁能赢得比赛。 例如：2堆石子分别为3颗和5颗。那么不论A怎样拿，B都有对应的方法拿到最后1颗。 Input第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 10000) 第2 - T + 1行：每行2个数分别是2堆石子的数量，中间用空格分隔。(1 &lt;= N &lt;= 2000000) Output共T行，如果A获胜输出A，如果B获胜输出B。 Input示例123433 53 41 9 Output示例123BAA 水。。 威佐夫博弈原理在博客的这篇里 –&gt; hdu 2177 取(2堆)石子游戏（威佐夫博弈）https://leflacon.github.io/eb18b91b/ 代码：1234567891011121314151617181920212223242526#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int a,b,t; scanf("%d",&amp;t); while(t--)&#123; scanf("%d%d",&amp;a,&amp;b); if(a&gt;b)&#123; int temp=a;a=b;b=temp; &#125; if((int)((sqrt(5)+1)*(b-a)/2)==a)printf("B\n"); else printf("A\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>威佐夫博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1088 最长回文子串（Manacher算法）]]></title>
    <url>%2Fb4c7585b%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 回文串是指aba、abba、cccbccc、aaaa这种左右对称的字符串。输入一个字符串Str，输出Str里最长回文子串的长度。 Input输入Str（Str的长度 &lt;= 1000） Output输出最长回文子串的长度L。 Input示例1daabaac Output示例15 题解：这题数据范围水。。不用马拉车也能水过去，1089那题必须用o(n)的马拉车 最长回文子串——Manacher 算法 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=100005;int p[N&lt;&lt;1],ji,len,ans=0,maxl=0,cur=0;char s[N],ss[N&lt;&lt;1];void init()&#123; ji=0; ss[ji]='@'; for(int i=0;i&lt;len;i++)&#123; ss[++ji]='#'; ss[++ji]=s[i]; &#125; ss[++ji]='#';&#125;void manacher()&#123; len=ji; for(int i=1;i&lt;ji;i++)&#123; if(i&lt;maxl)p[i]=min(maxl-i,p[2*cur-i]);//小于最长边界 else p[i]=1;//边界外，初始化为1，然后扩展直到不配对 while(ss[i+p[i]]==ss[i-p[i]])p[i]++;//直到不配对 ans=max(ans,p[i]);//更新答案 if(p[i]+i&gt;maxl)&#123;//更新最长边界 cur=i; maxl=p[i]+i; &#125; &#125;&#125;int main()&#123; scanf("%s",s); len=strlen(s); init(); manacher(); printf("%d\n",ans-1); return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>Manacher</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1057 N的阶乘（java大数）]]></title>
    <url>%2Fd377a60d%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 输入N求N的阶乘的准确值。 Input输入N(1 &lt;= N &lt;= 10000) Output输出N的阶乘 Input示例15 Output示例1120 水一发java。。 代码：123456789101112131415import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger n; n=cin.nextBigInteger(); int num=n.intValue(); for(int i=1;i&lt;num;i++)n=n.multiply(BigInteger.valueOf(i)); System.out.println(n); cin.close(); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1089 最长回文子串 V2（Manacher算法）]]></title>
    <url>%2Fe4c2cc13%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 回文串是指aba、abba、cccbccc、aaaa这种左右对称的字符串。 输入一个字符串Str，输出Str里最长回文子串的长度。 Input输入Str（Str的长度 &lt;= 100000) Output输出最长回文子串的长度L。 Input示例1daabaac Output示例15 题解：对马拉车算法的原理还是半知半解乱七八糟。。以后再想吧。。 最长回文子串——Manacher 算法 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=100005;int p[N&lt;&lt;1],ji,len,ans=0,maxl=0,cur=0;char s[N],ss[N&lt;&lt;1];void init()&#123; ji=0; ss[ji]='@'; for(int i=0;i&lt;len;i++)&#123; ss[++ji]='#'; ss[++ji]=s[i]; &#125; ss[++ji]='#';&#125;void manacher()&#123; len=ji; for(int i=1;i&lt;ji;i++)&#123; if(i&lt;maxl)p[i]=min(maxl-i,p[2*cur-i]);//小于最长边界 else p[i]=1;//边界外，初始化为1，然后扩展直到不配对 while(ss[i+p[i]]==ss[i-p[i]])p[i]++;//直到不配对 ans=max(ans,p[i]);//更新答案 if(p[i]+i&gt;maxl)&#123;//更新最长边界 cur=i; maxl=p[i]+i; &#125; &#125;&#125;int main()&#123; scanf("%s",s); len=strlen(s); init(); manacher(); printf("%d\n",ans-1); return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>Manacher</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1058 N的阶乘的长度（斯特林公式）]]></title>
    <url>%2Fd51ad0f1%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 输入N求N的阶乘的10进制表示的长度。例如6! = 720，长度为3。 Input输入N(1 &lt;= N &lt;= 10^6) Output输出N的阶乘的长度 Input示例16 Output示例13 又水了一题。。 关于斯特林公式的解释看这篇1130 N的阶乘的长度 V2（斯特林公式取n阶乘位数） 代码：12345678910111213141516171819202122#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst double PI=asin(1.0)*2,e=2.718281828459;int main()&#123; int n; cin&gt;&gt;n; LL ans=0.5*log10(2.0*PI*n)+n*log10(1.0*n/e)+1; cout&lt;&lt;ans&lt;&lt;endl;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>斯特林公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1081 子段求和（前缀和，树状数组，线段树）]]></title>
    <url>%2F304f1fc6%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 给出一个长度为N的数组，进行Q次查询，查询从第i个元素开始长度为l的子段所有元素之和。例如，1 3 7 9 -1，查询第2个元素开始长度为3的子段和，1 {3 7 9} -1。3 + 7 + 9 = 19，输出19。 Input第1行：一个数N，N为数组的长度(2 &lt;= N &lt;= 50000)。 第2 至 N + 1行：数组的N个元素。(-10^9 &lt;= N[i] &lt;= 10^9)第N + 2行：1个数Q，Q为查询的数量。 第N + 3 至 N + Q + 2行：每行2个数，i，l（1 &lt;= i &lt;= N，i + l &lt;= N) Output共Q行，对应Q次查询的计算结果。 Input示例123456789101151379-141 22 23 21 5 Output示例12344101619 题解：第一段先水一波前缀和,281ms 第二段再水一波树状数组，281ms 之前一直不是很懂树状数组原理，看了这篇突然有点懂了0.0 搞懂树状数组 第三段最后水一波线段树，312ms 代码：1234567891011121314151617181920212223242526272829303132#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=50005;LL sum[N];int main()&#123; int n,q,l,r; LL c; scanf("%d",&amp;n); sum[0]=0; for(int i=1;i&lt;=n;i++)&#123; scanf("%lld",&amp;c); sum[i]=sum[i-1]+c; &#125; scanf("%d",&amp;q); while(q--)&#123; scanf("%d%d",&amp;l,&amp;r); printf("%lld\n",sum[l+r-1]-sum[l-1]); &#125; return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=50005;LL c[N],a[N],n;int lowbit(int x)&#123; return (x&amp;-x);&#125;LL sum(int x)&#123;//求和1～x LL ans=0; while(x&gt;0)&#123; ans+=c[x]; x-=lowbit(x); &#125; return ans;&#125;void add(int x,int d)&#123;//更新 while(x&lt;=n)&#123; c[x]+=d; x+=lowbit(x); &#125;&#125;int main()&#123; int q,l,r; LL c; scanf("%lld",&amp;n); for(int i=1;i&lt;=n;i++)&#123; scanf("%lld",&amp;a[i]); add(i,a[i]); &#125; scanf("%d",&amp;q); while(q--)&#123; scanf("%d%d",&amp;l,&amp;r); printf("%lld\n",sum(l+r-1)-sum(l-1)); &#125; return 0;&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long long#define lson l,m,rt&lt;&lt;1#define rson m+1,r,rt&lt;&lt;1|1const int N=50005;LL sum[N&lt;&lt;2];void pushup(int rt)&#123; sum[rt]=sum[rt&lt;&lt;1]+sum[rt&lt;&lt;1|1];&#125; void build(int l,int r,int rt)&#123; if(l==r)&#123; scanf("%lld",&amp;sum[rt]); return; &#125; int m=(l+r)&gt;&gt;1; build(lson); build(rson); pushup(rt);&#125;void update(int p,int add,int l,int r,int rt)&#123; if(l==r)&#123; sum[rt]+=add; return; &#125; int m=(l+r)&gt;&gt;1; if(p&lt;=m)update(p,add,lson); else update(p,add,rson); pushup(rt);&#125;LL query(int L,int R,int l,int r,int rt)&#123; if(L&lt;=l&amp;&amp;R&gt;=r)&#123; return sum[rt]; &#125; int m=(l+r)&gt;&gt;1; LL ans=0; if(L&lt;=m)ans+=query(L,R,lson); if(R&gt;m)ans+=query(L,R,rson); return ans;&#125; int main()&#123; int n,m; scanf("%d",&amp;n); build(1,n,1); scanf("%d",&amp;m); while(m--)&#123; int a,b; scanf("%d%d",&amp;a,&amp;b); printf("%lld\n",query(a,a+b-1,1,n,1)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>前缀和</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1257 背包问题 V3（分数规划，二分）]]></title>
    <url>%2Ff0565075%2F</url>
    <content type="text"><![CDATA[基准时间限制：3 秒 空间限制：131072 KB 51nod5级算法题 N个物品的体积为W1，W2……Wn（Wi为整数），与之相对应的价值为P1,P2……Pn（Pi为整数），从中选出K件物品（K &lt;= N)，使得单位体积的价值最大。 Input第1行：包括2个数N, K(1 &lt;= K &lt;= N &lt;= 50000) 第2 - N + 1行：每行2个数Wi, Pi（1 &lt;= Wi, Pi &lt;= 50000) Output输出单位体积的价值（用约分后的分数表示）。 Input示例12343 22 25 32 1 Output示例13/4 题解：一开始以为是贪心，直接取pi/wi最大的那k个，然后想想不对，因为如果p1=1,p2=101,w1=1000,w2=100000,如果照这种贪心策略就取第二个，但是这样体积很大，假如当前最优的W，P还需这两个之中的一个，那么(1+P)/(1000+W)可能比(101+P)/(100000+W)更优 所以贪心只能保证个体最优，却不能保证全局最优 这题的思路应当是二分单位体积最大价值，然后判断是否合法即可，也有用到贪心，不过不是上面那种贪心思路 判断是否合法的方法是，假设单位体积最大价值是p，wp[i].v=wp[i].p-wp[i].w*p，wp[i].w*p是当前物品体积需要的价值，然后就是贪心取最大的k个将其v值相加，判断是否大于等于0即可，因为反正多退少补的原则，大于等于0就合法 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long long#define eps 1e-6const int N=50005;LL x,y;int n,k;struct WP&#123; int w,p; double v;&#125;wp[N];bool cmp(struct WP wp1,struct WP wp2)&#123; return wp1.v&gt;wp2.v;&#125;LL gcd(LL a,LL b)&#123; return b==0?a:gcd(b,a%b);&#125;bool ok(double p)&#123; for(int i=0;i&lt;n;i++)wp[i].v=wp[i].p-wp[i].w*p; sort(wp,wp+n,cmp); x=0;y=0;double lp=0.0; for(int i=0;i&lt;k;i++)&#123; x+=wp[i].p; y+=wp[i].w; lp+=wp[i].v; &#125; if(lp&gt;=0)return true; else return false;&#125;int main()&#123; scanf("%d%d",&amp;n,&amp;k); for(int i=0;i&lt;n;i++)scanf("%d%d",&amp;wp[i].w,&amp;wp[i].p); double l=0,r=50000,m; LL fz,fm; while(fabs(l-r)&gt;eps)&#123; m=(l+r)/2; if(ok(m))&#123; l=m; fz=x;fm=y; &#125; else r=m; &#125; LL G=gcd(max(fz,fm),min(fz,fm)); fz/=G; fm/=G; printf("%lld/%lld\n",fz,fm); return 0;&#125;]]></content>
      <categories>
        <category>二分</category>
      </categories>
      <tags>
        <tag>背包</tag>
        <tag>二分</tag>
        <tag>分数规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1086 背包问题 V2（二进制优化多重背包）]]></title>
    <url>%2Fe7b555f8%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 51nod4级算法题 有N种物品，每种物品的数量为C1，C2……Cn。从中任选若干件放在容量为W的背包里，每种物品的体积为W1，W2……Wn（Wi为整数），与之相对应的价值为P1,P2……Pn（Pi为整数）。求背包能够容纳的最大价值。 Input第1行，2个整数，N和W中间用空格隔开。N为物品的种类，W为背包的容量。(1 &lt;= N &lt;= 100，1 &lt;= W &lt;= 50000)第2 - N + 1行，每行3个整数，Wi，Pi和Ci分别是物品体积、价值和数量。(1 &lt;= Wi, Pi &lt;= 10000， 1 &lt;= Ci &lt;= 200) Output输出可以容纳的最大价值。 Input示例12343 62 2 53 3 81 4 1 Output示例19 题解：先是水水的01背包1085 背包问题（01背包） 这题与01背包不同在于每件物品有多个，思路还是一样，多一步把相同价值和重量的物品看成不同的物品，再按01背包的算法解决，但是01背包那个复杂度是o（n*W），多重背包的n相当于c1+c2+……+cn，所以用二进制进一步优化 不把n件相同物品看成不同的n件，而是看成(w,v),(2*w,2*v),(2^2*w,2^2*v)...这样的形式，比如有15个价值1重量1的物品，就看成（1，1）（2，2）（4，4）（8，8）这样四件物品，14个就看成（1，1）（2，2）（4，4）（7，7），不是直接看二进制为1的位，而是要保证分出来的这些数能凑出[1,c]的所有数，这样就能用少少的物品数涵盖所有情况了 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=1005;int dp[50005],w[N],p[N];int main()&#123; int n,W,ww,pp,c; scanf("%d%d",&amp;n,&amp;W); int ji=0; for(int i=1;i&lt;=n;i++)&#123; scanf("%d%d%d",&amp;ww,&amp;pp,&amp;c); int tmp=1; while(c)&#123; if(c&gt;=tmp)&#123; w[++ji]=tmp*ww; p[ji]=tmp*pp; c-=tmp; &#125; else&#123; w[++ji]=c*ww; p[ji]=c*pp; c=0; &#125; tmp*=2; &#125; &#125; for(int i=1;i&lt;=ji;i++)&#123; for(int j=W;j&gt;=w[i];j--) dp[j]=max(dp[j],dp[j-w[i]]+p[i]); &#125; printf("%d\n",dp[W]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1085 背包问题（01背包）]]></title>
    <url>%2Fcb821a33%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 在N件物品取出若干件放在容量为W的背包里，每件物品的体积为W1，W2……Wn（Wi为整数），与之相对应的价值为P1,P2……Pn（Pi为整数）。求背包能够容纳的最大价值。 Input第1行，2个整数，N和W中间用空格隔开。N为物品的数量，W为背包的容量。(1 &lt;= N &lt;= 100，1 &lt;= W &lt;= 10000)第2 - N + 1行，每行2个整数，Wi和Pi，分别是物品的体积和物品的价值。(1 &lt;= Wi, Pi &lt;= 10000) Output输出可以容纳的最大价值。 Input示例12343 62 53 84 9 Output示例114 题解：01背包水题 dp[w]表示容量为w能放的最大价值 dp[j]=max(dp[j],dp[j-w]+p);就是第i个物品不取和取 代码：1234567891011121314151617181920212223242526#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=10005;int dp[N],a[105];int main()&#123; int n,W,w,p; scanf("%d%d",&amp;n,&amp;W); for(int i=1;i&lt;=n;i++)&#123; scanf("%d%d",&amp;w,&amp;p); for(int j=W;j&gt;=w;j--) dp[j]=max(dp[j],dp[j-w]+p); &#125; printf("%d\n",dp[W]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1073 约瑟夫环（递推）]]></title>
    <url>%2F59d4cd0%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB N个人坐成一个圆环（编号为1 - N），从第1个人开始报数，数到K的人出列，后面的人重新从1开始报数。问最后剩下的人的编号。 例如：N = 3，K = 2。2号先出列，然后是1号，最后剩下的是3号。 Input2个数N和K，表示N个人，数到K出列。(2 &lt;= N, K &lt;= 10^6) Output最后剩下的人的编号 Input示例13 2 Output示例13 题解：好像是大一c++作业，当时还是直接模拟写的2333333 约瑟夫环结论见代码 证明如下： n个人，编号1-n，从1开始报数，报到k的退出，剩下人继续从1开始报数 第一个人编号（k%n）出列，剩下的n-1个人组成一个新的约瑟夫环，从编号（k%n+1）开始，k+1,k+2…n-2,n-1,n,1,2…k-2,k-1，编号k+1的人报1，那么重新编号一下k+1-&gt;1,k+2-&gt;2…k-2-&gt;n-2,k-1-&gt;n-1，变成了n-1个人报数的子问题 那么根据这个新编号可以得到变回原编号的方程，即得到n个人情况的解，变回去的公式是，x’=(x+k)%n，所以问题就结束了，递推，要知道n-1人问题的解，只需要知道n-2人问题的解，然后继续往前得知道n-3问题的解 令f[i]表示i个人玩游戏报k退出最后胜利者的编号，f[1]=1; f[i]=(f[i-1]+k)%i; (i&gt;1) 有了这个公式，从2-n顺序算出f[i]的数值，编号从1开始，所以最后答案输出f[n]+1 代码：123456789101112131415161718192021#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; int n,k; scanf("%d%d",&amp;n,&amp;k); int ans=0; for(int i=2;i&lt;=n;i++)ans=(ans+k)%i; printf("%d\n",ans+1); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>约瑟夫环</tag>
        <tag>推公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1106 质数检测（米勒罗宾判素数和直接判）]]></title>
    <url>%2F41f5723f%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 给出N个正整数，检测每个数是否为质数。如果是，输出”Yes”，否则输出”No”。 Input第1行：一个数N，表示正整数的数量。(1 &lt;= N &lt;= 1000)第2 - N + 1行：每行1个数(2 &lt;= S[i] &lt;= 10^9) Output输出共N行，每行为 Yes 或 No。 Input示例123456523456 Output示例12345YesYesNoYesNo 题解：第一个代码是不知出自何处的米勒罗宾判素数的模版，懒得研究了直接模版吧。。这里设置了50次循环 反正原理是费马小定理，假如a是整数，p是质数，且a,p互质，那么a^(p-1)%p=1恒成立， 即若 a^(p-1)%p !=1 (0&lt;a&lt;p)，p一定是合数，若 a^(p-1)%p ==1 (0&lt;a&lt;p) 则它可能是合数可能是素数，概率算法的概率就在这个 a上体现 第二个代码是榜上学来的方法，这个想法蛮妙蛮清晰的，跑的比第一个快，就是先埃筛，然后先直接干掉偶数，对于奇数n，向上取整根号n得到e，然后如果所有[2,e]的质数都不能整除n的话，那么n肯定是个质数 更新：第三个代码，米勒罗宾模版二号 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longbool Miller_Rabin(LL n)&#123; if(n==2)return true; if(n&lt;2||!(n&amp;1))return false; int cishu=20,ji=0; LL m=n-1; while(!(m&amp;1))&#123; ji++; m&gt;&gt;=1; &#125; srand(100); while(cishu--)&#123; LL a=rand()%(n-1)+1; LL x=qpow(a,m,n),tmp=0; for(int i=0;i&lt;ji;i++)&#123; tmp=mul(x,x,n); if(tmp==1&amp;&amp;x!=1&amp;&amp;x!=n-1)return false; x=tmp; &#125; if(tmp!=1)return false; &#125; return true;&#125;int main()&#123; int t,n; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); if(Miller_Rabin(n))puts("YES"); else puts("NO"); &#125; return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=100005;int vis[N],prime[N],ji=0;void init()&#123; for(int i=2;i&lt;N;i++)&#123;//埃筛素数 if(vis[i])continue; prime[ji++]=i; for(int j=2*i;j&lt;N;j+=i)vis[j]=true; &#125;&#125;int main()&#123; int t,n; init(); scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); if((n&amp;1)==0)&#123; puts(n==2?"YES":"NO"); continue; &#125; int e=(int)sqrt(n)+1,i; for(i=1;prime[i]&lt;=e;i++)if(n%prime[i]==0)break; puts(prime[i]&lt;=e?"NO":"YES"); &#125; return 0;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longLL mul(LL a,LL b,LL p)&#123; a%=p; LL res=0; while(b)&#123; if(b&amp;1)res=(res+a)%p; b&gt;&gt;=1; a=(a&lt;&lt;1)%p; &#125; return res;&#125;LL qpow(LL a,LL b,LL p)&#123; a%=p;b%=p; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=mul(ans,a,p); &#125; b&gt;&gt;=1; a=mul(a,a,p); &#125; return ans;&#125;bool Miller_Rabin(LL n)&#123; if(n==2)return true; if(n&lt;2||!(n&amp;1))return false; int cishu=2,ji=0; LL m=n-1; while(!(m&amp;1))&#123; ji++; m&gt;&gt;=1; &#125; srand(100); while(cishu--)&#123; LL a=rand()%(n-1)+1; LL x=qpow(a,m,n),tmp=0; for(int i=0;i&lt;ji;i++)&#123; tmp=mul(x,x,n); if(tmp==1&amp;&amp;x!=1&amp;&amp;x!=n-1)return false; x=tmp; &#125; if(tmp!=1)return false; &#125; return true;&#125;int main()&#123; int t,n; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); if(Miller_Rabin(n))puts("YES"); else puts("NO"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>埃筛素数</tag>
        <tag>米勒罗宾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1118 机器人走方格（组合数）]]></title>
    <url>%2F3697a1c%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB M * N的方格，一个机器人从左上走到右下，只能向右或向下走。有多少种不同的走法？由于方法数量可能很大，只需要输出Mod 10^9 + 7的结果。 Input第1行，2个数M,N，中间用空格隔开。（2 &lt;= m,n &lt;= 1000) Output输出走法的数量。 Input示例12 3 Output示例13 题解：C(m+n-2,m-1)，直接上组合数模版 组合数模版原理：a/x mod p=a*x^(p-2) mod p 证明： 由费马小定理有x^(p-1) mod p=1，即x*x^(p-2) mod p=1，x和x^(p-2)互为逆元，所以a/x mod p=a*x^(p-2) mod p成立 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int p=1000000007;LL qpow(LL a,LL b)&#123; LL ans=1; a%=p; while(b)&#123; if(b&amp;1)&#123; ans=ans*a%p; b--; &#125; b&gt;&gt;=1; a=a*a%p; &#125; return ans;&#125;LL C(LL n,LL m)&#123; if(m&gt;n)return 0; LL ans=1; for(int i=1;i&lt;=m;i++)&#123; LL a=(n+i-m)%p; LL b=i%p; ans=ans*(a*qpow(b,p-2)%p)%p; &#125; return ans;&#125;int main()&#123; LL m,n; scanf("%lld%lld",&amp;m,&amp;n); printf("%lld\n",C(m+n-2,m-1)); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>逆元</tag>
        <tag>组合数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1130 N的阶乘的长度 V2（斯特林公式取n阶乘位数）]]></title>
    <url>%2F41d56d9c%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 输入N求N的阶乘的10进制表示的长度。例如6! = 720，长度为3。 Input第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 1000) 第2 - T + 1行：每行1个数N。（1 &lt;= N &lt;= 10^9) Output共T行，输出对应的阶乘的长度。 Input示例12343456 Output示例123233 题解：stirling公式 因为这题是十进制，所以两边对10取对数得 [ ]表示取整，即LL ans=0.5*log10(2.0*PI*n)+n*log10(1.0*n/e)+1 同理，如果是a进制下的位数，数学公式懒得打了0.0直接放代码吧。。 LL ans=(0.5*log(2.0*PI*n)+n*log(1.0*n/e))/log(a)+1 代码：12345678910111213141516171819202122232425#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst double PI=asin(1.0)*2,e=2.718281828459;int main()&#123; int t,n; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); LL ans=0.5*log10(2.0*PI*n)+n*log10(1.0*n/e)+1; cout&lt;&lt;ans&lt;&lt;endl; &#125;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>斯特林公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1134 最长递增子序列（dp）]]></title>
    <url>%2Fc746a48a%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 给出长度为N的数组，找出这个数组的最长递增子序列。(递增子序列是指，子序列的元素是递增的） 例如：5 1 6 8 2 4 5 10，最长递增子序列是1 2 4 5 10。 Input第1行：1个数N，N为序列的长度(2 &lt;= N &lt;= 50000)第2 - N + 1行：每行1个数，对应序列的元素(-10^9 &lt;= S[i] &lt;= 10^9) Output输出最长递增子序列的长度。 Input示例1234567898516824510 Output示例15 题解：一开始暴力dp然后又T又wa的。。 123456for(int i=2;i&lt;=n;i++)&#123; for(int j=i-1;j&gt;=0;j--)&#123; if(a[i]&gt;a[j])dp[i]=max(dp[i],dp[j]+1); &#125; ans=max(ans,dp[i]);&#125; 优化的方法见代码： 对样例来说5，1，6，8，2，4，5，10，dp[1]=5，dp[1]=1，dp[2]=6，dp[3]=8，dp[2]=2，dp[3]=4，dp[4]=5，dp[5]=10，答案为5 代码：1234567891011121314151617181920212223242526272829303132333435#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=50005;int dp[N],a[N];int main()&#123; int n,len=0; scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++)&#123; scanf("%d",&amp;a[i]); dp[i]=1; &#125; for(int i=1;i&lt;=n;i++)&#123; if(i==1)dp[++len]=a[i]; else&#123; if(a[i]&gt;dp[len])dp[++len]=a[i]; else&#123; int cur=lower_bound(dp+1,dp+len+1,a[i])-dp; dp[cur]=a[i]; &#125; &#125; &#125; printf("%d\n",len); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1135 原根（原根性质）]]></title>
    <url>%2F8c5ac577%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 设m是正整数，a是整数，若a模m的阶等于φ(m)，则称a为模m的一个原根。（其中φ(m)表示m的欧拉函数） 给出1个质数P，找出P最小的原根。 Input输入1个质数P(3 &lt;= P &lt;= 10^9) Output输出P最小的原根。 Input示例13 Output示例12 题解：百度百科关于阶的解释： 其在数论中的定义为： 设a，p是整数，a和p互素，那么： 使 a^n≡1(mod p) 成立的最小正整数n叫做a模p的阶。 百度百科关于原根的性质： 原根具有以下性质： （1）可以证明，如果正整数(a,m) = 1和正整数 d 满足a^d≡1(mod m)，则 d 整除 φ(m)。因此Ordm(a)整除φ(m)。在例子中，当a= 3时，我们仅需要验证 3 的 1 、2、3 和 6 次方模 7 的余数即可。 （2）记δ = Ordm(a)，则a^1，……a^(δ-1)模 m 两两不同余。因此当a是模m的原根时，a^0,a^1，……a^(δ-1)构成模 m 的简化剩余系。 （3）模m有原根的充要条件是m= 1,2,4,p,2p,p^n，其中p是奇质数，n是任意正整数。 （4）对正整数(a,m) = 1，如果 a 是模 m 的原根，那么 a 是整数模n乘法群（即加法群 Z/mZ的可逆元，也就是所有与 m 互素的正整数构成的等价类构成的乘法群）Zn的一个生成元。由于Zn有 φ(m)个元素，而它的生成元的个数就是它的可逆元个数，即 φ(φ(m))个，因此当模m有原根时，它有φ(φ(m))个原根。 性质一大堆0.0，但是怎么求原根呢 首先p为质数，φ(p)=p-1，即a^n≡1(mod p)当且仅当n=p-1时成立，如果直接从1～n-2都暴力判断过去会妥妥的t 这时候性质的第一条就派上用场了：可以证明，如果正整数(a,m) = 1和正整数 d 满足a^d≡1(mod m)，则 d 整除 φ(m) 举个例子： 假如输入的p=7，那么φ(p)=6 因为要找最小的那个，所以a从2开始找，2^3=8≡1(mod 7)，2^6=64≡1(mod7)，2^3≡2^6(mod7)，所以2不是模7的原根，那么a=3，3^1≡3(mod 7)，3^2≡2(mod 7)，3^3≡6(mod 7)，3^4≡4(mod 7)，3^5≡5(mod 7)，3^6≡1(mod 7)，按照定义3是模7的一个原根，而根据性质1，整除的才有可能得到1，所以只需要验证3^1，3^2，3^3，3^6即可，这样可以跑的飞快 最后代码就是先埃筛，再处理p-1的质因子b[i]，因为只要判断a^((p-1)/b[i])≡1(mod p)是否成立即可，只要有一个成立，那当前的a就不是原根 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=1000005;bool vis[N];vector&lt;int&gt;p,b;void init()&#123;//埃筛素数 memset(vis,false,sizeof(vis)); for(int i=2;i&lt;=N;i++)&#123; if(!vis[i])&#123; p.push_back(i); for(int j=i+i;j&lt;=N;j+=i)vis[j]=true; &#125; &#125;&#125;void getnum(LL n)&#123;//分解质因子 int tmp=sqrt(n); for(int i=0;i&lt;p.size();i++)&#123; if(n%p[i]==0)&#123; b.push_back(p[i]); while(n%p[i]==0)n/=p[i]; &#125; &#125; if(n&gt;1)b.push_back(n);&#125;LL qpow(LL a,LL b,LL p)&#123; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=(ans*a)%p; b--; &#125; b&gt;&gt;=1; a=a*a%p; &#125; return ans;&#125;int main()&#123; LL x; scanf("%lld",&amp;x); init(); getnum(x-1); for(int i=2;i&lt;x;i++)&#123; int flag=0; for(int j=0;j&lt;b.size();j++)&#123; LL tmp=(x-1)/b[j]; if(qpow(i,tmp,x)==1)&#123; flag=1;break; &#125; &#125; if(!flag)&#123; printf("%d\n",i); break; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>埃筛素数</tag>
        <tag>原根</tag>
        <tag>阶</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codevs 1425 最长公共子串（STL）]]></title>
    <url>%2F86eadb67%2F</url>
    <content type="text"><![CDATA[题目描述 Description输入N（2&lt;=N&lt;=20）个字符串，输出最长公共子串。 输入描述 Input Description输入N 再输入N个字符串 输出描述 Output Description输出最大公共子串。 样例输入 Sample Input12345673abcecabkjaab 样例输出 Sample Output1ab substr(i,j)取出这段字符串 str.find(x）返回字符串x在str中的位置，如果没有找到，则返回-1 string::npos表示字符串的末尾 代码：12345678910111213141516171819202122232425262728293031#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n; string str[25]; scanf("%d",&amp;n); int minlen=INT_MAX; for(int i=0;i&lt;n;i++)&#123; cin&gt;&gt;str[i]; if(str[i].length()&lt;minlen)minlen=str[i].length(); &#125; if(n==1)&#123; cout&lt;&lt;str[0]; return 0; &#125; //从最长的可能性开始找 for(int i=minlen;i&gt;=0;i--)&#123; for(int j=0;j&lt;str[0].length()-i;j++)&#123; int flag=1; for(int k=1;k&lt;n;k++)&#123; if(str[k].find(str[0].substr(j,i))==string::npos)flag=0;//如果不匹配flag=0 &#125; if(flag)&#123; cout&lt;&lt;str[0].substr(j,i); return 0; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>stl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 5448 Marisa’s Cake（凸多边形面积，推公式，前缀和）]]></title>
    <url>%2Fa5bf9421%2F</url>
    <content type="text"><![CDATA[Sample Input123456789101112240 01 01 10 251 13 13 22 31 2 Sample Output12950 Source2015 ACM/ICPC Asia Regional Changchun Online 题意：给一个凸n边形，n个点任选大于等于三个点，求所Marisa’s Cake有情况的面积之和，答案为2*S%(1e9+7)，n&lt;1e6 题解：面积用叉积算（计算几何里计算多边形面积） 随便展开n=5时的情况可以发现，每一项Ci*Cj其实有重复计算，因此试图求出Ci*Cj前的系数，任取两个点i，j，假设有j&lt;i然后考虑在j到i的逆时针方向区域内取点和在二者外部取点，易得方法数是个组合数的和，即2^?-1 最终会得到如下公式 化简推出的公式如下 但是照这个公式过不了样例 因为我愚蠢的忘了前后是在一个循环算的，二者循环次数不同，所以应将公式改为如下，使循环次数相同 按顺序记为一二三四部分 本来算上面这个式子要i和j都算过去，这样的复杂度是O(n^2),所以考虑优化，这里利用前缀和的思想，把上面这个式子分成四部分来看，第二和四部分利用前缀和每次累加上新的一个Cj*2^(-j)，具体见代码，所以最后这个问题只要O(n)扫一遍就好啦 开头要预处理 2^i 和 2^(-i) 然后由于我又愚蠢的初始化反了nx，ny，mx，my的值。。。就一直deeeeeeeebug 被注释掉的那段代码是费马小定理求2的逆元用的，后来发现其实没啥用。。直接inv2=(1e9+7+1)/2 多省事。。 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std; #define LL long longconst int N=100005;const LL inv2=500000004;const LL p=1000000007;LL pow2[N],inv[N];struct node&#123; LL x,y;&#125;tmp[N];void init()&#123; pow2[0]=inv[0]=1; for(int i=1;i&lt;N;i++)&#123; pow2[i]=(pow2[i-1]*2)%p; inv[i]=(inv[i-1]*inv2)%p; &#125;&#125;LL mul(LL x1,LL y1,LL x2,LL y2)&#123; return (x1*y2%p-x2*y1%p+p)%p;&#125;/*LL pow_mod(LL a,LL b,LL p)&#123; LL ret=1; while(b)&#123; if(b&amp;1)ret=(ret*a)%p; a=(a*a)%p; b&gt;&gt;=1; &#125; return ret;&#125;LL Fermat(LL a,LL p)&#123; return pow_mod(a,p-2,p);&#125;*/int main()&#123; int t,n; LL ans; scanf("%d",&amp;t); init(); while(t--)&#123; // printf("%lld",Fermat(2,1000000007)); ans=0; scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++)scanf("%lld%lld",&amp;tmp[i].x,&amp;tmp[i].y); LL nx=inv2*tmp[1].x%p,ny=inv2*tmp[1].y%p; LL mx=tmp[1].x%p,my=tmp[1].y%p; // cout&lt;&lt;nx&lt;&lt;" "&lt;&lt;ny&lt;&lt;" "&lt;&lt;mx&lt;&lt;" "&lt;&lt;my&lt;&lt;endl; for(int i=2;i&lt;=n;i++)&#123; ans=(ans+mul(pow2[i-1]*tmp[i].x%p,pow2[i-1]*tmp[i].y%p,nx,ny)+p)%p; nx=(nx+inv[i]*tmp[i].x%p)%p; ny=(ny+inv[i]*tmp[i].y%p)%p; ans=(ans-mul(pow2[n-i]*tmp[i].x%p,pow2[n-i]*tmp[i].y%p,mx,my)+p)%p; mx=(mx+pow2[i-1]*tmp[i].x%p)%p; my=(my+pow2[i-1]*tmp[i].y%p)%p; &#125; printf("%lld\n",ans%p); &#125; return 0;&#125;]]></content>
      <categories>
        <category>计算几何</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
        <tag>推公式</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Entertainment Box -- Nordic Collegiate Programming Contest 2015​（贪心，读题。。）]]></title>
    <url>%2Fe86890fb%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/28880 Ada, Bertrand and Charles often argue over which TV shows to watch, and to avoid some of their fights they have finally decided to buy a video tape recorder. This fabulous, new device can record k different TV shows simultaneously, and whenever a show recorded in one the machine’s k slots ends, the machine is immediately ready to record another show in the same slot. The three friends wonder how many TV shows they can record during one day. They provide you with the TV guide for today’s shows, and tell you the number of shows the machine can record simultaneously. How many shows can they record, using their recording machine? Count only shows that are recorded in their entirety. Input FormatThe first line of input contains two integers n,k(1≤k&lt;n≤100000). Then follow n lines, each containing two integers xi​,yi, meaning that show i starts at time xi and finishes by time yi. This means that two shows i and j, where yi=xj, can be recorded, without conflict, in the same recording slot. You may assume that 0≤xi&lt;yi≤1000000000. Output FormatThe output should contain exactly one line with a single integer: the maximum number of full shows from the TV guide that can be recorded with the tape recorder. 样例输入112343 11 22 32 3 样例输出112 样例输入2123454 11 34 67 82 5 样例输出213 样例输入31234565 21 45 92 73 86 10 样例输出313 题意：怎么会有这么难读懂的题(╯°□°）╯︵ ┻━┻ 给你k个段，n个区间[l,r]，要求每个段内区间不重合，问你最多能填上几个区间 题解：初始化每个段的当前末尾为0，存入vector中 把区间按r从小到大排序，r最小的最优，用upper_bound贪心的选段填，填好后更新那个段的末位位子，然后操作下一个区间 代码：123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=100005;struct p&#123; int x,y;&#125;q[N];bool cmp(p a,p b)&#123; if(a.y!=b.y)return a.y&lt;b.y; else return a.x&lt;b.x;&#125;int main()&#123; int n,k,ans=0; scanf("%d%d",&amp;n,&amp;k); for(int i=0;i&lt;n;i++)&#123; scanf("%d%d",&amp;q[i].x,&amp;q[i].y); &#125; sort(q,q+n,cmp); vector&lt;int&gt;c; for(int i=0;i&lt;k;i++)c.push_back(0); for(int i=0;i&lt;n;i++)&#123; int tmp=upper_bound(c.begin(),c.end(),q[i].x)-c.begin(); if(tmp!=0)&#123; c.erase(c.begin()+tmp-1); c.push_back(q[i].y); ans++; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[poj 1328 Radar Installation（贪心，线段交集）]]></title>
    <url>%2F8e5f1388%2F</url>
    <content type="text"><![CDATA[http://poj.org/problem?id=1328 Time Limit: 1000MS Memory Limit: 10000K Assume the coasting is an infinite straight line. Land is in one side of coasting, sea in the other. Each small island is a point locating in the sea side. And any radar installation, locating on the coasting, can only cover d distance, so an island in the sea can be covered by a radius installation, if the distance between them is at most d. We use Cartesian coordinate system, defining the coasting is the x-axis. The sea side is above x-axis, and the land side below. Given the position of each island in the sea, and given the distance of the coverage of the radar installation, your task is to write a program to find the minimal number of radar installations to cover all the islands. Note that the position of an island is represented by its x-y coordinates. Figure A Sample Input of Radar Installations InputThe input consists of several test cases. The first line of each case contains two integers n (1&lt;=n&lt;=1000) and d, where n is the number of islands in the sea and d is the distance of coverage of the radar installation. This is followed by n lines each containing two integers representing the coordinate of the position of each island. Then a blank line follows to separate the cases. The input is terminated by a line containing pair of zeros OutputFor each test case output one line consisting of the test case number followed by the minimal number of radar installations needed. “-1” installation means no solution for that case. Sample Input1234567893 21 2-3 12 11 20 20 0 Sample Output12Case 1: 2Case 2: 1 题意：给一条直线，直线一侧有一些小岛，要在直线上放最少个数的半径为r的雷达，覆盖所有小岛 题解：思路肯定是贪心，但是怎么贪心才能保证是最优的 如果直接画圆来贪心的满足各个岛屿的话，圆的位置其实是不好确定的，直接先满足最高的点然后平移圆不一定是最优策略，所以不妨反过来想： 以岛屿为圆心画圆，然后记录圆与直线相交的区间，只要雷达放在这个区间内，那么这个岛屿就一定可以被包含 这样问题就变的简单了，用所得的区间按照左端点从小到大排序，从第一个开始，如果和第二个区间有交集，那么这两个岛屿可以共用一个雷达，更新交集，然后同理看第三个区间，直到没有交集，就要增加一个雷达，记录新的区间 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=1005;struct q&#123; double l,r;&#125;q[N];bool cmp(struct q q1,struct q q2)&#123; return q1.l&lt;q2.l;&#125;int main()&#123; int n,r; int cas=0; while(scanf("%d%d",&amp;n,&amp;r)&amp;&amp;(n||r))&#123; double a,b; int flag=0; for(int i=0;i&lt;n;i++)&#123; scanf("%lf%lf",&amp;a,&amp;b); if(b&gt;r)flag=1; else&#123; q[i].l=a*1.0-sqrt(r*r-b*b); q[i].r=a*1.0+sqrt(r*r-b*b); &#125; &#125; if(flag)&#123; printf("Case %d: -1\n",++cas); continue; &#125; sort(q,q+n,cmp); double ll=q[0].l,rr=q[0].r; int ans=1; for(int i=1;i&lt;n;i++)&#123; if(q[i].l&gt;rr)&#123; ans++; ll=q[i].l;rr=q[i].r; &#125; else&#123; ll=q[i].l; rr=min(rr,q[i].r); &#125; &#125; printf("Case %d: %d\n",++cas,ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[D.xor序列 -- 牛客练习赛26（线性基）]]></title>
    <url>%2F10f322b7%2F</url>
    <content type="text"><![CDATA[https://www.nowcoder.com/acm/contest/180/D 题目描述小a有n个数，他提出了一个很有意思的问题：他想知道对于任意的x, y，能否将x与这n个数中的任意多个数异或任意多次后变为y 输入描述:第一行为一个整数n，表示元素个数第二行一行包含n个整数，分别代表序列中的元素第三行为一个整数Q，表示询问次数接下来Q行，每行两个数x,y，含义如题所示 输出描述:输出Q行，若x可以变换为y，输出“YES”，否则输出“NO” 示例1输入 12345651 2 3 4 536 7 2 13 8 输出 123YESYESNO 说明对于(6,7)来说，6可以先和3异或，再和2异或对于(2,1)来说，2可以和3异或对于(3,8)来说，3不论如何都不能变换为8 备注:对于100%的数据，n,Q&lt;=10^5保证所有运算均在int范围内 题解：刚开始写线性基，随便写点啥吧 线性基就是把一组数转化成一个集合，新集合里所有数能相互异或得到原集合的所有相互异或得到的值，且线性基是满足这一条件的最小集合 随便举个例子，一个线性基大概长这个样子：（p[i]表示第i位为1） 1234567891?????? p[6]01????? p[5]001???? p[4]0001??? p[3]00001?? p[2]000001? p[1]0000001 p[0]0表示这位没有，？表示这位是0或1 构造方法如下： 对每一个数c从高位到低位扫，扫到第i位为1时，若pi不存在，则pi=c并结束此数的扫描，否则令c=c^pi 把这个题目转化一下，假设集合里的n个数任取几个异或可以得到a，那么要判断x^a=y能否成立，移项一下就是判断a=x^y能否成立，所以题目就是求x^y任意异或这n个数能不能得到0 线性基的本质是贪心的思想 假设已经用n个数构造好了一组线性基，a=x^y最高位是第k位，那么找p[k]，因为p[k-i]的第k位都是0，所以如果要转化成0，必须异或上p[k]这个数，所以就更新a，a=a^p[k]，继续往下匹配 如果p[k]不存在，那么更新p[k]，p[k]=a; 那么要把第k位变成0，为什么不能异或p[k+i]呢，因为这样p[k+i]位是1，异或之后虽然p[k]位顺心如意的变成了0，但是p[k+i]却变成了1，而且继续往低位找这个1就绝对不可能被消掉了 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=100005;LL p[61];void f(LL x)&#123; for(int i=60;i&gt;=0;i--)&#123; if((x&gt;&gt;i)&amp;1)&#123; if(!p[i])&#123; p[i]=x; break; &#125; else x^=p[i]; &#125; &#125;&#125;int main()&#123; int n; LL c; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%lld",&amp;c); f(c); &#125; int m; scanf("%d",&amp;m); while(m--)&#123; LL x,y; scanf("%lld%lld",&amp;x,&amp;y); x=x^y; for(int i=60;i&gt;=0;i--)&#123; if((x&gt;&gt;i)&amp;1)&#123; if(!p[i])break; x=x^p[i]; &#125; &#125; if(x==0)puts("YES"); else puts("NO"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>线性基</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[B.烟花 -- 牛客练习赛26（概率dp）]]></title>
    <url>%2Ff9c3ad7f%2F</url>
    <content type="text"><![CDATA[https://www.nowcoder.com/acm/contest/180/B 题目描述小a有个烟花，每个烟花代表着互不相同的颜色，对于第i个烟花，它有pi的概率点燃，现在小a要去点燃它们，他想知道产生颜色的期望个数 及 产生恰好产生k种颜色的概率 输入描述:第一行两个整数n,k接下来一行n个数，第i个数pi表示第i个烟花被点燃的概率 输出描述:输出有两行第一行表示产生不同颜色的期望个数第二行表示产生恰好k种颜色的概率以换行符分割 示例输入 123 20.5 0.25 0.75 输出 121.50000.4062 备注:对于30%的数据：n&lt;=6,k&lt;=n对于100%的数据：n&lt;=10^5,k&lt;=2*10^2输出均保留4位小数,若你的答案误差与std不超过即为正确 题解：第一问产生不同颜色的期望个数为：∑pi 第二问产生恰好k种颜色的概率： 用概率dp做，dp[i][j]表示前i个烟花恰好有j个点燃，根据第i个烟花点燃和没点燃的可能获得状态转移方程如下：dp[i][j]=dp[i-1][j-1]*pi+dp[i-1][j]*(1-pi) 初始化dp[0][0]=1，0个烟花点燃0个概率是1，dp[0][i]=0，0个烟花点燃i个概率是0 还要初始化一下dp[i][0]的情况，就是i个烟花点燃0个，读入的时候累乘一下就行 代码：1234567891011121314151617181920212223242526272829303132#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;const int N=100005;double p[N],dp[N][300];int main()&#123; int n,k; scanf("%d%d",&amp;n,&amp;k); double sum=0; dp[0][0]=1; for(int i=1;i&lt;=n;i++)&#123; scanf("%lf",&amp;p[i]); sum+=p[i]; dp[0][i]=0; dp[i][0]=(1-p[i])*dp[i-1][0]; &#125; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=k;j++) dp[i][j]=dp[i-1][j-1]*p[i]+(1-p[i])*dp[i-1][j]; printf("%.4lf\n%.4lf\n",sum,dp[n][k]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Best Solver -- ACM-ICPC 2015 Shenyang（推公式，广义斐波那契）]]></title>
    <url>%2F7ecca125%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/29121 样例输入1234567870 463371 463373 463371 4633721 46337321 463374321 46337 样例输出1234567Case #1: 97Case #2: 969Case #3: 16537Case #4: 969Case #5: 40453Case #6: 10211Case #7: 17947 题目来源ACM-ICPC 2015 Shenyang Preliminary Contest 题意：，求[y]%m m&lt;=46337且为质数，x&lt;2^32 题解：先凑个新的整数数列an出来，如下图： 由a0=2 a1=10 a2=98 a3=970 a4=9602 a5=95050 递推得an=10*an-1-an-2 又因为an%m且m不大 所以找an的循环结（为什么有循环结？？！按题目m不大猜的。。） 然后求(2^x-1)对应的是循环中的哪个，那个值减一即为整数部分 2333333t了 233333a了 不用加欧拉函数的优化还快了一点点(#ﾟДﾟ)。。？？？迷啊迷 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long long const int N=233333;int p,f[N];int init()&#123; f[1]=10;f[2]=98; for(int i=3;;i++)&#123; f[i]=(10*f[i-1]%p-f[i-2]+p)%p; if(f[i-2]%p==2&amp;&amp;f[i-1]%p==10)return i-2; &#125;&#125;/*int phi(int x)&#123; int ans=x; for(int i=2;i*i&lt;=x;i++)&#123; if(x%i==0)&#123; ans=ans/i*(i-1); while(x%i==0)x/=i; &#125; &#125; if(x&gt;1)ans=ans/x*(x-1); return ans;&#125;*/int qpow(int a,int b,int m)&#123; // a=a%m; // b=b%phi(m); int ans=1; while(b)&#123; if(b&amp;1)&#123; ans=ans*a%m; b--; &#125; a=a*a%m; b&gt;&gt;=1; &#125; return ans;&#125;int main()&#123; int t; scanf("%d",&amp;t); for(int i=1;i&lt;=t;i++)&#123; int x; scanf("%d%d",&amp;x,&amp;p); memset(f,0,sizeof(f)); int cur=init(); int ans=(qpow(2,x,cur)+1)%cur; printf("Case #%d: %d\n",i,(f[ans]-1+p)%p); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
        <tag>斐波那契</tag>
        <tag>循环结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cf 1008D Pave the Parallelepiped --（容斥，gcd，推公式）]]></title>
    <url>%2F19356a39%2F</url>
    <content type="text"><![CDATA[http://codeforces.com/problemset/problem/1008/D time limit per test2 secondsmemory limit per test256 megabytes You are given a rectangular parallelepiped with sides of positive integer lengthsA, B and C.Find the number of different groups of three integers (a, b, c) such that 1≤a≤b≤c and parallelepiped A×B×C can be paved with parallelepipeds a×b×c. Note, that all small parallelepipeds have to be rotated in the same direction. For example, parallelepiped 1×5×6 can be divided into parallelepipeds 1×3×5, but can not be divided into parallelepipeds 1×2×3. InputThe first line contains a single integer t (1≤t≤10^5) — the number of test cases.Each of the next t lines contains three integers A, B and C (1≤A,B,C≤10^5) — the sizes of the parallelepiped. OutputFor each test case, print the number of different groups of three points that satisfy all given conditions. Example input1234541 1 11 6 12 2 2100 100 100 output1234144165 NoteIn the first test case, rectangular parallelepiped (1,1,1) can be only divided into rectangular parallelepiped with sizes (1,1,1). In the second test case, rectangular parallelepiped (1,6,1) can be divided into rectangular parallelepipeds with sizes (1,1,1), (1,1,2), (1,1,3) and (1,1,6). In the third test case, rectangular parallelepiped (2,2,2) can be divided into rectangular parallelepipeds with sizes (1,1,1), (1,1,2), (1,2,2) and (2,2,2). 题意：给(A,B,C)，求无序三元组(a,b,c)满足a|A,b|B,c|C的种数，一共T组数据，T,A,B,C≤105 题解：首先上一个小结论：从n个元素里允许重复地选择r个元素的方案数是C(r,n+r−1) 证明：设xi为n个元素里第i个元素的个数，则有方程x1+x2+……+xn=r，即n元一次方程非负整数解的个数，高中数学问题(｡･ω･｡)，（x1+1）+（x2+1）+…+(xn+1)=n+r，隔板法得C(r,n+r−1) 考虑把所有因数分组，使得每一组的因数都不同，将其分为7组，用二进制状态s表示：第1位为1表示这个因数为A的因数，第2位为1表示这个因数为B的因数，第3位为1表示这个因数为C的因数 ，cnt[s]表示状态为s的因数的个数，用（gcd+容斥）求，然后abc枚举状态，先判断是否合法（是否ABC的因数都存在），合法就算组合数，use[i]表示三个数中状态为i的数有几个 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;#define LL long longconst int MAXN=100005;int n,q[MAXN],m,cnt[10],use[10],fac[MAXN];LL C(int n,int m)&#123; long long res=1; for(int i=1;i&lt;=m;i++)res*=(n-i+1); for(int i=1;i&lt;=m;i++)res/=i; return res;&#125;bool check(int a,int b,int c)&#123; if((a&amp;1)&amp;&amp;(b&amp;2)&amp;&amp;(c&amp;4))return true; if((a&amp;1)&amp;&amp;(c&amp;2)&amp;&amp;(b&amp;4))return true; if((b&amp;1)&amp;&amp;(a&amp;2)&amp;&amp;(c&amp;4))return true; if((b&amp;1)&amp;&amp;(c&amp;2)&amp;&amp;(a&amp;4))return true; if((c&amp;1)&amp;&amp;(a&amp;2)&amp;&amp;(b&amp;4))return true; if((c&amp;1)&amp;&amp;(b&amp;2)&amp;&amp;(a&amp;4))return true; return false;&#125;int gcd(int a,int b)&#123; return b==0?a:gcd(b,a%b);&#125;int main()&#123; //预处理每个数的因数个数 for(int i=1;i&lt;MAXN;i++) for(int j=i;j&lt;MAXN;j+=i) fac[j]++; int T,X,Y,Z; scanf("%d",&amp;T); LL ans; while(T--)&#123; scanf("%d%d%d",&amp;X,&amp;Y,&amp;Z); m=0; int xy=gcd(X,Y),yz=gcd(Y,Z),xz=gcd(X,Z); int xyz=gcd(xy,Z); //计算每种状态的因数个数 cnt[7]=fac[xyz];//111 cnt[6]=fac[yz]-fac[xyz];//110 cnt[5]=fac[xz]-fac[xyz];//101 cnt[4]=fac[Z]-fac[xz]-fac[yz]+fac[xyz];//100 cnt[3]=fac[xy]-fac[xyz];//011 cnt[2]=fac[Y]-fac[yz]-fac[xy]+fac[xyz];//010 cnt[1]=fac[X]-fac[xy]-fac[xz]+fac[xyz];//001 ans=0; for(int a=1;a&lt;8;a++) for(int b=a;b&lt;8;b++) for(int c=b;c&lt;8;c++) if(check(a,b,c))&#123;//检查合法 memset(use,0,sizeof(use)); use[a]++;use[b]++;use[c]++; LL tmp=1; for(int i=1;i&lt;8;i++) if(use[i]) tmp*=C(cnt[i]+use[i]-1,use[i]);//组合数计算 if(tmp&gt;0)ans+=tmp; &#125; printf("%I64d\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>gcd</tag>
        <tag>推公式</tag>
        <tag>容斥</tag>
        <tag>cf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Teemo's formula（推公式）]]></title>
    <url>%2Ff6227d77%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/29324 Teemo has a formula and he want to calculate it quickly. The formula is . As the result may be very large, please output the result mod 1000000007. Input FormatThe input contains several test cases, and the first line is a positive integer T indicating the number of test cases which is up to 10^5. For each test case, the first line contains an integer n(1&lt;=n&lt;=10^9). Output FormatFor each test case, output a line containing an integer that indicates the answer. 样例输入123223 样例输出12624 题意： 题解：先上结论，n*(n+1)*2^(n-2) 1234567Σ[(k^2)*C(n,k)]=Σ[k*(k-1)*C(n,k)]+Σ[k*C(n,k)])Σ[k(k-1)*C(n,k)]=Σ(n(n-1)*[C(n-2,k)]=n(n-1)*2^(n-2)Σ[k*C(n,k)])=Σ[n*C(n-1,k)])=n*2^(n-1)Σ[(k^2)*C(n,k)]=n(n-1)*2^(n-2)+n*2^(n-1)=n*(n+1)*2^(n-2) 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;ctype.h&gt;#include &lt;cstdlib&gt;#include &lt;climits&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;deque&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;map&gt;#include &lt;stack&gt;#include &lt;set&gt;#include &lt;numeric&gt;#include &lt;sstream&gt;#include &lt;iomanip&gt;#include &lt;limits&gt;using namespace std;const int N=100005;#define LL long longconst LL p=1000000007;LL qpow(LL a,LL b)&#123; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=ans*a%p; b--; &#125; a=a*a%p; b&gt;&gt;=1; &#125; return ans;&#125;int main()&#123; int t; scanf("%d",&amp;t); while(t--)&#123; LL n; scanf("%lld",&amp;n); LL res=(qpow(2,n-2)*(n*(n+1)%p))%p; printf("%lld\n",res); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fence Building -- ACM-ICPC 2017 Asia Urumqi（欧拉公式，分割平面，大组合数）]]></title>
    <url>%2Fe85a11e8%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/19939 Farmer John owns a farm. He first builds a circle fence. Then, he will choose n points and build some straight fences connecting them. Next, he will feed a cow in each region so that cows cannot play with each other without breaking the fences. In order to feed more cows, he also wants to have as many regions as possible. However, he is busy building fences now, so he needs your help to determine what is the maximum number of cows he can feed if he chooses these n points properly. InputThe first line contains an integer 1≤T≤100000, the number of test cases. For each test case, there is one line that contains an integer n. It is guaranteed that 1≤T≤10^5 and 1≤n≤10^18. OutputFor each test case, you should output a line ”Case #i: ans” where i is the test caseS number, starting from 1 and ans is the remainder of the maximum number of cows farmer John can feed when divided by 10^9 + 7. 样例输入12343135 样例输出123Case #1: 1Case #2: 4Case #3: 16 题意：给一个圆，在圆周上找n个点，连线，将圆划分区域的最大值 题解：多面体欧拉公式： V+F-E=X(P)，V是多面体P的顶点个数，F是多面体P的面数，E是多面体P的棱的条数，X(P)是多面体P的欧拉示性数 平面欧拉公式：V-E+F=2，（V、E、F表示简单几何体的顶点数、边数、面数），即 点-边+面=2 证明见度娘～欧拉公式 对于这题来说，圆周上每四个点可以在圆内产生一个新的交叉点，所以点数为c(n,4)+n 每两个点可以产生一条边，形成交点处额外贡献两个边，所以加上2*c(n,4)，边数为n+2*c(n,4)+c(n,2) 要减去外面的大区域1，所以ans为（边-点+1）即C(n,4)+C(n,2)+1 因为这题n是1e18，所以要用卢卡斯定理大组合数模版一下 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst LL p=1000000007;LL qpow(LL a,LL b)&#123; LL ans=1; a%=p; while(b)&#123; if(b&amp;1)&#123; ans=ans*a%p; b--; &#125; b&gt;&gt;=1; a=a*a%p; &#125; return ans;&#125;LL C(LL n,LL m)&#123; if(m&gt;n)return 0; LL ans=1; for(int i=1;i&lt;=m;i++)&#123; LL a=(n+i-m)%p; LL b=i%p; ans=ans*(a*qpow(b,p-2)%p)%p; &#125; return ans;&#125;LL lucas(LL n,LL m)&#123; if(m==0)return 1; return C(n%p,m%p)*lucas(n/p,m/p)%p;&#125;int main()&#123; int t; scanf("%d",&amp;t); for(int i=1;i&lt;=t;i++)&#123; LL n; scanf("%lld",&amp;n); LL ans=(lucas(n,4)+lucas(n,2)+1)%p; printf("Case #%d: %lld\n",i,ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
        <tag>组合数</tag>
        <tag>分割平面</tag>
        <tag>欧拉公式</tag>
        <tag>卢卡斯定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sum of the Line -- ACM-ICPC 2017 Asia Urumqi（容斥，平方和，逆元）]]></title>
    <url>%2F40f7970d%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/28970 样例输入123223 样例输出1215 题意：求1-n中与n互质的数的平方和 题解：把这个题的代码改改就能交了hdu 4059 The Boss on Mars（容斥，四次方和，逆元） 思路和上面那个hdu4059一毛一样：转化为求1-n中与n不互质的数的平方的和，所以要先筛出素因子，然后利用容斥原理求解 下面是具体做法： 首先抛一个平方和公式1^2+2^2+...+n^2=n*(n+1)*(2*n+1)/6公式里有个除以6，求逆元费马小定理一下，除以6就是乘以pow(6,p-2)%p getnum(n)那个函数就是用来求平方和，然后就是容斥了 举个例子，比如n=6，素因子是2，3，存入vector中，然后ans=1^2+2^2+3^2+4^2+5^2+6^2，接下来枚举状态 [1,2^2)，即01，10，11，（第i位为1表示取第i个素因子），a记录当前状态素因子个数来确定容斥正负号，now记录当前状态素因子之积，那么答案就是：ans=ans-2^2*(3^2+2^2+1^2)-3^2*(2^2+1^2)+6^2*(1^2)，getnum(n/now)这个很巧妙的把该因子所有的倍数都算上了，2^2*(3^2+2^2+1^2)也就是2和2的所有倍数的平方和（6^2+4^2+2^2） 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int p=998244353;const int N=1000005;const int MAXN=100000005;LL inv6,n;int prime[N],ji;bool vis[N];vector&lt;LL&gt;v;LL qpow(LL a,LL b)&#123; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=(ans*a)%p; b--; &#125; b/=2; a=a*a%p; &#125; return ans;&#125;void init()&#123; inv6=qpow(6LL,p-2); ji=0; memset(vis,false,sizeof(vis)); for(int i=2;i*i&lt;=MAXN;i++)&#123;//埃筛素数 if(vis[i])continue; prime[ji++]=i; for(int j=2*i;j&lt;N;j+=i)vis[j]=true; &#125;&#125;LL getnum(LL n)&#123; //1^2+2^2+...+n^2=n*(n+1)*(2*n+1)/6 LL ans; ans=(n*(n+1)%p*(2*n+1)%p)%p; ans=(ans*inv6)%p; return ans;&#125;void solve()&#123; v.clear(); LL tmp=n; for(int i=0;i&lt;ji;i++)&#123; if(tmp%prime[i]==0)&#123; v.push_back(prime[i]); while(tmp%prime[i]==0)tmp/=prime[i]; &#125; &#125; if(tmp&gt;1)v.push_back(tmp); LL ans=getnum(n); for(int i=1;i&lt;(1&lt;&lt;v.size());i++)&#123; int a=0; LL now=1; for(int j=0;j&lt;v.size();j++)&#123; if(i&amp;(1&lt;&lt;j))&#123; a++; now=now*v[j]; &#125; &#125; LL res=qpow(now,2LL)*(getnum(n/now)%p)%p; if(a&amp;1)ans=(ans-res+p)%p; else ans=(ans+res+p)%p; &#125; printf("%lld\n",ans);&#125;int main()&#123; init(); int t; scanf("%d",&amp;t); while(t--)&#123; scanf("%lld",&amp;n); solve(); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>逆元</tag>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 4059 The Boss on Mars（与n互质的数的四次方的和）]]></title>
    <url>%2F8434b274%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others)http://acm.hdu.edu.cn/showproblem.php?pid=4059 Problem DescriptionOn Mars, there is a huge company called ACM (A huge Company on Mars), and it’s owned by a younger boss. Due to no moons around Mars, the employees can only get the salaries per-year. There are n employees in ACM, and it’s time for them to get salaries from their boss. All employees are numbered from 1 to n. With the unknown reasons, if the employee’s work number is k, he can get k^4 Mars dollars this year. So the employees working for the ACM are very rich. Because the number of employees is so large that the boss of ACM must distribute too much money, he wants to fire the people whose work number is co-prime with n next year. Now the boss wants to know how much he will save after the dismissal. InputThe first line contains an integer T indicating the number of test cases. (1 ≤ T ≤ 1000) Each test case, there is only one integer n, indicating the number of employees in ACM. (1 ≤ n ≤ 10^8) OutputFor each test case, output an integer indicating the money the boss can save. Because the answer is so large, please module the answer with 1,000,000,007. Sample Input123245 Sample Output1282354 Hint12Case1: sum=1+3*3*3*3=82Case2: sum=1+2*2*2*2+3*3*3*3+4*4*4*4=354 AuthorZHANG, Chao Source2011 Asia Dalian Regional Contest 题意：求1-n中与n互质的数的四次方的和 题解：这题的思路是：转化为求1-n中与n不互质的数的四次方的和，所以要先筛出素因子，然后利用容斥原理求解 下面是具体做法： 首先抛一个四次方求和公式 推导过程如下： 12345678910111213141516171819(x+1)^5=x^5+5*x^4+10*x^3+10*x^2+5*x+1然后从x=1开始列出n个式子2^5=(1+1)^5=1^5+5*1^4+10*1^3+10*1^2+5*1^1+1;3^5=(2+1)^5=2^5+5*2^4+10*2^3+10*2^2+5*2^1+1;……(n+1)^5=(n+1)^5=n^5+5*n^4+10*n^3+10*n^2+5*n^1+1;叠加得：(n+1)^5=1+5*(1^4+2^4+……n^4)+10*(1^3+2^3+……+n^3)+10*(1^2+2^2+……+n^2)+5*(1+2+……+n)+n再代入(1^3+2^3+……n^3)=(n+1)^2*n^2/4，(1^2+2^2+……n^2)=n*(n+1)*(2*n+1)/6，(1+2+……+n)=n*(n+1)/2即得(1^4+2^4+……+n^4)=n*(n+1)*(2n+1)*(3*n*n+3*n-1)/30; 公式里有个除以30，那么显然要用到逆元的知识了，费马小定理一下，除以30就是乘以pow(30,p-2)%p getnum(n)那个函数就是用来求四次方和的，写的时候括号来括号去的要小心0.0，反正我偷懒写一行然后wa了几次。。下次还是分开写清楚点。。（补上分开写的了，不过注释掉了） 然后就是容斥了 来举个例子吧，比如n=6，素因子是2，3，存入vector中，然后ans=1^4+2^4+3^4+4^4+5^4+6^4=2275，接下来枚举状态 [1,2^2)，即01，10，11，（第i位为1表示取第i个素因子），a记录当前状态素因子个数来确定容斥正负号，now记录当前状态素因子之积，那么答案就是：ans=ans-2^4*(3^4+2^4+1^4)-3^4*(2^4+1^4)+6^4*(1^4)，getnum(n/now)这个很巧妙的把该因子所有的倍数都算上了，2^4*(3^4+2^4+1^4)也就是2和2的所有倍数的四次方和（6^4+4^4+2^4） 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int p=1000000007;const int N=100005;LL inv30,n;int prime[N],ji;bool vis[N];vector&lt;LL&gt;v;LL qpow(LL a,LL b)&#123; LL ans=1; while(b)&#123; if(b&amp;1)&#123; ans=(ans*a)%p; b--; &#125; b/=2; a=a*a%p; &#125; return ans;&#125;void init()&#123; inv30=qpow(30LL,p-2); ji=0; memset(vis,false,sizeof(vis)); for(int i=2;i&lt;N;i++)&#123;//埃筛素数 if(vis[i])continue; prime[ji++]=i; for(int j=2*i;j&lt;N;j+=i)vis[j]=true; &#125;&#125;LL getnum(LL n)&#123; //(1^4+2^4+……+n^4)=n*(n+1)*(2n+1)*(3*n*n+3*n-1)/30 LL ans; ans=(n*(n+1)%p*(2*n+1)%p*((3*n*n)%p+(3*n-1)%p))%p; ans=(ans*inv30)%p; return ans; /*分开写的版本 LL ans; ans=(n*((n+1)%p))%p; ans=(ans*((2*n+1)%p))%p; ans=(ans*((3*n*n)%p+(3*n-1)%p))%p; ans=(ans*inv30)%p; return ans; */&#125;void solve()&#123; v.clear(); LL tmp=n; for(int i=0;i&lt;ji;i++)&#123; if(tmp%prime[i]==0)&#123; v.push_back(prime[i]); while(tmp%prime[i]==0)tmp/=prime[i]; &#125; &#125; if(tmp&gt;1)v.push_back(tmp); LL ans=getnum(n); for(int i=1;i&lt;(1&lt;&lt;v.size());i++)&#123; int a=0; LL now=1; for(int j=0;j&lt;v.size();j++)&#123; if(i&amp;(1&lt;&lt;j))&#123; a++; now=now*v[j]; &#125; &#125; LL res=qpow(now,4LL)*(getnum(n/now)%p)%p; if(a&amp;1)ans=(ans-res+p)%p; else ans=(ans+res+p)%p; &#125; printf("%lld\n",ans);&#125;int main()&#123; init(); int t; scanf("%d",&amp;t); while(t--)&#123; scanf("%lld",&amp;n); solve(); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>逆元</tag>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1502 Regular Words（dp，java高精度）]]></title>
    <url>%2F18f146f5%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1502 Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem DescriptionConsider words of length 3n over alphabet {A, B, C} . Denote the number of occurences of A in a word a as A(a) , analogously let the number of occurences of B be denoted as B(a), and the number of occurenced of C as C(a) . Let us call the word w regular if the following conditions are satisfied: A(w)=B(w)=C(w) ;if c is a prefix of w , then A(c)&gt;= B(c) &gt;= C(c) .For example, if n = 2 there are 5 regular words: AABBCC , AABCBC , ABABCC , ABACBC and ABCABC . Regular words in some sense generalize regular brackets sequences (if we consider two-letter alphabet and put similar conditions on regular words, they represent regular brackets sequences). Given n , find the number of regular words. InputThere are mutiple cases in the input file. Each case contains n (0 &lt;= n &lt;= 60 ). There is an empty line after each case. OutputOutput the number of regular words of length 3n . There should be am empty line after each case. Sample Input12323 Sample Output123542 题意：ABC三个字母每个字母n个，排列成一个长度为3*n的串，要求任意前缀满足，A的个数大于等于B的个数大于等于C的个数，即A(c)&gt;= B(c) &gt;= C(c) ，求方法数 题解：dp[i][j][k]表示当前串由i个A，j个B，k个C组成的方法数 状态转移方程为 dp[i][j][k] = dp[i-1][j][k] + dp[i][j-1][k] + dp[i][j][k-1] 初始化dp[0][0][0]=1，每一项加的时候判断一下是否合法即可 这题需要高精度，就用java写了 代码：12345678910111213141516171819202122232425262728import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger dp[][][]=new BigInteger[65][65][65]; dp[0][0][0]=BigInteger.valueOf(1); for(int i=1;i&lt;=60;i++) &#123; for(int j=0;j&lt;=i;j++) &#123; for(int k=0;k&lt;=j;k++) &#123; dp[i][j][k]=BigInteger.valueOf(0); if(i&gt;j)dp[i][j][k]=dp[i][j][k].add(dp[i-1][j][k]); if(j&gt;k)dp[i][j][k]=dp[i][j][k].add(dp[i][j-1][k]); if(k&gt;0)dp[i][j][k]=dp[i][j][k].add(dp[i][j][k-1]); &#125; &#125; &#125; int n; while(cin.hasNext()) &#123; n=cin.nextInt(); System.out.println(dp[n][n][n]); System.out.println(); &#125; cin.close(); &#125;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1013 Digital Roots（数根公式推导）]]></title>
    <url>%2F68903b21%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) http://acm.hdu.edu.cn/showproblem.php?pid=1013 Problem DescriptionThe digital root of a positive integer is found by summing the digits of the integer. If the resulting value is a single digit then that digit is the digital root. If the resulting value contains two or more digits, those digits are summed and the process is repeated. This is continued as long as necessary to obtain a single digit. For example, consider the positive integer 24. Adding the 2 and the 4 yields a value of 6. Since 6 is a single digit, 6 is the digital root of 24. Now consider the positive integer 39. Adding the 3 and the 9 yields 12. Since 12 is not a single digit, the process must be repeated. Adding the 1 and the 2 yeilds 3, a single digit and also the digital root of 39. InputThe input file will contain a list of positive integers, one per line. The end of the input will be indicated by an integer value of zero. OutputFor each integer in the input, output its digital root on a separate line of the output. Sample Input24390 Sample Output63 SourceGreater New York 2000 题解：先放个百度百科数根定义： 数根(又称数字根Digital root)是自然数的一种性质，换句话说，每个自然数都有一个数根 数根是将一正整数的各个位数相加(即横向相加)，若加完后的值大于等于10的话，则继续将各位数进行横向相加直到其值小于十为止，或是，将一数字重复做数字和，直到其值小于十为止，则所得的值为该数的数根。例如54817的数根为7，因为5+4+8+1+7=25，25大于10则再加一次，2+5=7，7小于十，则7为54817的数根 再放个结论： for(int i=0;i&lt;s.length();i++)ans+=(s[i]-‘0’);printf(“%d\n”,1+(ans-1)%9); 即每位数相加的结果记为ans, 1+(ans-1)%9 即为所求 最后放个证明： 按题意得： 因为有 所以原式等于 处理一下即推出上面的结论 代码：1234567891011121314151617181920212223#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;cstring&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;int main()&#123; string s; while(cin&gt;&gt;s)&#123; if(s=="0")break; int ans=0; for(int i=0;i&lt;s.length();i++)ans+=(s[i]-'0'); printf("%d\n",1+(ans-1)%9); &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>数根</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 5973 Game of Taking Stones（威佐夫博弈，java大数，二分求高精度根号）]]></title>
    <url>%2Ff0d0bafc%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=5973 Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others) Problem DescriptionTwo people face two piles of stones and make a game. They take turns to take stones. As game rules, there are two different methods of taking stones: One scheme is that you can take any number of stones in any one pile while the alternative is to take the same amount of stones at the same time in two piles. In the end, the first person taking all the stones is winner.Now,giving the initial number of two stones, can you win this game if you are the first to take stones and both sides have taken the best strategy? InputInput contains multiple sets of test data.Each test data occupies one line,containing two non-negative integers a andb,representing the number of two stones.a and b are not more than 10^100. OutputFor each test data,output answer on one line.1 means you are the winner,otherwise output 0. Sample Input1232 18 44 7 Sample Output123010 Source2016ACM/ICPC亚洲区大连站-重现赛（感谢大连海事大学） 题解：首先这是个威佐夫博弈裸题 判断(b-a)*((√5+1)/2)==a是否成立即可，麻烦在于又加了大数 刚开始直接用之前算过的1000位黄金分割数 计算黄金分割数小数点后1000位 交了一发，然后wa了？？？黑人问号。。 然后查了网上的写法，是二分求高精度√5，具体见代码 跑500次二分精确度只能到两百多位，那为啥那个精确到一千位的数不行么（我当时跑了10000次循环来着）。。猜测可能是赋值问题吧emmmmmm。。不管了 代码：123456789101112131415161718192021222324252627282930import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigDecimal a,b,tmp,hj; BigDecimal l=BigDecimal.valueOf(2),r=BigDecimal.valueOf(3); for(int i=0;i&lt;500;i++) &#123; BigDecimal m=l.add(r).divide(BigDecimal.valueOf(2)); if(m.multiply(m).compareTo(BigDecimal.valueOf(5))&lt;0)l=m; else r=m; &#125; hj=l.add(BigDecimal.valueOf(1)).divide(BigDecimal.valueOf(2)); while(cin.hasNext()) &#123; a=cin.nextBigDecimal(); b=cin.nextBigDecimal(); if(a.compareTo(b)&gt;0) &#123; tmp=a;a=b;b=tmp; &#125; a=a.setScale(0,BigDecimal.ROUND_DOWN); b=b.subtract(a).multiply(hj); b=b.setScale(0,BigDecimal.ROUND_DOWN); if(a.compareTo(b)==0)System.out.println("0"); else System.out.println("1"); &#125; cin.close(); &#125;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
        <tag>威佐夫博弈</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 5047 Sawtooth（java大数，分割平面问题）]]></title>
    <url>%2F5c6528a4%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others) Problem DescriptionThink about a plane: ● One straight line can divide a plane into two regions.● Two lines can divide a plane into at most four regions.● Three lines can divide a plane into at most seven regions.● And so on… Now we have some figure constructed with two parallel rays in the same direction, joined by two straight segments. It looks like a character “M”. You are given N such “M”s. What is the maximum number of regions that these “M”s can divide a plane ? InputThe first line of the input is T (1 ≤ T ≤ 100000), which stands for the number of test cases you need to solve. Each case contains one single non-negative integer, indicating number of “M”s. (0 ≤ N ≤ 1012) OutputFor each test case, print a line “Case #t: ”(without quotes, t means the index of the test case) at the beginning. Then an integer that is the maximum number of regions N the “M” figures can divide. Sample Input123212 Sample Output12Case #1: 2Case #2: 19 Source2014 ACM/ICPC Asia Regional Shanghai Online 题意：如图有n个“M”，求能把矩形分成几块 题解：ans=8*n*n-7*n+1 首先n条直线可以把平面分成n*(n+1)/2+1个区域，那么对于4*n条直线来说，可以分成2*n*(4*n+1)+1个区域，一个“M”延长出去后，最多会多9块，也就是说因为“M”型的特殊性，每次会少9*n个块，所以答案为8*n*n-7*n+1 其余各种类型分割平面见这个传送门，学习了学习了∑(ﾟДﾟ) 折线分割平面问题总结 代码：1234567891011121314151617181920import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); int t; t=cin.nextInt(); BigInteger n,ans; for(int i=1;i&lt;=t;i++) &#123; n=cin.nextBigInteger(); ans=n.multiply(BigInteger.valueOf(8)).multiply(n); ans=ans.subtract(n.multiply(BigInteger.valueOf(7))); ans=ans.add(BigInteger.valueOf(1)); System.out.println("Case #"+i+": "+ans.toString()); &#125; cin.close(); &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
        <tag>分割平面</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 5050 Divided Land（java大数，二进制）]]></title>
    <url>%2F276c2267%2F</url>
    <content type="text"><![CDATA[Time Limit: 8000/4000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others) Problem DescriptionIt’s time to fight the local despots and redistribute the land. There is a rectangular piece of land granted from the government, whose length and width are both in binary form. As the mayor, you must segment the land into multiple squares of equal size for the villagers. What are required is there must be no any waste and each single segmented square land has as large area as possible. The width of the segmented square land is also binary. InputThe first line of the input is T (1 ≤ T ≤ 100), which stands for the number of test cases you need to solve. Each case contains two binary number represents the length L and the width W of given land. (0 &lt; L, W ≤ 21000) OutputFor each test case, print a line “Case #t: ”(without quotes, t means the index of the test case) at the beginning. Then one number means the largest width of land that can be divided from input data. And it will be show in binary. Do not have any useless number or space. Sample Input1234310 100100 11010010 1100 Sample Output123Case #1: 10Case #2: 10Case #3: 110 Source2014 ACM/ICPC Asia Regional Shanghai Online 题解：a,b两个二进制边长，分成大小相等的小正方形，即求gcd(a,b) java二进制都封装好了T^T太好用了吧 代码：1234567891011121314151617import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); int t; t=cin.nextInt(); BigInteger a,b; for(int i=1;i&lt;=t;i++) &#123; a=cin.nextBigInteger(2); b=cin.nextBigInteger(2); System.out.println("Case #"+i+": "+a.gcd(b).toString(2)); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1212 Big Number（java大数取模）]]></title>
    <url>%2F6a4cab08%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1212 Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem DescriptionAs we know, Big Number is always troublesome. But it’s really important in our ACM. And today, your task is to write a program to calculate A mod B. To make the problem easier, I promise that B will be smaller than 100000. Is it too hard? No, I work it out in 10 minutes, and my program contains less than 25 lines. InputThe input contains several test cases. Each test case consists of two positive integers A and B. The length of A will not exceed 1000, and B will be smaller than 100000. Process to the end of file. OutputFor each test case, you have to ouput the result of A mod B. Sample Input1232 312 7152455856554521 3250 Sample Output123251521 题意：求A%B，A的长度不超过1000，B小于100000 代码：【c++】 123456789101112131415#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;algorithm&gt;#include&lt;math.h&gt;using namespace std;int main()&#123; string s; int n; while(cin&gt;&gt;s&gt;&gt;n)&#123; int ans=s[0]-'0'; for(int i=1;i&lt;s.length();i++)ans=(ans*10+s[i]-'0')%n; cout&lt;&lt;ans&lt;&lt;endl; &#125;&#125; 【java】 123456789101112131415import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger a,b; while(cin.hasNext()) &#123; a=cin.nextBigInteger(); b=cin.nextBigInteger(); System.out.println(a.remainder(b)); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 6222 Heron and His Triangle（海伦公式，打表找规律，java大数）]]></title>
    <url>%2Fa1e708e2%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 262144/262144 K (Java/Others) Problem DescriptionA triangle is a Heron’s triangle if it satisfies that the side lengths of it are consecutive integers t-1, t, t+ 1 and thatits area is an integer. Now, for given n you need to find a Heron’s triangle associated with the smallest t biggerthan or equal to n. InputThe input contains multiple test cases. The first line of a multiple input is an integer T (1 ≤ T ≤ 30000) followedby T lines. Each line contains an integer N (1 ≤ N ≤ 10^30). OutputFor each test case, output the smallest t in a line. If the Heron’s triangle required does not exist, output -1. Sample Input1234541234 Sample Output12344444 Source2017ACM/ICPC亚洲区沈阳站-重现赛（感谢东北大学） 题意：三角形三边为t-1,t,t+1，且面积为整数 给定一个n，找出大于等于n的最小的t 题解：求面积这题用海伦公式： 12p=(a+b+c)/2S=√p(p-a)(p-b)(p-c) 然后写个c++打表找满足的t 12345678int main()&#123; for(int i=1;i&lt;10000;i++)&#123; long double t=i,p=t*3/2,s=p*(p-t)*(p-t-1)*(p-t+1); LL tmp=sqrt(s); if(tmp*tmp==s)printf("%d ",i); &#125; return 0;&#125; 得到序列：(2) 4 14 52 194 724 2702…… 这里2也满足式子，但是1，2，3不能构成三角形，不过2在推公式时候可以用一下 发现递推式f[n]=4*f[n-1]-f[n-2] 然后10^30就是java大数搞一搞了 代码：12345678910111213141516171819202122232425262728import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger f[]=new BigInteger[105]; f[1]=BigInteger.valueOf(4);f[2]=BigInteger.valueOf(14); BigInteger tmp=BigInteger.valueOf(10); int ji=2; while(f[ji].compareTo(tmp.pow(30))&lt;=0) &#123; ji++; f[ji]=f[ji-1].multiply(BigInteger.valueOf(4)).subtract(f[ji-2]); &#125; int t; t=cin.nextInt(); while(t--&gt;0) &#123; BigInteger n=cin.nextBigInteger(); for(int i=1;i&lt;=ji;i++) &#123; if(n.compareTo(f[i])&lt;=0) &#123; System.out.println(f[i]); break; &#125; &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
        <tag>推公式</tag>
        <tag>海伦公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 2054 A == B ?（java高精度）]]></title>
    <url>%2F560387bb%2F</url>
    <content type="text"><![CDATA[Time Limit: 1000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others) Problem DescriptionGive you two numbers A and B, if A is equal to B, you should print “YES”, or print “NO”. Inputeach test case contains two numbers A and B. Outputfor each case, if A is equal to B, you should print “YES”, or print “NO”. Sample Input12341 22 23 34 3 Sample Output1234NOYESYESNO 虽然样例给的都是整数，但是题目里说给的是两个数，所以有小数。。用BigDecimal就行 代码：12345678910111213141516import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigDecimal a,b; while(cin.hasNext()) &#123; a=cin.nextBigDecimal(); b=cin.nextBigDecimal(); if(a.compareTo(b)==0)System.out.println("YES"); else System.out.println("NO"); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 4523 威威猫系列故事——过生日（java大数）]]></title>
    <url>%2Fd5042e55%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=4523 Time Limit: 500/200 MS (Java/Others) Memory Limit: 65535/32768 K (Java/Others) Problem Description 2月29号是威威猫的生日，由于这个日子非常特殊，4年才一次，所以生日这天许多朋友都前往威威猫家祝贺他的生日。 大家给威威猫买了一个非常大非常大的蛋糕，蛋糕的形状是一个有n条边的凸多边形，可是威威猫的审美观有一点奇怪，他只喜欢有m条边的蛋糕，所以他要伙伴们把这个蛋糕切p次，然后给他一个只有m条边的新蛋糕。这下大家急了，这不是坑爹吗，审美观崎岖作怪。 假设蛋糕可看成一个平面含n条边的凸多边形，每一刀必须沿直线切下去，p刀之后能给威威猫切出一个m条边的蛋糕吗？ Input多组测试数据，每组占一行，包含3个整数n, m, p（含义如上）。[Technical Specification]3 &lt;= n &lt;= 10^1000 &lt; m &lt;= 10^1000 &lt;= p &lt;= 10^100 Output每组测试数据，如果能够切出威威猫喜欢的蛋糕，请输出”YES”，否则请输出”NO”；每组数据输出一行。 Sample Input14 5 1 Sample Output1YES HintSample对应的示意图如下： Source2013腾讯编程马拉松初赛第四场（3月24日） 题解：切一刀最多可以少n-3条边或者多1条边，所以就是判断m是否在[3，n+p]范围内 代码：1234567891011121314151617import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger n,m,p; while(cin.hasNextBigInteger()) &#123; n=cin.nextBigInteger(); m=cin.nextBigInteger(); p=cin.nextBigInteger(); if(m.compareTo(BigInteger.valueOf(3))&gt;=0&amp;&amp;m.compareTo(n.add(p))&lt;=0)System.out.println("YES"); else System.out.println("NO"); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 5920 Ugly Problem（贪心，java大数）]]></title>
    <url>%2Fcfe28c6a%2F</url>
    <content type="text"><![CDATA[Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others) Special Judge Problem DescriptionEveryone hates ugly problems. You are given a positive integer. You must represent that number by sum of palindromic numbers. A palindromic number is a positive integer such that if you write out that integer as a string in decimal without leading zeros, the string is an palindrome. For example, 1 is a palindromic number and 10 is not. InputIn the first line of input, there is an integer T denoting the number of test cases. For each test case, there is only one line describing the given integer s (1≤s≤10^1000). OutputFor each test case, output “Case #x:” on the first line where x is the number of that test case starting from 1. Then output the number of palindromic numbers you used, n, on one line. n must be no more than 50. en output n lines, each containing one of your palindromic numbers. Their sum must be exactly s. Sample Input1232181000000000000 Sample Output12345678Case #1:299Case #2:29999999999991 Hint129 + 9 = 18999999999999 + 1 = 1000000000000 Source2016中国大学生程序设计竞赛（长春）-重现赛 题意：给一个数n，把它分成50个以内回文数，这些回文数的和等于n 题解：题目竟然叫ugly problem。。果然不beautiful。。wa了好多次。。c++的话大概是要再写一个高精度减法 思路是构造的时候贪心的去构造，对一个数x来说，先取他的前（len+1）/2 位，记为l，然后再复制（len/2）位记为r，（这两个式子对奇偶都适用） 如果生成的这个长度相同的数now比x小，那么直接更新x，用新的x重复上诉操作 如果生成的now比x大，那么就把l-1，用新的l来算出r和now 举个例子：12345x=654321则一开始l=654，这样r=456，now=654456，但是654456&gt;654321，所以l--，l=653，r=356，now=653356，更新x，x=654321-653356=965，l=96，r=9，now=969，969&gt;965，l=95，r=9，now=959，x=965-959=6，跳出while，存入最后一个6 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); int t; t=cin.nextInt(); BigInteger x=BigInteger.valueOf(0),num,jian; String s=null,r=null,l=null,now=null; String ans[]=new String[55]; for(int cas=1;cas&lt;=t;cas++) &#123; int ji=0; x=cin.nextBigInteger(); System.out.println("Case #"+cas+":"); s=x.toString(); int len=s.length(); now=s.substring(0,(len+1)/2); num=new BigInteger(now); while(x.compareTo(BigInteger.valueOf(11))&gt;=0) &#123; l=num.toString(); r=""; for(int i=len/2-1;i&gt;=0;i--)r=r+l.charAt(i); now=l+r; jian=new BigInteger(now); if(x.compareTo(jian)&gt;=0) &#123; x=x.subtract(jian); ans[ji++]=now; s=x.toString(); len=s.length(); now=s.substring(0,(len+1)/2); num=new BigInteger(now); &#125; else &#123; num=num.subtract(BigInteger.valueOf(1)); &#125; &#125; int res=x.intValue(); if(res&gt;=10) &#123; ans[ji++]="9"; ans[ji++]=String.valueOf(res-9); &#125; else if(res!=0)&#123; ans[ji++]=String.valueOf(res); &#125; System.out.println(ji); for(int i=0;i&lt;ji;i++)System.out.println(ans[i]); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java大数水题集 高精度]]></title>
    <url>%2F84b8f7c6%2F</url>
    <content type="text"><![CDATA[自从有一次用java写一个卡特兰数 C. Catalan Square 的题之后，觉得再不写写java大整数就老了。。啊c++高精度模拟再见吧╮(￣▽￣””)╭ 先水个几题感受一下～ hdu 1002 A + B Problem II 开头肯定是万恶之源a+b hdu 1753 大明A+B小数a+b hdu 2054 A == B ?判断两个大数（可能是小数）是否相等 hdu 1047 Integer Inquiry很多大数相加 hdu 1212 Big Numbera%b hdu 1042 N！阶乘 hdu 1715 大菲波数大斐波那契 hdu 1250 Hat’s Fibonacci类似斐波那契 hdu 1316 How Many Fibs? 区间斐波那契 hdu 1063 Exponentiation 小数的n次方高精度 hdu 5050 Divided Land 二进制大数 还有些没那么那么水的题就不收录在这篇了，放在分类java–BigInteger下面了]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1753 大明A+B（java高精度小数）]]></title>
    <url>%2F773303aa%2F</url>
    <content type="text"><![CDATA[Time Limit: 3000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others) http://acm.hdu.edu.cn/showproblem.php?pid=1753 Problem Description话说，经过了漫长的一个多月，小明已经成长了许多，所以他改了一个名字叫“大明”。这时他已经不是那个只会做100以内加法的那个“小明”了，现在他甚至会任意长度的正小数的加法。 现在，给你两个正的小数A和B，你的任务是代表大明计算出A+B的值。 Input本题目包含多组测试数据，请处理到文件结束。每一组测试数据在一行里面包含两个长度不大于400的正小数A和B。 Output请在一行里面输出输出A+B的值，请输出最简形式。详细要求请见Sample Output。 Sample Input1231.1 2.91.1111111111 2.34443233431 1.1 Sample Output12343.45554344542.1 代码：12345678910111213141516import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigDecimal a,b; while(cin.hasNext()) &#123; a=cin.nextBigDecimal(); b=cin.nextBigDecimal(); String ans=a.add(b).stripTrailingZeros().toPlainString();//化简 System.out.println(ans); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1316 How Many Fibs?（java大数，区间斐波那契）]]></title>
    <url>%2F659aa8d8%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1316 Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem DescriptionRecall the definition of the Fibonacci numbers:f1 := 1f2 := 2fn := fn-1 + fn-2 (n &gt;= 3) Given two numbers a and b, calculate how many Fibonacci numbers are in the range [a, b]. InputThe input contains several test cases. Each test case consists of two non-negative integer numbers a and b. Input is terminated by a = b = 0. Otherwise, a &lt;= b &lt;= 10^100. The numbers a and b are given with no superfluous leading zeros. OutputFor each test case output on a single line the number of Fibonacci numbers fi with a &lt;= fi &lt;= b. Sample Input12310 1001234567890 98765432100 0 Sample Output1254 SourceUniversity of Ulm Local Contest 2000 [a,b]区间内有多少个斐波那契数，a &lt;= b &lt;= 10^100 代码：1234567891011121314151617181920212223242526import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); int ans; BigInteger a,b; BigInteger f[]=new BigInteger[1005]; f[1]=BigInteger.valueOf(1); f[2]=BigInteger.valueOf(2); for(int i=3;i&lt;=1000;i++)f[i]=f[i-1].add(f[i-2]); while(cin.hasNextBigInteger()) &#123; ans=0; a=cin.nextBigInteger(); b=cin.nextBigInteger(); if(a.compareTo(BigInteger.valueOf(0))==0&amp;&amp;b.compareTo(BigInteger.valueOf(0))==0)break; for(int i=1;i&lt;=1000;i++) &#123; if(a.compareTo(f[i])&lt;=0&amp;&amp;b.compareTo(f[i])&gt;=0)ans++; if(b.compareTo(f[i])&lt;0)break; &#125; System.out.println(ans); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
        <tag>斐波那契</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1063 Exponentiation（java高精度）]]></title>
    <url>%2Fc2176cf3%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1063Time Limit: 2000/500 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem DescriptionProblems involving the computation of exact values of very large magnitude and precision are common. For example, the computation of the national debt is a taxing experience for many computer systems. This problem requires that you write a program to compute the exact value of Rn where R is a real number ( 0.0 &lt; R &lt; 99.999 ) and n is an integer such that 0 &lt; n &lt;= 25. InputThe input will consist of a set of pairs of values for R and n. The R value will occupy columns 1 through 6, and the n value will be in columns 8 and 9. OutputThe output will consist of one line for each line of input giving the exact value of R^n. Leading zeros should be suppressed in the output. Insignificant trailing zeros must not be printed. Don’t print the decimal point if the result is an integer. Sample Input12345695.123 120.4321 205.1234 156.7592 998.999 101.0100 12 Sample Output123456548815620517731830194541.899025343415715973535967221869852721.0000000514855464107695612199451127676715483848176020072635120383542976301346240143992025569.92857370126648804114665499331870370751166629547672049395302429448126.76412102161816443020690903717327667290429072743629540498.1075960194566517745610440100011.126825030131969720661201 SourceEast Central North America 1988 求R^n，( 0.0 &lt; R &lt; 99.999，0 &lt; n &lt;= 25 ) 代码：123456789101112131415161718import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); while(cin.hasNext()) &#123; BigDecimal ans=cin.nextBigDecimal(); int n=cin.nextInt(); String res=ans.pow(n).stripTrailingZeros().toPlainString();//整数去掉小数点和后面的0 if(res.startsWith("0"))&#123; res=res.substring(1);//从第一位开始取，即去前导0 &#125; System.out.println(res); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1250 Hat's Fibonacci（java大数）]]></title>
    <url>%2F5f826ba6%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1250 Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem DescriptionA Fibonacci sequence is calculated by adding the previous two members the sequence, with the first two members being both 1.F(1) = 1, F(2) = 1, F(3) = 1,F(4) = 1, F(n&gt;4) = F(n - 1) + F(n-2) + F(n-3) + F(n-4)Your task is to take a number as input, and print that Fibonacci number. InputEach line will contain an integers. Process to end of file. OutputFor each case, output the result in a line. Sample Input1100 Sample Output14203968145672990846840663646 Note:No generated Fibonacci number in excess of 2005 digits will be in the test data, ie. F(20) = 66526 has 5 digits. 代码：12345678910111213141516171819202122import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger []f=new BigInteger[10005]; f[1]=BigInteger.valueOf(1); f[2]=BigInteger.valueOf(1); f[3]=BigInteger.valueOf(1); f[4]=BigInteger.valueOf(1); for(int i=5;i&lt;=10000;i++) &#123; f[i]=f[i-1].add(f[i-2].add(f[i-3].add(f[i-4]))); &#125; int n; while(cin.hasNext()) &#123; n=cin.nextInt(); System.out.println(f[n]); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1715 大菲波数（java大数）]]></title>
    <url>%2Fbef6deea%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1715 Time Limit: 1000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others) Problem DescriptionFibonacci数列，定义如下：f(1)=f(2)=1f(n)=f(n-1)+f(n-2) n&gt;=3。计算第n项Fibonacci数值。 Input输入第一行为一个整数N，接下来N行为整数Pi（1&lt;=Pi&lt;=1000）。 Output输出为N行，每行为对应的f(Pi)。 Sample Input123456512345 Sample Output1234511235 代码：1234567891011121314151617181920import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger []f=new BigInteger[1005]; f[1]=BigInteger.valueOf(1); f[2]=BigInteger.valueOf(1); for(int i=3;i&lt;=1000;i++) &#123; f[i]=f[i-1].add(f[i-2]); &#125; int t=cin.nextInt(),n; while(t--&gt;0) &#123; n=cin.nextInt(); System.out.println(f[n]); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
        <tag>斐波那契</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1047 Integer Inquiry（java大数）]]></title>
    <url>%2F63dfb318%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1047 Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem DescriptionOne of the first users of BIT’s new supercomputer was Chip Diller. He extended his exploration of powers of 3 to go from 0 to 333 and he explored taking various sums of those numbers.“This supercomputer is great,” remarked Chip. “I only wish Timothy were here to see these results.” (Chip moved to a new apartment, once one became available on the third floor of the Lemon Sky apartments on Third Street.) InputThe input will consist of at most 100 lines of text, each of which contains a single VeryLongInteger. Each VeryLongInteger will be 100 or fewer characters in length, and will only contain digits (no VeryLongInteger will be negative). The final input line will contain a single zero on a line by itself. OutputYour program should output the sum of the VeryLongIntegers given in the input. This problem contains multiple test cases! The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks. The output format consists of N output blocks. There is a blank line between output blocks. Sample Input123456711234567890123456789012345678901234567890123456789012345678901234567890123456789012345678900 Sample Output1370370367037037036703703703670 SourceEast Central North America 1996 最多100个100个字符那么长的大数相加 最后一行不多一个换行 代码：import java.io.*; import java.math.*; import java.util.*; public class Main { public static void main(String[] args){ Scanner cin=new Scanner(System.in); int t; BigInteger ans,a; t=cin.nextInt(); while(t--&gt;0){ ans=BigInteger.valueOf(0); while(cin.hasNextBigInteger()) { a=cin.nextBigInteger(); if(!a.equals(BigInteger.valueOf(0))) { ans=ans.add(a); } else { System.out.println(ans); if(t&gt;0)System.out.println(&quot;&quot;); break; } } } } }]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1042 N!（Java大整数，阶乘）]]></title>
    <url>%2F7becbf63%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1042 Time Limit: 10000/5000 MS (Java/Others) Memory Limit: 262144/262144 K (Java/Others) Problem DescriptionGiven an integer N(0 ≤ N ≤ 10000), your task is to calculate N! InputOne N in one line, process to the end of file. OutputFor each N, output N! in one line. Sample Input123123 Sample Output123126 一路写水题的感觉真的好舒服0.0 不过这个题wa到怀疑人生啊。。直到我发现0的阶乘竟然是0！ 代码：1234567891011121314151617181920import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger []a=new BigInteger[10005]; a[0]=BigInteger.valueOf(1); a[1]=BigInteger.valueOf(1); int n; for(int i=2;i&lt;=10000;i++) &#123; a[i]=a[i-1].multiply(BigInteger.valueOf(i)); &#125; while(cin.hasNext()) &#123; n=cin.nextInt(); System.out.println(a[n]); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1002 A + B Problem II（java大数）]]></title>
    <url>%2Fbe3871f5%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1002 Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem DescriptionI have a very simple problem for you. Given two integers A and B, your job is to calculate the Sum of A + B. InputThe first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large, that means you should not process them by using 32-bit integer. You may assume the length of each integer will not exceed 1000. OutputFor each test case, you should output two lines. The first line is “Case #:”, # means the number of the test case. The second line is the an equation “A + B = Sum”, Sum means the result of A + B. Note there are some spaces int the equation. Output a blank line between two test cases. Sample Input12321 2112233445566778899 998877665544332211 Sample Output12345Case 1:1 + 2 = 3Case 2:112233445566778899 + 998877665544332211 = 1111111111111111110 题意：a+b 长度小于1000 代码：pe了无数次。。只好去网上找代码，最后一行没有附加换行。。 import java.io.*; import java.math.*; import java.util.*; public class Main{ public static void main(String[] args){ Scanner cin=new Scanner(System.in); int t; BigInteger a,b,c; t=cin.nextInt(); for(int i=1;i&lt;=t;i++){ a=cin.nextBigInteger(); b=cin.nextBigInteger(); c=a.add(b); System.out.println(&quot;Case &quot;+i+&quot;:&quot;); System.out.println(a+&quot; + &quot;+b+&quot; = &quot;+c); if(i&lt;t)System.out.println(); } } }]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C. Catalan Square -- Nordic Collegiate Programming Contest 2014（java大数，卡特兰数）]]></title>
    <url>%2Fbb984cd4%2F</url>
    <content type="text"><![CDATA[题目里公式太多了0.0，懒得贴题目了直接抛链接吧https://nanti.jisuanke.com/t/30371 题意：求卡特兰数的第n+1项，n范围[0,5000] 通项公式：f(n)=C(n,2n)/(n+1)=(2n)!/((n!)*(n+1)!)=C(n,2n)-C(n+1,2n) 递推公式：f(n)=f(n-1)*(4*n-2)/(n+1) 1,1,2,5,14,42,132,429,1430…… 代码：123456789101112131415161718192021222324import java.io.*; import java.math.*;import java.util.*; public class Main&#123; public static void main(String[] args)&#123; Scanner cin=new Scanner(System.in); BigInteger []a=new BigInteger[5005]; BigInteger start=new BigInteger("1"); a[0]=start; a[1]=start; for(int i=2;i&lt;5005;i++)&#123; Integer t1=i+1; Integer t2=4*i-2; BigInteger k1=new BigInteger(t1.toString()); BigInteger k2=new BigInteger(t2.toString()); a[i]=(a[i-1].multiply(k2)).divide(k1); &#125; while(cin.hasNext())&#123; int n = cin.nextInt(); System.out.println(a[n]); &#125; &#125;&#125;]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
        <tag>卡特兰数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A. Too Rich -- ACM Changchun 2015（贪心，dfs，回溯）]]></title>
    <url>%2F10a23843%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/30416 You are a rich person, and you think your wallet is too heavy and full now. So you want to give me some money by buying a lovely pusheen sticker which costs p dollars from me. To make your wallet lighter, you decide to pay exactly p dollars by as many coins and/or banknotes as possible. For example, if p = 17 and you have two 10 coins, four 5 coins, and eight 1 coins, you will pay it by two 5 coins and seven 1 coins. But this task is incredibly hard since you are too rich and the sticker is too expensive and pusheen is too lovely, please write a program to calculate the best solution. Input FormatThe first line contains an integer T indicating the total number of test cases. Each test case is a line with 11 integers p, c1, c5, c10, c20, c50, c100, c200, c500, c1000, c2000, specifying the price of the pusheen sticker, and the number of coins and banknotes in each denomination. The number ci means how many coins/banknotes in denominations of ii dollars in your wallet. • 200001≤T≤20000 • 0≤p≤10^9 • ci≤100000 Output FormatFor each test case, please output the maximum number of coins and/or banknotes he can pay for exactly p dollars in a line. If you cannot pay for exactly p dollars, please simply output ‘-1’. 样例输入1234317 8 4 2 0 0 0 0 0 0 0100 99 0 0 0 0 0 0 0 0 02015 9 8 7 6 5 4 3 2 1 0 样例输出1239 -1 36 题目来源ACM Changchun 2015 题意：有面值1,5,10,20,50,100,200,500,1000,2000的硬币各若干，问你能不能用最多的硬币凑出p元，能的话输出最多硬币数，不能的话输出-1， 题解：如果要保证硬币数最多的话，肯定是要让小面值的硬币尽可能的多，所以肯定是用贪心的思路去求解，有两种贪心的思路，一种是从小面值硬币开始看能不能凑成p元，还有一种是从大面值开始看能不能凑出money-p元（money是硬币能凑成的总钱数） 考虑一下这种情况：60=10+50=20+20+20，假设刚好只有10，20，20，20，50这五个硬币，从小面值开始取，如果10已取，那么只能找50，是无法保证最优的，所以这里考虑到回溯，如果开始取第二种硬币后，第一种硬币个数大于0，那么我就假设第一种硬币少取一个，用新状态继续dfs 但是仔细一想这也有个问题啊，因为是在所有可行解里找最小的，如果要你用2000个1元和1个2000元凑2001元，那么一开始贪心的取2000个1元硬币，然后一个一个减要dfs到什么时候0.0，所以这就是这题的另一个特点，硬币面值差比较大 所以不如用第二种贪心的思路，既然要求用最多的硬币凑成p，那不如求用最少的硬币凑成（money-p），这样就是从最大面值开始贪心，然后回溯 a[i]存的是给定的硬币数，b[i]存的是当前取的第i种硬币的个数，dfs（m，cur，res），m表示当前还需要凑的钱，cur表示当前轮到使用的硬币是哪种，res表示当前需要的硬币个数 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;#define LL long long#define INF 0x3f3f3f3fconst int N=1000005;LL coin[10]=&#123;1,5,10,20,50,100,200,500,1000,2000&#125;,a[10],b[10],ans;void dfs(LL m,int cur,int res)&#123; if(m==0)&#123; ans=ans&gt;res?res:ans; return; &#125; if(cur==-1)return; b[cur]=a[cur]&gt;(m/coin[cur])?(m/coin[cur]):a[cur]; dfs(m-coin[cur]*b[cur],cur-1,res+b[cur]); if(b[cur]&gt;0)&#123; b[cur]--; dfs(m-coin[cur]*b[cur],cur-1,res+b[cur]); &#125;&#125;int main()&#123; int t,p; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;p); LL money=0,geshu=0; for(int i=0;i&lt;10;i++)&#123; scanf("%lld",&amp;a[i]); geshu+=a[i]; money+=coin[i]*a[i]; &#125; money-=p; if(money&lt;0)&#123; puts("-1"); continue; &#125; else&#123; ans=INF; dfs(money,9,0); if(ans==INF)puts("-1"); else printf("%lld\n",geshu-ans); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[wxpy -- 用 Python 玩微信]]></title>
    <url>%2F12fb71da%2F</url>
    <content type="text"><![CDATA[在csdn公众号上看见的，感觉好妙，而且操作简单，这就去玩诶嘿 安装wxpy 安装pip（python包管理工具）打开终端，输入sudo easy_install pip 安装wxpy装好pip之后继续在终端输入suso pip3 install -U wxpy （这里如果是python3的话就写pip3，2的话就写pip2，查找python版本的办法是在终端输入python -V（大写）） 用wxpy愉快的玩耍 导入模块，初始化机器人（会扫一个二维码登陆微信） 官方文档里说最好用小号试0.0，但是我没有小号啊，直接大号玩0.0，被微信web封也拦不住我(￣Д￣)ﾉ 拿基友来做实验 (=´∀｀)人(´∀｀=) 新建一个变量就好了，随便记录一下，涂掉的是微信昵称 123@bot.register() def print_others(msg): print(msg) 然后有了上面这段就会print实时消息了，这样就能直接在python上实现最基本的收发消息了，奇妙啊，然后继续试了一大堆乱七八糟的功能，官方文档真的说的相当详细了，传送门放下面啦～ wxpy传送门官方文档：wxpy: 用 Python 玩微信github地址：微信机器人 / 可能是最优雅的微信个人号 API ✨✨]]></content>
      <categories>
        <category>瞎折腾(=ﾟωﾟ)ﾉ</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文章阅读次数显示：Counter not initialized! See more at consoleerr msg的解决办法]]></title>
    <url>%2F52b56662%2F</url>
    <content type="text"><![CDATA[按照网上的leancloud教程配置下来，但是就是显示Counter not initialized! See more at consoleerr msg 然后百度查到了这篇文章：Leancloud访客统计插件重大安全漏洞修复指南 猜测应该和next升级版啥的或者安全性有关，就按照这篇文章里说的配置了各种， 装了「leancloud-counter-security」这个插件，本以为能解决了的，然而还是显示那句英文(#ﾟДﾟ) 拖了好几天没解决，然后有一次在主题配置文件里乱翻终于发现了问题0.0，然后就是乱搞出奇迹了。。。这里放上我的解决办法 首先打开主题配置文件_config.yml，next下的那个，搜索valine:（虽然这个是基于leancloud的评论系统的和阅读量无关，但是在这里发现了很重要的一段话0.0） 可以看见visitor那一项后面有一段话，我把它截出来了，如下： 123456leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html目前不支持leancloud-counter-security。 当访问者设置为true时，建议appid和appkey与leancloud_visitors相同，以实现计数器兼容性。 文章阅读统计https://valine.js.org/visitor.html 这里说「leancloud-counter-security」这个插件是不支持的，我原来visitor设置的是false，然后把它改成了ture 然后在_config.yml里搜索leancloud_visitors:，如图： 这里这段话如下： 12345If you don't care about security in lc counter and just want to use it directly(without hexo-leancloud-counter-security plugin), set the `security` to `false`.如果您不关心lc计数器的安全性，只想直接使用它（没有hexo-leancloud-counter-security插件），将`security`设置为`false`。 security这项，我原来设置的就是true，不知道有没有关系，此处只是放上我的设置而已 然后打开leancloud，打开这个项目，存储–Counter–其他–权限设置： 原来跟着那篇文章把add_fields这一项设了指定用户，然后现在改成了所有用户，虽然这样或许会对安全性有影响0.0，但是管他呢反正能用了先这样再说Σ（ﾟдﾟlll） 设置了上面这两个，重新hexo-clean-g-d之后就可以发现阅读量正常显示了，但是这都是在上面那篇别人博客里的文章设置完成且仍出现此问题的情况下设置的，所以不清楚是不是二者相互作用的结果0.0]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>leancloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo下各种博客美化和功能插件汇总（内附本博客css样式）]]></title>
    <url>%2F9a99eb64%2F</url>
    <content type="text"><![CDATA[自从开始捣鼓hexo也有十几天了，有了点基本功能之后就走上了博客美化的不归路 ◡ ヽ(`Д´)ﾉ ┻━┻ ，这个过程简直是摸爬滚打，各种看不懂各种试效果，而且百度对hexo似乎不是很友好啊，一般的教程都是csdn和简书之类的会放在前面，而且nexT主题还更新了，有些老的教程配置就没法用，还得看官方文档啥的0.0，这篇博客大概记录一下一些问题和几个汇总链接 「目录」 【博客美化和功能插件汇总】包括背景和背景动态效果，各种样式设置，递交搜索引擎，评论功能，阅读数，置顶……反正新手上手需要的，大佬的博客里都有 【捕捉一只会聊天的看板娘live2d】 【访客小地球插件revolvermaps】 【给hexo设置不同的背景图片（随机或轮播）】 【在菜单栏添加新页面with新图标】 【其他杂七杂八的记录】1.npm无法装插件，549 throw err的解决办法2.hexo g时报错Template render error: unexpected token: &gt;3.文章阅读次数显示：Counter not initialized! See more at consoleerr msg4.如何给个人博客换上专属免费域名[hexo+github+freenom] 博客美化和功能插件汇总hexo大佬的教程最前面肯定要放上大佬的这篇：打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化 next主题升级可能出现的一些问题和解决：next主题升级6.0 其他还有很多，因为内容有重复就懒的放了，总之只要获得一个大佬的博客，那么通过他的友链，友链的友链，友链的友链的友链……你就能获得一堆大佬的博客啦～可以去控制台或者通过网页源代码看看那些好看的博客的秘密，虽然大佬们一般是不会留下踪迹的╮(￣▽￣””)╭ 总之要先看完第一篇懂个大概才行，不然真的是一头雾水，之前不知道「themes/next/source/css/_custom/custom.styl」这个文件是next专门留给用户自定义样式的，以至于跟着别的教程改了一点点不知道哪里的样式设置的源码0.0，要改回来就不方便了，下面也放上我的css样式设置，有些是参考大佬的，没有写很多0.0硬学css，有点乱而且有些地方其实不知道实际是否存在相应对象 _ (:з」∠)_ 都是保存刷新看效果试出来的 我的custom.styl（现在的可能有改动）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234// Custom styles.// 主页文章添加阴影效果 .post &#123; margin: 19px 0px 45px 0px;//外框离外外框距离 padding: 10px 30px 5px 30px;//文字离外框距离 -webkit-box-shadow: 0 0 10px rgba(0, 0, 0, .5); -moz-box-shadow: 0 0 10px rgba(0, 0, 0, .5); background: rgba(255,255,255,0.65) none repeat scroll !important; &#125;// 页面背景图body &#123; background: url(https://hbimg.b0.upaiyun.com/fe7343d213869361a4428c581278d427e3d2b0aa9725-Os4lwD_fw658); background-repeat: no-repeat; background-attachment:fixed; background-position:50% 100%; background-size: cover; &#125;// 页面最顶部的横线.headband &#123; height: 1.5px; background-image: linear-gradient(90deg, #e3cae4 0%, #ffffff 15%, #d6ceff 30%, #e3cae4 44%, #afc4e0 58%, #d2e4fd 72%, #d1d1ef 86%, #e3cae4 100%);&#125;// 页面顶部行高.header &#123; line-height: 1.5;&#125;// 页面留白更改.header-inner &#123; padding-top: 20px; padding-bottom: 5px;&#125;.posts-expand &#123; padding-top: 10px;&#125;.posts-expand .post-meta &#123; margin: 5px 0px 0px 0px;&#125;.post-button &#123; margin-top: 0px;&#125;// 站点名背景.brand&#123; background-color: rgba(255, 255, 255, 0); margin-top: 15px; padding: 0px;&#125;// 站点名字体.site-title &#123; font-family: Times; font-size: 38px; font-weight: bold; color: #222222;&#125;// 站点子标题.site-subtitle&#123; padding-top: 11px; padding-bottom: 5px;&#125;// 去除页面底部页码上面的横线.pagination &#123; border: none; margin: 0px;&#125;// 去掉图片边框.posts-expand .post-body img &#123; border: none; padding: 0px;&#125;.post-gallery .post-gallery-img img &#123; padding: 3px;&#125;.posts-expand .post-title &#123; font-family: Times; font-size: 26px; font-weight: 700; letter-spacing: 1px;&#125;// 文章的描述description.posts-expand .post-meta &#123; font-size: 14px; margin-top: 20px; margin-bottom: 20px; color: #666;&#125;// [Read More]按钮样式.post-button .btn &#123; background-color: #3f3f3f; margin-top: 20px; margin-bottom: 20px; border-color: #7f7f7f;&#125;.post-button .btn:hover &#123; border-color: #7f7f7f; background-color: #ffffff;&#125;// 去除在页面文章之间的分割线.posts-expand .post-eof &#123; margin: 0px; background-color: rgba(255, 255, 255, 0);&#125;// 去除页面底部页码上面的横线.pagination &#123; border: none; margin: 0px;&#125;// 右下角返回顶部按钮样式.back-to-top &#123; background-color: #373737; border-radius: 5px;&#125;.back-to-top.back-to-top-on &#123; bottom: 10px;&#125;// 分类页面.post-block.page &#123; margin-top: 40px; margin-right: 30px; margin-left: 30px;&#125;.category-all-page &#123; margin: -80px 0px 40px 0px; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgba(255, 255, 255, 0.5); padding: 80px 20px 100px 40px;//上右下左&#125;// 选中文字部分的样式::selection &#123; background-color: #fced6d; color: #222222;&#125;// 侧栏.sidebar &#123; background-color: rgba(255, 255, 255, 0.5); padding-left: 10px;&#125;.sidebar-inner &#123; margin-top: 0px;&#125;// 自定义页脚跳动的心样式@keyframes heartAnimate &#123; 0%,100%&#123;transform:scale(1);&#125; 10%,30%&#123;transform:scale(0.9);&#125; 20%,40%,60%,80%&#123;transform:scale(1.1);&#125; 50%,70%&#123;transform:scale(1.1);&#125;&#125;#heart &#123; animation: heartAnimate 1s ease-in-out infinite;&#125;.with-love &#123; color: rgba(255,0,0,0.5);&#125;// 文章底部评论.comments &#123; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.75); margin: 80px 0px 40px 0px; padding: 10px 20px 10px 20px;&#125;.post-toc .nav .nav-child &#123; display: block;&#125;// 侧栏.sidebar &#123; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.3); background-color: rgba(255, 255, 255, 0.6);&#125;.sidebar-inner &#123; margin-top: 30px;&#125;// 侧栏顶部文字.sidebar-nav li &#123; font-size: 15px; font-weight: bold; color: #7f7f7f;&#125;.sidebar-nav li:hover &#123; color: #222222;&#125;.sidebar-nav .sidebar-nav-active &#123; color: #222222; border-bottom-color: #7f7f7f; border-bottom-width: 1.5px;&#125;.sidebar-nav .sidebar-nav-active:hover &#123; color: #626262;&#125;// 侧栏站点概况行高.site-overview &#123; line-height: 1;&#125;// 侧栏头像（圆形以及旋转效果）.site-author-image &#123; border: 2px inset rgb(255, 255, 255); border-radius: 100%; transition: transform 1.0s ease-out;&#125;img:hover &#123; transform: rotateZ(360deg);&#125;.posts-expand .post-body img:hover &#123; transform: initial;&#125;// 侧栏站点作者名.site-author-name &#123; padding: 25px; font-size: 20px; //font-family: Times; color: #626262;&#125;// 侧栏站点描述.site-description &#123; letter-spacing: 5px; font-size: 15px; font-weight: bold; margin-top: 15px; margin-left: 13px; color: #656565;&#125;// 侧栏站点文章、分类、标签.site-state &#123; line-height: 1.3; margin-left: 12px;&#125;.site-state-item &#123; padding: 0px 15px; border-left: 1.5px solid #7f7f7f;&#125;// 自定义的侧栏时间样式#days &#123; padding: 30px; display: block; color: #7f7f7f; font-size: 13px; margin-top: 15px;&#125; 获取十六进制的颜色rgb（0，0，0）这种常识就不说了 然后还有一种rgba（0，0，0，0）最后一位是设置透明度的，1是不透0是全透 最后一种就是用十六进制表示，可以看到代码里很多都是这种，下面就讲一下 「利用chrome浏览器的取十六进制色方法」 1.右键——检查 2.在下图的位置输入color然后回车，会跳到冒号后，输入red再回车，这时候会出现一个红色小方块，点击左侧任何网页里的地方，就可以获得这个地方的颜色，还有一个上下的箭头，就可以获得rgba了 关于css里的padding和margin还是记录一下吧，margin和padding我一开始也分不清，多设置了几次就发现效果了，如下图： 可以看见一个文章框，对于post这部分来说margin设置的是文字矩形到阴影框的距离，padding设置的是两个阴影框之间的距离 捕捉一只会聊天的看板娘live2d这个花了好久才捕捉成功 ಥ_ಥ 因为一开始啥都不会么。。 github地址：hexo-helper-live2d这个是没有聊天功能的，效果如下： github地址：Live2D教程：Live2D！把可爱的看板娘捕捉到你的博客去吧给博客添加能动的看板娘(Live2D)-将其添加到网页上吧实现的效果和本站的看板娘差不多，就不贴图了，不过我的live2d出处不是这个0.0 不懂html一开始没懂啥叫把代码放到合适的位置0.0，然后看了一下别人的网页源代码，在一大片代码中搜索live2d就知道啦～结合教程很好上手 访客小地球插件revolvermaps写在另一篇博客里了，放上传送门，效果见右侧侧栏站点概览下方 给hexo添加访客小地球插件revolvermaps 给hexo设置不同的背景图片（随机或轮播）理论上随机和轮播是两种： 第一种是轮播：用 jquery-backstretch，这种方法的特点是可以选择自己喜欢的图片进行轮播，但是比下面那个方法麻烦，我太菜了还没研究清楚，这里就不讲了 第二种是随机：用了个相当简单投机取巧的方法，偶然一试竟然还真的可以，只要刷新一下就能换张图，具体操作是只要获得一个随机图片的接口，然后在custom.styl里连上就行了， 各种随机图片的API写在了这篇博客里：几个随机图片API接口(给hexo设置随机背景图片) 在菜单栏添加新页面with新图标开始的时候是想给自己做一个类似说说的页面，实现很草率(/ω＼)，就直接把leancloud的评论功能拿来当说说用，所以这样就需要在菜单栏新建一个页面了，操作如下： 生成新的自定义页面输入sudo hexo new page &quot;nothing&quot; 然后在source下就会有一个nothing文件夹生成，打开之后自己编辑那个index.md页面就行了 把新页面添加到菜单栏打开主题配置文件，找到menu那一块，如下配置： 说说: /nothing || star 第一项是显示的名字，第二项是对应的页面名，第三项是图标 next主题的图标来自Font Awesome，相当方便，只要在图标库里找到那个图标，然后直接输入图标名字即可，附上图标库链接 http://www.fontawesome.com.cn/faicons/ 其他杂七杂八的记录： npm无法装插件，549 throw err的解决办法有一次玩着玩着不小心把npm给玩坏了一直报错,没法install也没法uninstall，当时没截图，在历史记录里找到了一个开头：module.js:549 throw err; ^ Error: Cannot find module……把npm删了重装就好了0.0，下次用npm装插件的时候再也不强退了，这玩意儿似乎不好折腾 hexo g时报错Template render error: unexpected token: &gt;Template render error: (unknown path) [Line 28, Column 143] unexpected token: &gt; 如下图： 查了一下原因是因为md文件里有一些未转义字符报的奇奇怪怪的错，找了一下还真是，就因为我那篇里用了一个这样的颜文字 编译的时候是不允许两对包起来的大括号这种形式的出现的，而且后来改成了注释掉的形式还是报错0.0实在是。。解决办法当然是把这个删了就好了 文章阅读次数显示：Counter not initialized! See more at consoleerr msg放个传送门，一个瞎折腾的方法0.0 文章阅读次数显示：Counter not initialized! See more at consoleerr msg的解决办法 如何给个人博客换上专属免费域名[hexo+github+freenom]丢传送门如何给个人博客换上专属免费域名其他问题好像还有一些吧，一时没记录也想不起来，以后或许会更新吧(￣Д￣)ﾉ唉天天放着控制台里的错不管，好愧疚0.0，好晚了不写了睡了睡了]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>css</tag>
        <tag>live2d</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几个随机图片API接口(给hexo设置随机背景图片)]]></title>
    <url>%2F6a2b981f%2F</url>
    <content type="text"><![CDATA[在custom.styl里设置一下body的background属性就行，在另一篇关于hexo的博客里有写 https://unsplash.it/1600/900?random（据说国内加载略慢，我试了一下还好都差不多） https://uploadbeta.com/api/pictures/random/?key=BingEverydayWallpaperPicture（必应每日图片）https://uploadbeta.com/api/pictures/random（必应图库，一些风景图人物图什么的，都是现代风格） https://source.unsplash.com/random（风格同上，但这个的图尺寸不是大图） 下面是几个二次元的,都差不多ヽ(´o｀（大部分都在本地测试过，可以放心食用），但是以下这些唯一的问题就是。。有些图片质量参差不齐。。所以要想完全和自己口味的话还是自己做一个吧，有开源代码 首先最牛逼的大概就是「漫月API」了，一直被模仿从未被超越那种╮(￣▽￣””)╭，但是现在关了，大概过几个月会开 https://www.xwboke.cn/api/api.php （出处被不小心遗忘在风中了，对不住了0.0） https://img.xjh.me/random_img.php 出处(・ω・)ノ http://www.dmoe.cc/random.php（1000+）出处(・ω・)ノ http://acg.bakayun.cn/randbg.php（6000+ | 东方project可选 | 多尺寸）出处(・ω・)ノ https://acg.yanwz.cn/api.php (400+) 出处(・ω・)ノ http://moece.cc/apl/img.php（433+）出处(・ω・)ノ https://random.52ecy.cn/random.php (8000+) 出处(・ω・)ノ！！这个我用不了，当前接口需要认证啥的emmmmm https://acg.moedragon.com/api.php (1000+) 出处(・ω・)ノ http://api.3ewl.cc/acg/img.php（1000+ | 尺寸可选） 出处(・ω・)ノ 下面这篇是作者的博客随机图片api–开源 https://acg.toubiec.cn/random.php（1000+） 出处(・ω・)ノ 作者开源了 这篇博客里有介绍和源码 先蟹蟹大佬了[项目]随机二次元图片API-已经开源 mark一下慢慢研究➡️ 一个可在php中直接输出随机图片的API]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给hexo添加访客小地球插件revolvermaps]]></title>
    <url>%2F783cca3a%2F</url>
    <content type="text"><![CDATA[这个小插件是无意间看到的，感觉好神奇，就搞来用了这是官网地址和官网截图： revolvermaps——3D访客地图 使用方法是先高级选项搞个自己喜欢的样式，然后复制那段html代码 然后找个你想放到的地方，因为放在了侧栏的最下方，所以就写一下放在侧栏的操作 打开themes/next/layout/_custom/sidebar.swig，在最后粘贴上复制的那段代码就可以了，重新编译一下打开侧栏就可以看到转转的访客地球了(・ω・)ノ 现在小地球就在侧栏里，就不贴图了]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>revolvermaps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1136 欧拉函数]]></title>
    <url>%2F98ac8a82%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 对正整数n，欧拉函数是少于或等于n的数中与n互质的数的数目。此函数以其首名研究者欧拉命名，它又称为Euler’s totient function、φ函数、欧拉商数等。例如：φ(8) = 4（Phi(8) = 4），因为1,3,5,7均和8互质。 Input输入一个数N。(2 &lt;= N &lt;= 10^9) Output输出Phi(n)。 Input示例18 Output示例14 题解：要求一个数欧拉函数，要先知道容斥是什么，这里就不写了 那么先随便举个例子比如 24 好了 24=2*2*2*3 2的倍数有：2，4，6，8，10，12，14，16，18，20，22，243的倍数有：3，66，9，12，15，18，21，24 那些既是2的倍数又是3的倍数的数就要靠容斥来处理了 phi(24)=24-24/2-24/3+24/(2*3) 这样一来就求好了 但是如果要写容斥分母要枚举啊好麻烦的 所以这里有一个妙妙的等式(●°u°●)​ 」phi(24)=24*(1-1/2-1/3+1/2*3)=24*(1-1/2)*(1-1/3) 所以只要找出n的质因子a，然后乘以（1-1/a）就好了,当然这里要通分一下方便操作 代码：123456789101112131415161718192021222324#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;cmath&gt;using namespace std;int phi(int x)&#123; int ans=x; for(int i=2;i*i&lt;=x;i++)&#123;//i*i&lt;=x！！！ if(x%i==0)&#123; ans=ans/i*(i-1); while(x%i==0)x/=i; &#125; &#125; if(x&amp;&amp;x!=1)ans=ans/x*(x-1);//不要忘了这句！！ return ans;&#125;int main()&#123; int n; scanf("%d",&amp;n); printf("%d\n",phi(n)); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
        <tag>容斥</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1137 矩阵乘法]]></title>
    <url>%2Fb972d127%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 给出2个N * N的矩阵M1和M2，输出2个矩阵相乘后的结果。 Input第1行：1个数N，表示矩阵的大小(2 &lt;= N &lt;= 100)第2 - N + 1行，每行N个数，对应M1的1行(0 &lt;= M1[i] &lt;= 1000)第N + 2 - 2N + 1行，每行N个数，对应M2的1行(0 &lt;= M2[i] &lt;= 1000) Output输出共N行，每行N个数，对应M1 * M2的结果的一行。 Input示例1234521 00 10 11 0 Output示例120 11 0 题解：矩阵乘法基本操作 看了榜里别人的代码 如果直接一边乘一边输出的话就不用跑两遍了 会快很多 代码：123456789101112131415161718192021222324252627282930313233343536373839#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;cmath&gt;using namespace std;#define LL long longtypedef vector&lt;LL&gt;row;typedef vector&lt;row&gt;mat;mat mul(mat a,mat b)&#123; mat c(a.size(),row(b[0].size()));//c的行数列数分别是a的行数，b的列数 for(int i=0;i&lt;a.size();i++)&#123;//a的第i行，b的第j列 for(int j=0;j&lt;b.size();j++)&#123; for(int k=0;k&lt;b[0].size();k++) c[i][j]=c[i][j]+a[i][k]*b[k][j]; &#125; &#125; return c;&#125;int main()&#123; int n; scanf("%d",&amp;n); mat m1(n,row(n)),m2(n,row(n)); for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;n;j++)scanf("%lld",&amp;m1[i][j]); &#125; for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;n;j++)scanf("%lld",&amp;m2[i][j]); &#125; mat m=mul(m1,m2); for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;n;j++)&#123; if(j!=n-1)printf("%lld ",m[i][j]); else printf("%lld\n",m[i][j]); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[1174 区间中最大的数（RMQ，dp，线段树）]]></title>
    <url>%2F99dc77d%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 给出一个有N个数的序列，编号0 – N-1。进行Q次查询，查询编号i至j的所有数中，最大的数是多少。 例如: 1 7 6 3 1。i = 1, j = 3，对应的数为7 6 3，最大的数为7。（该问题也被称为RMQ问题） Input第1行：1个数N，表示序列的长度。(2 &lt;= N &lt;= 10000)第2 - N + 1行：每行1个数，对应序列中的元素。(0 &lt;= S[i] &lt;= 10^9)第N + 2行：1个数Q，表示查询的数量。(2 &lt;= Q &lt;= 10000)第N + 3 - N + Q + 2行：每行2个数，对应查询的起始编号i和结束编号j。(0 &lt;= i &lt;= j &lt;= N - 1) Output共Q行，对应每一个查询区间的最大值。 Input示例1234567891051763130 11 33 4 Output示例123773 题解：求区间最值，直接线段树水一发125ms RMQ也跑了125ms RMQ: dp[i][j]表示[i,i+2^j)个数中的最大值初始化F[i,0]即为输入的第i个数把dp[i][j]分成两段： [i,i+2^(j-1))[i+2^(j-1),i+2^j) 状态转移方程：dp[i][j]=max(dp[i][j-1],dp[i+2^(j-1)][j-1]) 查询：要查询[i,j],需要找到覆盖这个区间的两段区间长度为(j-i+1)，取k=log2(j-i+1)则ans=max(dp[i][k],dp[j-2^k+1][k])，也就是[i,i+2^k),[j-2^k+1,j+1)这两段 代码：【线段树】 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;cmath&gt;using namespace std;#define lson l,m,rt&lt;&lt;1#define rson m+1,r,rt&lt;&lt;1|1const int N=200005;int MAX[N&lt;&lt;2];void pushup(int rt)&#123; MAX[rt]=max(MAX[rt&lt;&lt;1],MAX[rt&lt;&lt;1|1]);&#125;void build(int l,int r,int rt)&#123; if(l==r)&#123; scanf("%d",&amp;MAX[rt]); return; &#125; int m=(l+r)&gt;&gt;1; build(lson); build(rson); pushup(rt);&#125;void update(int p,int sc,int l,int r,int rt)&#123; if(l==r)&#123; MAX[rt]=sc; return; &#125; int m=(l+r)&gt;&gt;1; if(m&gt;=p)update(p,sc,lson); else update(p,sc,rson); pushup(rt);&#125;int query(int L,int R,int l,int r,int rt)&#123; if(L&lt;=l&amp;&amp;R&gt;=r)&#123; return MAX[rt]; &#125; int m=(l+r)&gt;&gt;1; int ans=0; if(m&gt;=L)ans=max(ans,query(L,R,lson)); if(R&gt;m)ans=max(ans,query(L,R,rson)); return ans;&#125;int main()&#123; int n,m; scanf("%d",&amp;n); build(1,n,1); scanf("%d",&amp;m); while(m--)&#123; int a,b; scanf("%d%d",&amp;a,&amp;b); a++;b++; printf("%d\n",query(a,b,1,n,1)); &#125; return 0;&#125; 【RMQ】 12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;cmath&gt;using namespace std;const int N=10005;int dp[N][15],n,m;void rmq()&#123; for(int j=1;(1&lt;&lt;j)&lt;=n;j++)&#123; for(int i=1;i&lt;=n;i++)&#123; if(i+(1&lt;&lt;j)-1&lt;=n) dp[i][j]=max(dp[i][j-1],dp[i+(1&lt;&lt;(j-1))][j-1]); &#125; &#125;&#125;int main()&#123; scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++)scanf("%d",&amp;dp[i][0]); rmq(); scanf("%d",&amp;m); while(m--)&#123; int l,r; scanf("%d%d",&amp;l,&amp;r); l++;r++; int k=log(r-l+1)/log(2); printf("%d\n",max(dp[l][k],dp[r-(1&lt;&lt;k)+1][k])); &#125; return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>线段树</tag>
        <tag>rmq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1079 中国剩余定理]]></title>
    <url>%2F1109bacf%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 一个正整数K，给出K Mod 一些质数的结果，求符合条件的最小的K。例如，K % 2 = 1, K % 3 = 2, K % 5 = 3。符合条件的最小的K = 23。 Input第1行：1个数N表示后面输入的质数及模的数量。（2 &lt;= N &lt;= 10)第2 - N + 1行，每行2个数P和M，中间用空格分隔，P是质数，M是K % P的结果。（2 &lt;= P &lt;= 100, 0 &lt;= K &lt; P) Output输出符合条件的最小的K。数据中所有K均小于10^9。 Input示例123432 13 25 3 Output示例123 题意：给n对数，pi，mi表示k%pi=mi,问是否存在一个最小的k满足所有pi和mi 题解：中国剩余定理 相当水的裸题 直接模版上就好了 先拿样例举例一下(・ω・)ノ 1234567891011121314151617181920212223242526k%2=1 k%3=2 k%5=3 先构造一下下面这个东西，逆元搞一下3*5*inv(3*5,2)%2=1 1*3*5*inv(3*5,2)%2=12*5*inv(2*5,3)%3=1 ==&gt; 2*2*5*inv(2*5,3)%3=2 2*3*inv(2*3,5)%5=1 3*2*3*inv(2*3,5)%5=3 然后和上面式子一比 余数就这么出来啦令k1=1*3*5*inv(3*5,2),k2=2*2*5*inv(2*5,3),k3=3*2*3*inv(2*3,5)也就是k1%2=1,且k1是3和5的倍数k2%3=2,且k2是2和5的倍数k3%5=3,且k3是2和3的倍数令k=k1+k2+k3k%2=k1%2+k2%2+k3%2=1+0+0k%3=k1%3+k2%3+k3%3=0+2+0k%5=k1%5+k2%5+k3%5=0+0+3所以k就是要求的那个答案啦 代码：123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;cmath&gt;using namespace std;#define LL long longconst int p=1000000007;void ex_gcd(LL a,LL b,LL &amp;x,LL &amp;y,LL &amp;d)&#123; if(!b)&#123; d=a;x=1;y=0; &#125; else&#123; ex_gcd(b,a%b,y,x,d); y-=x*(a/b); &#125;&#125;LL inv(LL t,LL p)&#123; LL d,x,y; ex_gcd(t,p,x,y,d); return d==1?(x%p+p)%p:-1;&#125;LL china(int n,LL *a,LL *m)&#123; LL M=1,ret=0; for(int i=0;i&lt;n;i++)M*=m[i]; for(int i=0;i&lt;n;i++)&#123; LL w=M/m[i]; ret=(ret+w*inv(w,m[i])*a[i])%M; &#125; return (ret+M)%M;&#125;int main()&#123; int n; LL a[11],m[11]; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf("%lld%lld",&amp;m[i],&amp;a[i]); &#125; printf("%lld\n",china(n,a,m)); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>中国剩余定理</tag>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1181 质数中的质数（质数筛法,埃筛素数）]]></title>
    <url>%2F216acbe1%2F</url>
    <content type="text"><![CDATA[题目来源： Sgu基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 如果一个质数，在质数列表中的编号也是质数，那么就称之为质数中的质数。例如：3 5分别是排第2和第3的质数，所以他们是质数中的质数。现在给出一个数N，求&gt;=N的最小的质数中的质数是多少（可以考虑用质数筛法来做）。 Input输入一个数N(N &lt;= 10^6) Output输出&gt;=N的最小的质数中的质数。 Input示例120 Output示例131 题解：埃筛素数 加个计数和break判断就行 j会爆int，要开long long 代码：12345678910111213141516171819202122232425262728#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;cmath&gt;using namespace std;#define LL long longconst int N=1000233;bool prime[N];int main()&#123; int n,cnt=0; scanf("%d",&amp;n); memset(prime,true,sizeof(prime)); prime[1]=false; prime[2]=true; for(LL i=2;i&lt;N;i++)&#123; if(prime[i])&#123; cnt++; if(prime[cnt]&amp;&amp;i&gt;=n)&#123; printf("%lld\n",i); break; &#125; for(LL j=i*i;j&lt;N;j+=i)prime[j]=false; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>埃筛素数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1183 编辑距离（dp，字符串）]]></title>
    <url>%2F29b25bed%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 编辑距离，又称Levenshtein距离（也叫做Edit Distance），是指两个字串之间，由一个转成另一个所需的最少编辑操作次数。许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。 例如将kitten一字转成sitting：sitten （k-&gt;s）sittin （e-&gt;i）sitting （-&gt;g）所以kitten和sitting的编辑距离是3。俄罗斯科学家Vladimir Levenshtein在1965年提出这个概念。 给出两个字符串a,b，求a和b的编辑距离。 Input第1行：字符串a(a的长度 &lt;= 1000)。第2行：字符串b(b的长度 &lt;= 1000)。 Output输出a和b的编辑距离 Input示例12kittensitting Output示例13 题解：dp[i][j]表示字符串a的[0,i)和字符串b的[0,j)的最小编辑距离 写出状态转移方程dp[i][j]=min(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+(a[i-1]==b[j-1]?0:1)) dp[i-1][j]+1表示前[0,i-1)[0,j)已经相同，要改第i位 dp[i][j-1]+1表示前[0,i)[0,j-1)已经相同，要改第j位 dp[i-1][j-1]+(a[i-1]==b[j-1]?0:1）表示前[0,i-1)[0,j-1)已经相同，如果ai和bj相同就改其中一个 代码：123456789101112131415161718192021222324#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;cmath&gt;using namespace std;const int N=1005;char a[N],b[N],ans[N];int dp[N][N];int main()&#123; scanf("%s%s",a,b); int lena=strlen(a),lenb=strlen(b); for(int i=0;i&lt;=lena;i++)dp[i][0]=i; for(int i=0;i&lt;=lenb;i++)dp[0][i]=i; for(int i=1;i&lt;=lena;i++)&#123; for(int j=1;j&lt;=lenb;j++)&#123; dp[i][j]=min(dp[i-1][j]+1,dp[i][j-1]+1); dp[i][j]=min(dp[i][j],dp[i-1][j-1]+(a[i-1]==b[j-1]?0:1)); &#125; &#125; printf("%d\n",dp[lena][lenb]); return 0;&#125;]]></content>
      <categories>
        <category>dp</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1185 威佐夫游戏 V2（高精度，乘法模拟）]]></title>
    <url>%2F7dfc273b%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 有2堆石子。A B两个人轮流拿，A先拿。每次可以从一堆中取任意个或从2堆中取相同数量的石子，但不可不取。拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出2堆石子的数量，问最后谁能赢得比赛。 例如：2堆石子分别为3颗和5颗。那么不论A怎样拿，B都有对应的方法拿到最后1颗。 Input第1行：一个数T，表示后面用作输入测试的数的数量。（1 &lt;= T &lt;= 10000)第2 - T + 1行：每行2个数分别是2堆石子的数量，中间用空格分隔。(1 &lt;= N &lt;= 10^18) Output共T行，如果A获胜输出A，如果B获胜输出B。 Input示例123433 53 41 9 Output示例123BAA 题解：很水的威佐夫博弈 想都没想直接LL一发然后wa了 因为n太大了，和黄金分割数相乘精度不够，所以要手动乘法模拟 把LL分成前9位q，后9位h (sqrt(5)+1)/2的小数部分分成x[3]={618033988,749894848,204586834} 如下模拟：(具体见代码) 123456 x0 x1 x2 * q h---------------------- x0*h x1*h x2*h x0*q x1*q x2*q---------------------- 附加：这题还牵扯到另一个问题，这个27位小数从何而来，下面这个直接用根号求出的显然是不行的x[3]={618033988,74989490,2525738871}，那么如何在没有百度情况下获得高精度的黄金分割数呢？ 补充在了这一篇中 计算黄金分割数小数点后1000位 代码：123456789101112131415161718192021222324252627282930#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;cmath&gt;using namespace std;#define LL long longLL x[3]=&#123;618033988,749894848,204586834&#125;;//1.618033988,749894848,204586834const LL p=1e9;int main()&#123; LL a,b,t; scanf("%lld",&amp;t); while(t--)&#123; scanf("%lld%lld",&amp;a,&amp;b); if(a&gt;b)&#123; LL tmp=a;a=b;b=tmp; &#125; LL num=b-a; LL q=num/p,h=num%p; LL ans=x[2]*h; ans=ans/p+x[1]*h+x[2]*q; ans=ans/p+x[0]*h+x[1]*q; ans=ans/p+x[0]*q+num; if(ans==a)printf("B\n"); else printf("A\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>威佐夫博弈</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算黄金分割数小数点后1000位（java大数，斐波那契，二分求根号5高精度）]]></title>
    <url>%2F2e9cbb0%2F</url>
    <content type="text"><![CDATA[首先本文最初是为了精确计算黄金分割数小数点后27位写的，当时还不会java大数，所以写了个c++没有高精度的版本，java算了1000位，为了数据准确所以用了斐波那契和二分根号5两种写法对拍，1000位比对一致，和网上的结果也一致，可以放心食用 先放结果。。方便我打表 0.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374847540880753868917521266338622235369317931800607667263544333890865959395829056383226613199282902678806752087668925017116962070322210432162695486262963136144381497587012203408058879544547492461856953648644492410443207713449470495658467885098743394422125448770664780915884607499887124007652170575179788341662562494075890697040002812104276217711177780531531714101170466659914669798731761356006708748071013179523689427521948435305678300228785699782977834784587822891109762500302696156170025046433824377648610283831268330372429267526311653392473167111211588186385133162038400522216579128667529465490681131715993432359734949850904094762132229810172610705961164562990981629055520852479035240602017279974717534277759277862561943208275051312181562855122248093947123414517022373580577278616008688382952304592647878017889921990270776903895321968198615143780314997411069260886742962267575605231727775203536139362 c++c++思路（斐波那契）：黄金分割数可以递归求得 123456n=1 1/(1+1)=1/2n=2 1/(1+1/2)=2/3n=3 1/(1+2/3)=3/5n=4 1/(1+3/5)=5/8……n=i f(i+1)/f(i+2) n 0 1 2 3 4 5 6 7 8 …… ans 0 1 1 2 3 5 8 13 21 …… 可以发现其实就是斐波那契数列的两个数相除，越往后越接近黄金分割数，据说从250项开始前100位就不变了，这样问题就解决了，只要手动模拟除法就可以让小数自己精确到天涯海角了 但是这样斐波那契第250项就很大了，c++的话肯定要开数组高精度来存的，所以c++代码里只计算到80位，这对于算黄金分割数小数点后27位是够用了的 c++代码：12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;#include&lt;cmath&gt;using namespace std;#define LL long longLL f[105];int main()&#123; f[0]=0;f[1]=1; for(int i=2;i&lt;81;i++)&#123; f[i]=f[i-1]+f[i-2]; &#125; LL x=f[79],y=f[80]; int a[101]; for(int i=0;i&lt;28;i++)&#123; a[i]=x/y; x=(x%y)*10; cout&lt;&lt;a[i]; if(i%9==0)cout&lt;&lt;" "; &#125; cout&lt;&lt;endl; return 0;&#125; 运算结果：10 618033988 749894848 204586834 javajava思路（斐波那契，二分计算根号5） 斐波那契同c++，但是java大数里算到了斐波那契第1e5项，对于计算黄金分割数1000位已经足够 二分计算根号5设l,r初始值，然后二分找最接近√5的数 java代码： 斐波那契 123456789101112131415161718192021222324252627import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigInteger f[]=new BigInteger[100005]; f[1]=BigInteger.valueOf(1); f[2]=BigInteger.valueOf(1); for(int i=3;i&lt;=100000;i++) &#123; f[i]=f[i-1].add(f[i-2]); &#125; BigInteger x=f[99999],y=f[100000]; String a[]=new String[1001]; for(int i=0;i&lt;=1000;i++) &#123; a[i]=x.divide(y).toString(); x=x.remainder(y).multiply(BigInteger.valueOf(10)); &#125; for(int i=0;i&lt;=1000;i++) &#123; System.out.print(a[i]); if(i%10==0)System.out.print(" "); if(i%100==0)System.out.println(); &#125; cin.close(); &#125;&#125; 二分计算根号5 12345678910111213141516171819import java.io.*; import java.math.*;import java.util.*; public class Main &#123; public static void main(String[] args) &#123; Scanner cin=new Scanner(System.in); BigDecimal hj; BigDecimal l=BigDecimal.valueOf(2),r=BigDecimal.valueOf(3); for(int i=0;i&lt;10000;i++) &#123; BigDecimal m=l.add(r).divide(BigDecimal.valueOf(2)); if(m.multiply(m).compareTo(BigDecimal.valueOf(5))&lt;0)l=m; else r=m; &#125; hj=l.add(BigDecimal.valueOf(1)).divide(BigDecimal.valueOf(2)); System.out.println(hj.toString()); cin.close(); &#125;&#125; 运算结果：12345678910110 6180339887 4989484820 4586834365 6381177203 0917980576 2862135448 6227052604 6281890244 9707207204 1893911374 8475408807 5386891752 1266338622 2353693179 3180060766 7263544333 8908659593 9582905638 3226613199 2829026788 0675208766 8925017116 9620703222 1043216269 5486262963 1361443814 9758701220 3408058879 5445474924 6185695364 8644492410 4432077134 4947049565 8467885098 7433944221 2544877066 4780915884 6074998871 2400765217 0575179788 3416625624 9407589069 7040002812 1042762177 1117778053 1531714101 1704666599 1466979873 1761356006 7087480710 1317952368 9427521948 4353056783 0022878569 9782977834 7845878228 9110976250 0302696156 1700250464 3382437764 8610283831 2683303724 2926752631 1653392473 1671112115 8818638513 3162038400 5222165791 2866752946 5490681131 7159934323 5973494985 0904094762 1322298101 7261070596 1164562990 9816290555 2085247903 5240602017 2799747175 3427775927 7862561943 2082750513 1218156285 5122248093 9471234145 1702237358 0577278616 0086883829 5230459264 7878017889 9219902707 7690389532 1968198615 1437803149 9741106926 0886742962 2675756052 3172777520 3536139362]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>java高精度</tag>
        <tag>斐波那契</tag>
        <tag>黄金分割数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTU 2017 G.Ice cream samples（乱搞一通）]]></title>
    <url>%2Ffa5f812b%2F</url>
    <content type="text"><![CDATA[To encourage visitors active movement among the attractions, a circular path with ice creamstands was built in the park some time ago. A discount system common for all stands wasalso introduced. When a customer buys ice cream at some stand, he is automatically granted adiscount for one day at the next stand on the path. When visitors start at any stand and followsystematically the discount directions to the next stands, they eventually traverse the wholecircular path and return back to the stand they started at. Ice creams of various brands are sold at the stands. Additionally, each stand sells a nice samplebox which contains small samples of popular ice cream brands. The number of samples in thebox depends on the stand and various stands may put different brands into their sample boxes. Each box contains samples of one or more brands. A brand may be represented by one or moresamples in the box, or it may be completely missing. Each stand sells only one type of samplebox (the brands of the samples in the box are always the same for that particular stand). Quido and Hugo are going to exploit the discount system for their own benefit. They decidedto start at some stand and then continue in the direction of the discounts buying one ice creamsample box at each stand they visit in a consecutive sequence. Their goal is to collect at leastone sample of each ice cream brand sold in the park. Simultaneously, to respect their stomachcapacities, they want to minimize the total number of ice cream samples they buy. Input SpecificationThere are more test cases. Each case starts with a line containing two integers N, K separatedby space (1 ≤ N, K ≤ 106). N is the number of ice cream stands, K is the total number ofdifferent ice cream brands sold at all stands. The brands are labeled by numbers 1, 2, . . . , K.Next, there are N lines describing stands in their visiting order. Each such line contains thelist of brands of all ice cream samples sold in the sample box at that particular stand. Each liststarts with one positive integer L, describing its length, followed by L integers. Each list itemrepresents the brand of one ice cream sample in the sample box sold at this stand. You mayassume that even if a visitor buys one sample box at each stand, he/she will collect at most 107ice cream samples. Output SpecificationFor each test case, print a single line with one integer denoting the minimum number of icecream samples Quido and Hugo have to buy in order to obtain a sample of each ice cream brandsold in the park. If it is impossible to obtain samples of all brands output −1. Sample Input1234567891011121314154 34 1 3 1 31 22 3 31 15 31 21 32 1 12 2 21 13 22 1 11 13 1 1 1 Output for Sample Input12343-1 题意：给N个序列，N个序列不一定长度相同，序列由1~K的整数构成，现在选定连续的几个序列（首尾也算连续，想象它们是一个圈），使得1、2、3……K全在这些数列中，求选出数列所有数字个数和的最小值 题解：序列只能整个整个的取，而且要连续，所以肯定要加倍，循环2xn，设两个指针cur1=0，cur2=-1，然后开始实行扩圈和缩圈的操作 如果当前k个数都有了，就更新ans，然后缩圈（cur1++），看看是否有更少的解 如果k个数还没有全，就要继续扩圈（cur2++），然后把新的序列里的数遍历一遍 这里要注意的是，cur2达到上限或已经取了n个连续序列时，就没有扩圈的机会了，只能缩圈找最优 复杂度我也不知道。。这种题大概就是瞎搞吧。。 res记录当前冰淇淋个数，vis[i]存第i种冰淇淋目前的个数，num为当前冰淇淋种类数 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;vector&gt;using namespace std;const int INF=0x3f3f3f3f;const int N=1000005;vector&lt;int&gt;a[N];int ans,vis[N],cur1,cur2,n,k,res,num;int main()&#123; while(scanf("%d%d",&amp;n,&amp;k)!=EOF)&#123; for(int i=0;i&lt;n;i++)a[i].clear(); memset(vis,0,sizeof(vis)); int l,c; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;l); for(int j=0;j&lt;l;j++)&#123; scanf("%d",&amp;c); a[i].push_back(c); &#125; &#125; ans=INF; res=0;num=0; cur1=0;cur2=-1; while(cur1&lt;2*n)&#123; if(num==k)&#123; //如果有k个数了就缩圈找最优 ans=min(ans,res); for(int i=0;i&lt;a[cur1%n].size();i++)&#123; if(vis[a[cur1%n][i]]&gt;1)vis[a[cur1%n][i]]--; else&#123; num--; vis[a[cur1%n][i]]--; &#125; &#125; res-=a[cur1%n].size(); cur1++; &#125; else if(cur2-cur1+1==n||cur2==2*n-1)&#123; //因为是2n为了保证循环到所有情况 //所以如果当前取得已经有n个了或者cur2到了上限就只能缩圈 for(int i=0;i&lt;a[cur1%n].size();i++)&#123; if(vis[a[cur1%n][i]]&gt;1)vis[a[cur1%n][i]]--; else&#123; num--; vis[a[cur1%n][i]]--; &#125; &#125; res-=a[cur1%n].size(); cur1++; &#125; else&#123; //扩圈 cur2++; for(int i=0;i&lt;a[cur2%n].size();i++)&#123; if(vis[a[cur2%n][i]]==0)&#123; num++; vis[a[cur2%n][i]]++; &#125; else vis[a[cur2%n][i]]++;//漏了这个至关重要的更新可让我好找。。 &#125; res+=a[cur2%n].size(); &#125; &#125; printf("%d\n",ans==INF?-1:ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>模拟</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1212 无向图最小生成树]]></title>
    <url>%2Ff8eca34c%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 N个点M条边的无向连通图，每条边有一个权值，求该图的最小生成树。 Input第1行：2个数N,M中间用空格分隔，N为点的数量，M为边的数量。（2 &lt;= N &lt;= 1000, 1 &lt;= M &lt;= 50000)第2 - M + 1行：每行3个数S E W，分别表示M条边的2个顶点及权值。(1 &lt;= S, E &lt;= N，1 &lt;= W &lt;= 10000) Output输出最小生成树的所有边的权值之和。 Input示例1234567891011121314159 141 2 42 3 83 4 74 5 95 6 106 7 27 8 18 9 72 8 113 9 27 9 63 6 44 6 141 8 8 Output示例 137 题解：水一发最小生成树模版 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std; const int N=1005;struct Edge&#123; int u,v; int cap;&#125;Edge[N*N];int n,ans,cnt;int fa[N];int find(int x)&#123; if(x!=fa[x])fa[x]=find(fa[x]); return fa[x];&#125;void join(int x,int y)&#123; int a=find(x),b=find(y); if(a==b)return; else&#123; fa[a]=b; &#125;&#125; bool cmp(struct Edge a,struct Edge b)&#123; return a.cap&lt;b.cap;&#125;void kruskal()&#123; sort(Edge,Edge+cnt,cmp); for(int i=0;i&lt;cnt;i++)&#123; int fx=find(Edge[i].u),fy=find(Edge[i].v); if(fx==fy)continue; ans+=Edge[i].cap; join(fx,fy); &#125;&#125;int main()&#123; int s,e,w; scanf("%d%d",&amp;n,&amp;cnt); for(int i=1;i&lt;=n;i++)fa[i]=i; for(int i=0;i&lt;cnt;i++)&#123; scanf("%d%d%d",&amp;s,&amp;e,&amp;w); Edge[i].u=s; Edge[i].v=e; Edge[i].cap=w; &#125; ans=0; kruskal(); printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1242 斐波那契数列的第N项（矩阵快速幂）]]></title>
    <url>%2F52580325%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 斐波那契数列的定义如下： F(0) = 0F(1) = 1F(n) = F(n - 1) + F(n - 2) (n &gt;= 2) (1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, …) 给出n，求F(n)，由于结果很大，输出F(n) % 1000000009的结果即可。 Input输入1个数n(1 &lt;= n &lt;= 10^18)。 Output输出F(n) % 1000000009的结果。 Input示例11 Output示例89 题解：矩阵快速幂 F(n) = F(n - 1) + F(n - 2) 递推式如下。。macdown打不出数学公式。。就这样吧。。 12( F(n) ) = ( 1 1 )*( F(n-1) ) F(n-1) 1 0 F(n-2) 下面这种存矩阵的方法是在大牛博客看到的 先学为敬(=ﾟωﾟ)ﾉ 代码：1234567891011121314151617181920212223242526272829303132333435363738#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;vector&gt;using namespace std; #define LL long longtypedef vector&lt;LL&gt;row;typedef vector&lt;row&gt;mat;const LL p=1000000009;mat mul(mat a,mat b)&#123; mat c(a.size(),row(b[0].size()));//c的行数列数分别是a的行数，b的列数 for(int i=0;i&lt;a.size();i++)&#123; for(int j=0;j&lt;b[0].size();j++)&#123; for(int k=0;k&lt;b.size();k++) c[i][j]=(c[i][j]+a[i][k]*b[k][j])%p; &#125; &#125; return c;&#125;mat qpow(mat a,LL x)&#123; mat b(a.size(),row(a.size())); for(int i=0;i&lt;a.size();i++)b[i][i]=1; while(x&gt;0)&#123; if(x&amp;1)b=mul(b,a); a=mul(a,a); x&gt;&gt;=1; &#125; return b;&#125;int main()&#123; LL n; scanf("%lld",&amp;n); mat a(2,row(2)); a[0][0]=1;a[0][1]=1;a[1][0]=1;a[1][1]=0; a=qpow(a,n); printf("%lld\n",a[1][0]); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>矩阵快速幂</tag>
        <tag>斐波那契</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cf 487 C. A Mist of Florescence（构造）]]></title>
    <url>%2F8b8f3dfd%2F</url>
    <content type="text"><![CDATA[http://codeforces.com/contest/989/problem/C As the boat drifts down the river, a wood full of blossoms shows up on the riverfront.“I’ve been here once,” Mino exclaims with delight, “it’s breathtakingly amazing.” “What is it like?” “Look, Kanno, you’ve got your paintbrush, and I’ve got my words. Have a try, shall we?” There are four kinds of flowers in the wood, Amaranths, Begonias, Centaureas and Dianthuses. The wood can be represented by a rectangular grid ofn rows and m columns. In each cell of the grid, there is exactly one type of flowers. According to Mino, the numbers of connected components formed by each kind of flowers are a, b, c and d respectively. Two cells are considered in the same connected component if and only if a path exists between them that moves between cells sharing common edges and passes only through cells containing the same flowers. You are to help Kanno depict such a grid of flowers, withn and m arbitrarily chosen under the constraints given below. It can be shown that at least one solution exists under the constraints of this problem. Note that you can choose arbitraryn and m under the constraints below, they are not given in the input. InputThe first and only line of input contains four space-separated integers a, b, c and d (1≤a,b,c,d≤100) — the required number of connected components of Amaranths, Begonias, Centaureas and Dianthuses, respectively. OutputIn the first line, output two space-separated integers n and m (1≤n,m≤50) — the number of rows and the number of columns in the grid respectively. Then outputn lines each consisting of m consecutive English letters, representing one row of the grid. Each letter should be among ‘A’, ‘B’, ‘C’ and ‘D’, representing Amaranths, Begonias, Centaureas and Dianthuses, respectively. In case there are multiple solutions, print any. You can output each letter in either case (upper or lower). exampleinput 15 3 2 1 output 123454 7DDDDDDDDABACADDBABACDDDDDDDD input 150 50 1 1 output 123454 50CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCABABABABABABABABABABABABABABABABABABABABABABABABABBABABABABABABABABABABABABABABABABABABABABABABABABADDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD input 11 6 4 5 outputCopy 123456787 7DDDDDDDDDDBDBDDDCDCDDDBDADBDDDCDCDDDBDBDDDDDDDDDD NoteIn the first example, each cell of Amaranths, Begonias and Centaureas forms a connected component, while all the Dianthuses form one. 题意：四个类，abcd为每个类的连通块数 题解：50*50，分成4块，每块分别先填满abcd，然后每个都减一，然后在a里跳着放b单格，b里放a，c里放d，d里放c，注意一下边界判断就行 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; char s[55][55]; int a,b,c,d,h,l; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d; for(int i=1;i&lt;=25;i++)&#123; for(int j=1;j&lt;=25;j++)&#123; s[i][j]='A'; s[i][j+25]='B'; s[i+25][j]='C'; s[i+25][j+25]='D'; &#125; &#125; a--;b--;c--;d--; h=2;l=27; while(a--)&#123; if(l&gt;50)h+=2,l=27; s[h][l]='A'; l+=2; &#125; h=2;l=2; while(b--)&#123; if(l&gt;25)h+=2,l=2; s[h][l]='B'; l+=2; &#125; h=27;l=27; while(c--)&#123; if(l&gt;50)h+=2,l=27; s[h][l]='C'; l+=2; &#125; h=27;l=2; while(d--)&#123; if(l&gt;25)h+=2,l=2; s[h][l]='D'; l+=2; &#125; cout&lt;&lt;"50 50"&lt;&lt;endl; for(int i=1;i&lt;=50;i++)&#123; for(int j=1;j&lt;=50;j++)cout&lt;&lt;s[i][j]; cout&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[麻婆豆腐（思维）]]></title>
    <url>%2F37630519%2F</url>
    <content type="text"><![CDATA[https://www.nowcoder.com/acm/contest/128/B 题目描述在一次课间休息的时候,音无结弦看到立华奏一个人坐在座位上写作业,于是动了请她吃麻婆豆腐的念头。他迅速移动到她后面的座位,寻思着该怎么开口邀请,他摸了摸口袋,拍了拍脑袋,有了!“奏~听说食堂里有种传闻中因为辣过头所以谁都不会点的麻婆豆腐,但是却惊人地好吃啊,这样,我们来做个题吧!如果你做出来了我就天天请你吃麻婆豆腐╰(￣▽￣)╮”奏的笔停下了,她转过头来,还带了一张草稿纸,做好了做题的准备。音无懵了一下,心中暗暗窃喜,“麻婆豆腐果然是她的最爱啊!”“咳咳…请听题!我手上有n枚硬币,第i枚正面朝上的概率是Pi。我现在每个硬币各抛一次,正面朝上看做1,背面朝上看做0,把所有硬币得到的数异或起来决定最后得到的数。问:有多少个子集合使得0和1的概率相等?”不管音无给了怎样的数,奏都是一分钟不到就算出来了!不愧是前学生会长啊~于是他们就去食堂吃麻婆豆腐了,现在,你也来算一下吧。 输入描述:输入的第一行包含一个整数T，表示测试组数。每个测试用例前面都有一个空白行。每个测试用例由两行组成。第一行包含硬币数量n。第二行包含n个数表示：概率p1,…,pn。每个pi都给出6个小数位。 输出描述:对于每个测试用例输出一个数：使得0和1的概率相等的子集合数量。 示例1输入12345672 3 0.500000 0.500000 0.500000 4 0.000001 0.000002 0.000003 0.000004 输出1270 说明在第一个测试样例中，每个子集显然都能使得0和1的概率相等。在第二个测试样例中，所有子集都不能使得0和1的概率相等备注:n ≤ 60,T=500 题意：n枚硬币,第i枚正面朝上的概率是Pi。每个硬币各抛一次,正面朝上看做1,背面朝上看做0,把所有硬币得到的数异或起来决定最后得到的数。 求有多少个子集合使得0和1的概率相等? 题解：答案为2^n-2^(n-cnt)其中cnt是pi中0.5的个数 因为只有pi=0.5，异或后的概率才可能相等，别的数都不行，证明如下： 设当前集合有m个元素，第一个元素为1的概率x，剩下m-1个元素异或和为1的概率为p，那么这个集合最后异或和为1的概率为p*(1-x)+x*(1-p)=0.5,解得x=0.5 注意1要写1LL，不然会WA 代码：123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;using namespace std;#define LL long longint main()&#123; int t; double c; scanf("%d",&amp;t); while(t--)&#123; int n; scanf("%d",&amp;n); int cnt=0; for(int i=0;i&lt;n;i++)&#123; scanf("%lf",&amp;c); if(c==0.5)cnt++; &#125; LL ans=(1LL&lt;&lt;n)-(1LL&lt;&lt;(n-cnt)); printf("%lld\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>推公式</tag>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Alice和Bob的Nim游戏（博弈，数列，矩阵快速幂）]]></title>
    <url>%2Fe7a0c86b%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/28447 题目描述众所周知，Alice和Bob非常喜欢博弈，而且Alice永远是先手，Bob永远是后手。 Alice和Bob面前有3堆石子，Alice和Bob每次轮流拿某堆石子中的若干个石子（不可以是0个），拿到所有石子中最后一个石子的人获胜。这是一个只有3堆石子的Nim游戏。 Bob错误的认为，三堆石子的Nim游戏只需要少的两堆的石子数量加起来等于多的那一堆，后手就一定会胜利。所以，Bob把三堆石子的数量分别设为 {k，4k，5k}（k&gt;0）。 现在Alice想要知道，在k 小于 2^n 的时候，有多少种情况先手一定会获得胜利。 输入一个整数n(1≤n≤2×10^9)。 输出输出先手胜利的可能情形数。答案对10^9+7取模。 输出时每行末尾的多余空格，不影响答案正确性 样例输入13 样例输出12 题目来源ACM训练联盟周赛 题解：就是普通尼姆博弈，只要把k，4k，5k异或一下，为0先手就必胜，这题难在k可以是个巨无敌大的数，只好找规律了 先打个表 2，4，6，9，15，25，40，64，104，169… 本来发现的规律是后一个数是前两个数相加，然后前两个数相加减一，前两个数相加，前两个数相加加一，前两个数相加…以此类推，但是没搞出什么名堂来 然后当时看了这篇知道了这个数列和斐波那契有点关系https://zhidao.baidu.com/question/489289663.html 四个一组，推出了四个公式，其中用到的斐波那契数列用矩阵快速幂（网上找的模版。。）处理一下，公式具体见代码 最后那个四个乘以qpow(5,p-2,p)，本来公式是除以5的，但是因为除法对求余不分配就WA了，所以费马小定理一下，乘以5的逆元 最后官方题解里是这么写的：f(n) = f(n-1) + f(n-3) + f(n-4) + 2，也是矩阵快速幂处理一下 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=20000000;const LL p=1000000000+7;struct matrix &#123; LL m[2][2];&#125;ans;matrix base = &#123;1, 1, 1, 0&#125;; matrix multi(matrix a, matrix b) &#123; matrix tmp; for(int i = 0; i &lt; 2; i++) &#123; for(int j = 0; j &lt; 2; j++) &#123; tmp.m[i][j] = 0; for(int k = 0; k &lt; 2; k++) tmp.m[i][j] = (tmp.m[i][j] + a.m[i][k] * b.m[k][j]) % p; &#125; &#125; return tmp;&#125;LL matrix_pow(matrix a, int n) &#123; ans.m[0][0] = ans.m[1][1] = 1; ans.m[0][1] = ans.m[1][0] = 0; while(n) &#123; if(n &amp; 1) ans = multi(ans, a); a = multi(a, a); n &gt;&gt;= 1; &#125; return ans.m[0][1];&#125;LL fi(LL x) &#123; return matrix_pow(base, x);&#125; LL qpow(LL a,LL b,LL p)&#123; LL anss=1; while(b)&#123; if(b&amp;1)&#123; anss=(anss*a)%p; b--; &#125; b/=2; a=a*a%p; &#125; return anss;&#125;int main()&#123; LL n,res=0; LL z; while(cin&gt;&gt;n)&#123; if(n==1||n==2)&#123; cout&lt;&lt;0&lt;&lt;endl; return 0; &#125; else if(n==3)&#123; cout&lt;&lt;2&lt;&lt;endl; &#125; else if(n==4)&#123; cout&lt;&lt;7&lt;&lt;endl; &#125; else&#123; LL nn=n; n+=2; if(n%4==0)&#123; z=((4*fi(n)+3*fi(n-1)+2)*qpow(5,p-2,p))%p; &#125; else if(n%4==1)&#123; z=((3*fi(n+1)+fi(n)+1)*qpow(5,p-2,p))%p; &#125; else if(n%4==2)&#123; z=((4*fi(n)+3*fi(n-1)-2)*qpow(5,p-2,p))%p; &#125; else&#123; z=((3*fi(n+1)+fi(n)-1)*qpow(5,p-2,p))%p; &#125; res=(qpow(2,nn,p)-z%p+p)%p; cout&lt;&lt;res&lt;&lt;endl; &#125;&#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>推公式</tag>
        <tag>矩阵快速幂</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pawns（博弈，思维）]]></title>
    <url>%2F61e3cbc%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/28205 Carl and Nathan are completely bored with the game of chess; it’s too easy! They have come up with their own game, which is surely a greater test of one’s intelligence.This game is played on a board with n by m squares. At the start, white and black pawns are placed quasi-randomly over the board, with the following constraint: in every column there is one white pawn and one black pawn, with the white pawn on some square below the black one. Each player in turn makes a move with one of his pawns. A pawn is only allowed to move one square forward, provided that this square is empty. “Forward” means in the direction of the opponent, so white pawns move up and black pawns move down. In addition, a pawn on the first rank – that is, a white pawn on the bottom row, or a black pawn on the top row – may also move two squares forward, provided that both squares are empty. Unlike normal chess, the pawns are never taken from the board and never change column. For example, in the position above, White (the player using the white pieces) has eight moves: one with each of the pawns on b1, d2, f5 and h2, and two with both the pawn on c1 and the pawn on g1. The pawns on a6 and e1 cannot move. Eventually and inevitably, the pawns will meet up in every column, leaving neither player able to move. The game is then finished, and the winner is the player who made the last move. As usual, White gets the first move. With optimal play, who would win for a given startingposition? 输入格式On the first line one positive number: the number of test cases, at most 100. After that per test case: one line with two space-separated integers n and m (3≤n≤20 and 1≤m≤20):the number of rows and columns of the board, respectively.n lines with m characters, describing the position on the board at the start of the game:‘W’ is a white pawn.‘B’ is a black pawn.‘.’ is an empty square.Each column contains exactly one ‘W’ and one ‘B’, with the ‘W’ being below the ‘B’.In every test case, the starting position will be such that White has at least one move. 输出格式Per test case: one line with the string “White wins” if White can win with optimal play, or “Black wins” if Black has a winning strategy. 样例输入12345678910111213141516171819202122232425262728293031323334353658 8.....BB.B.......W......B...B.W....B......B.........WB..W.WW.W.W.6 4....B..B.....B.WW.B..WW.5 3...BBB...WW...W4 6.BBB.BB...B....W..WWW.WW7 7.B.B..B.........B.B..B....B...........WW.WWWW..W. 样例输出12345Black winsBlack winsWhite winsWhite winsBlack wins 题目来源BAPC 2014 Preliminary 题意：两个人轮流下棋，给定一个棋局，B在W上，白色的棋子W向上移动，黑色的棋子B向下移动，每次可移动一格。底行上的W棋子或顶行上的B棋子可以向前移动两个方格，前提是两个方格都是空的。W先手，无法移动的一方输。 题解：首先想到胜负和W，B之间可走步数的奇偶性有关，然后顶行和底行且可以走两步的棋子有改变奇偶性的能力。 先考虑一种特殊情况，某一列中B在顶行且W在底行，这对两个棋子来说是一样的，这种出现次数记为cd。 1.n&gt;5时，只要一方走两步改变了奇偶性，另一方可以学对方的走法，把奇偶性变回来，所以后续不用考虑这几列的步数。 2.n=3时不会出现这种情况，不考虑。 3.特殊情况n=4和n=5，因为他们一方走两步之后，另一方就没有走两步的能力了，是要考虑的，在后面讨论。 然后只有一方的棋子在顶行或者底行且该棋子可以走两步时：只要一方有改变奇偶性能力的棋子，另一方就会想要去优先破坏这种能力，比如： B。。W优先向上走三步，则B就没有破坏奇偶性的能力了，则cw+=3。。W cw为W破坏B的能力棋子所需要走的步数cb为B破坏W的能力棋子所需要走的步数 最后，对于那些没有棋子有机会走两步的列来说，双方都只能一步一步走，只要把可走步数累加即可。 综上所述，W的必胜情况： 1.n=4，且cd为奇数 这种情况下，cd为奇数，W作为先手无论如何都掌握最后一个改变奇偶的决定权，所以w只要在最后一个机会时判断当前局势决定是否改变奇偶性即可。 2.cw &lt; cb 即B破坏W能力要走的步数多，那么W就有改变奇偶能力，W必胜。 3.cb = cw - 1或cb = cw且步数为奇（这里的bushu指B在顶行且W在底行的情况不算的总步数） cb = cw - 1时，因为W先走，下完（cb+cw）步之后，此时两人都刚好没有破坏奇偶性的能力，（cb+cw）为奇数，下一步轮到B下，剩余步数为（部分步数-cb-cw）为偶数，所以W必胜。cb = cw时，同上，（cb+cw）为偶，下一步轮到W，剩余步数为奇，W必胜。 最后考虑n=5的时候的特殊情况比赛的时候这个情况我一直没想想清楚。。随便举个例子： B 。。。B。B 。。。。。B 。。。。。B 。WWWWW 对于第一，五列那种双方都有能力的棋子来说，不管先手走一步还是两步，后手都可以走（3-i）步使这一列一人走一次然后作废，所以n=5时这种列也不考虑。对于第二列，B要优先破坏W的能力。对于第三，四列，只要数可走步数即可。 因为剩下的策略都满足上面的n&gt;5时，所以n=5虽然有特殊，但是并不用考虑特殊策略。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;using namespace std;const int N=40;char p[N][N];int main()&#123; int t,num=0; scanf("%d", &amp;t); while(t--)&#123; int n,m; int cw=0,cb=0,cd=0,bushu=0; scanf("%d%d",&amp;n,&amp;m); memset(p,0,sizeof(p)); for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=m;j++)&#123; cin&gt;&gt;p[i][j]; &#125; &#125; for(int i=1;i&lt;=m;i++)&#123; int b,w; for(int j=1;j&lt;=n;j++)&#123; if(p[j][i]=='B')b=j; else if(p[j][i]=='W')w=j; &#125; if(b==1&amp;&amp;w==n&amp;&amp;n&gt;3)cd++; else&#123; if(b==1&amp;&amp;w&gt;3)cw+=w-3; else if(w==n&amp;&amp;b&lt;n-2)cb+=n-2-b; bushu+=(w-b-1); &#125; &#125; if((n==4&amp;&amp;cd%2==1)||(cw&lt;cb)||(((cb==cw-1)||(cb==cw))&amp;&amp;bushu%2==1))printf("White wins\n"); else printf("Black wins\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>思维</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1847 Good Luck in CET-4 Everybody!（巴什博弈）]]></title>
    <url>%2F3d8d44b2%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1847 Problem Description大学英语四级考试就要来临了，你是不是在紧张的复习？也许紧张得连短学期的ACM都没工夫练习了，反正我知道的Kiki和Cici都是如此。当然，作为在考场浸润了十几载的当代大学生，Kiki和Cici更懂得考前的放松，所谓“张弛有道”就是这个意思。这不，Kiki和Cici在每天晚上休息之前都要玩一会儿扑克牌以放松神经。 “升级”？“双扣”？“红五”？还是“斗地主”？ 当然都不是！那多俗啊~ 作为计算机学院的学生，Kiki和Cici打牌的时候可没忘记专业，她们打牌的规则是这样的： 1、 总共n张牌;2、 双方轮流抓牌；3、 每人每次抓牌的个数只能是2的幂次（即：1，2，4，8，16…）4、 抓完牌，胜负结果也出来了：最后抓完牌的人为胜者； 假设Kiki和Cici都是足够聪明（其实不用假设，哪有不聪明的学生），并且每次都是Kiki先抓牌，请问谁能赢呢？ 当然，打牌无论谁赢都问题不大，重要的是马上到来的CET-4能有好的状态。 Good luck in CET-4 everybody! Input输入数据包含多个测试用例，每个测试用例占一行，包含一个整数n（1&lt;=n&lt;=1000）。 Output如果Kiki能赢的话，请输出“Kiki”，否则请输出“Cici”，每个实例的输出占一行。 Sample Input1213 Sample Output12KikiCici 题意：n张牌，每次可以取2^i张,最后取完的人胜 题解：因为可以取到1，2，所以剩下取几都不重要了，因为所有数要么是三的倍数，要么是三的倍数多一，要么是三的倍数多二，又因为除了1，2剩下的数都是大于3的偶数，所以不管对手怎么取都无力回天了，不可能再把三的倍数抛给你 _ (: з 」∠) _ 所以对手取完，只要你能一直留给他三的倍数，你就赢 综上所述，一开始是三的倍数的人必败 代码：1234567891011#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n; while(cin&gt;&gt;n)&#123; if(n%3==0)cout&lt;&lt;"Cici"&lt;&lt;endl; else cout&lt;&lt;"Kiki"&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>巴什博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1404 Digital Deletions（sg函数暴力打表）]]></title>
    <url>%2F2d3ae01%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1404 Problem DescriptionDigital deletions is a two-player game. The rule of the game is as following. Begin by writing down a string of digits (numbers) that’s as long or as short as you like. The digits can be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 and appear in any combinations that you like. You don’t have to use them all. Here is an example: On a turn a player may either:Change any one of the digits to a value less than the number that it is. (No negative numbers are allowed.) For example, you could change a 5 into a 4, 3, 2, 1, or 0.Erase a zero and all the digits to the right of it. The player who removes the last digit wins. The game that begins with the string of numbers above could proceed like this: Now, given a initial string, try to determine can the first player win if the two players play optimally both. InputThe input consists of several test cases. For each case, there is a string in one line. The length of string will be in the range of [1,6]. The string contains only digit characters. Proceed to the end of file. OutputOutput Yes in a line if the first player can win the game, otherwise output No. Sample Input1234000120 Sample Output1234YesYesNoNo 题意：给一个长度在[1,6]的数字字符串 有两种操作： 1.把任何一个数字更改为小于其数字的值 2.删除0及其右侧的数字 删除最后一位的赢，问先手有无必胜策略 题解：首先这个最多只有6位，有很多很多状态，所以是个sg函数的题，从最小的已知态往上推，根据sg函数的性质，能一步到达必败状态的都是必胜点，由此求得所有六位数状态的值 分析一下可以sg[1]是必败点，sg[1]=0,那么就从1开始向上拓展必胜态，具体操作见代码 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;bits/stdc++.h&gt;using namespace std;const int N=1000000;int sg[N];int wei(int n)&#123; if(n/100000)return 6; if(n/10000)return 5; if(n/1000)return 4; if(n/100)return 3; if(n/10)return 2; return 1;&#125;void extend(int n)&#123;//sg[n]=0先手必败，可以一步变为n的都是先手必胜 int len=wei(n); for(int i=len;i&gt;0;i--)&#123;//每一位上加一个数 int m=n; int base=1; for(int j=1;j&lt;i;j++)base*=10; int tmp=(m%(base*10))/base; for(int j=tmp;j&lt;9;j++)&#123; m+=base; sg[m]=1; &#125; if(len&lt;6)&#123;//长度小于6，可以在后面补0 int m=n; int base=1; for(int i=len;i&lt;6;i++)&#123; m*=10; for(int b=0;b&lt;base;b++)sg[m+b]=1; base*=10; &#125; &#125; &#125; &#125;void work()&#123; memset(sg,0,sizeof(sg)); sg[0]=1; for(int i=1;i&lt;N;i++)&#123; if(!sg[i])extend(i); &#125;&#125;int main()&#123; char str[8]; int n; work(); while(scanf("%s",str)!=EOF)&#123; if(str[0]=='0')&#123; printf("Yes\n"); continue; &#125; int len=strlen(str); n=0; for(int i=0;i&lt;len;i++)&#123; n*=10; n+=str[i]-'0'; &#125; if(sg[n])printf("Yes\n"); else printf("No\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>博弈论</tag>
        <tag>sg函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1527 取石子游戏（威佐夫博弈）]]></title>
    <url>%2F40d6aa63%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1527 Problem Description有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。 Input输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。 Output输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。 Sample Input1232 18 44 7 Sample Output123010 题解：威佐夫博弈裸题，在hdu 2177那篇有介绍威佐夫博弈 代码：1234567891011121314#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int a,b; while(scanf("%d%d",&amp;a,&amp;b)!=EOF)&#123; if(a&gt;b)&#123; int temp=a;a=b;b=temp; &#125; if((int)((sqrt(5)+1)*(b-a)/2)==a)printf("0\n"); else printf("1\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>威佐夫博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1564 Play a game]]></title>
    <url>%2F94b377b3%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1564 Problem DescriptionNew Year is Coming!ailyanlu is very happy today! and he is playing a chessboard game with 8600.The size of the chessboard is n*n. A stone is placed in a corner square. They play alternatively with 8600 having the first move. Each time, player is allowed to move the stone to an unvisited neighbor square horizontally or vertically. The one who can’t make a move will lose the game. If both play perfectly, who will win the game? InputThe input is a sequence of positive integers each in a separate line.The integers are between 1 and 10000, inclusive,(means 1 &lt;= n &lt;= 10000) indicating the size of the chessboard. The end of the input is indicated by a zero. OutputOutput the winner (“8600” or “ailyanlu”) for each input line except the last zero.No other characters should be inserted in the output. Sample Input1220 Sample Output18600 题意：给一个n*n的网格，一个石头从角落出发，每次水平或垂直移动到相邻的没有访问过的格子上，谁不能走谁输 题解：蛮水的题。。 n=1先手必败，n=2先手必胜，n=3先手必败，n=4先手必胜… 这些自己模拟一下大概就能发现规律了：n为奇数时后手胜，n为偶数先手胜 当然这也是可以解释的，就是把棋盘分成一个个1*2的部分，无论先手后手只要跟着对方走把对方那个补上完成一个个1*2，最后就赢了，所以就是看剩下的n*n-1个格子能否恰好凑成一些1*2的小块，n*n-1为偶数就可以，那么后手必胜，如果n*n-1为奇数，多了一个，那么先手必胜 判断 n*n-1 的奇偶性，其实也是 n的奇偶性 代码：1234567891011#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n; while(scanf("%d",&amp;n)&amp;&amp;n)&#123; if(n&amp;1)printf("ailyanlu\n"); else printf("8600\n"); &#125; return 0; &#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1729 Stone Game（尼姆博弈，sg函数）]]></title>
    <url>%2F9ac96b1d%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1729 Problem DescriptionThis game is a two-player game and is played as follows: There are n boxes; each box has its size. The box can hold up to s stones if the size is s. At the beginning of the game, there are some stones in these boxes. The players take turns choosing a box and put a number of stones into the box. The number mustn’t be great than the square of the number of stones before the player adds the stones. For example, the player can add 1 to 9 stones if there are 3 stones in the box. Of course, the total number of stones mustn’t be great than the size of the box.4.Who can’t add stones any more will loss the game. Give an Initial state of the game. You are supposed to find whether the first player will win the game if both of the players make the best strategy. InputThe input file contains several test cases.Each test case begins with an integer N, 0 &lt; N ≤ 50, the number of the boxes.In the next N line there are two integer si, ci (0 ≤ ci ≤ si ≤ 1,000,000) on each line, as the size of the box is si and there are ci stones in the box.N = 0 indicates the end of input and should not be processed. OutputFor each test case, output the number of the case on the first line, then output “Yes” (without quotes) on the next line if the first player can win the game, otherwise output “No”. Sample Input1234567832 03 36 226 36 30 Sample Output1234Case 1:YesCase 2:No 题意：n个盒子，每个盒子容量si，里面有ci个石头，每次操作向盒子里面放石头，放的数量不能大于盒子中已有石头数量的平方，不能再放石头的人输 题解：按题意是个组合游戏和，博弈好题 平等组合游戏 两人游戏 有一个状态集，而且通常是有限的 规定哪些状态转移是允许的 所有规定对于两人来说是一样的 两人轮流走步 有一个终止状态，到达终止状态后游戏即告终止 游戏可以在有限步内终止 严格的来定义P状态和N状态 所有的终止状态都是P状态； 对于任何的N状态，肯定存在一种方式可以一步转到一个P状态； 对于任何的P状态，不管怎么走步，都只能转到N状态。 Sprague-Grundy函数解题模型： 把原游戏分解成多个独立的子游戏，则原游戏的SG函数值是它的所有子游戏的SG函数值的异或即sg(G)=sg(G1)^sg(G2)^...^sg(Gn) 分别考虑每一个子游戏，计算其SG值 求每个盒子的sg函数值，get_sg(s,c)，假设每次的取的范围是1～q，那么有q*q+q&lt;s ，同时又要使q尽量大，则有(q+1)*(q+1)+(q+1)&gt;=s 所以先根据上限s找到这个q，然后和当前容量c比较判断是否合法，如果当前盒子里的c&gt;q，那么就可以一次性放满，这个盒子就没用了，反之如果不能一次性放满，就需要假设盒子容量是q，继续递归求上一步操作，get_sg(q,c); 要是倒着想感觉绕的话，那就把需要求两次的正过来想╮(￣▽￣””)╭，当前宝石个数是c，但是 c+c*c&lt;s，放不满怎么办，那就先放x个，x是多少现在我还不知道（因为越往后面平方越大，所以实际上我倒着想才会得到最优的结果），那么现在的宝石个数变成了（c+x）个，我可以放1～(c+x)*(c+x)个，如果按最大值放的话，此时就是(c+x)*(c+x)+(c+x)个，如果这个值恰好大于等于s，那么问题就最优的解决了 然后求这几个sg值的Nim和即可 代码：1234567891011121314151617181920212223242526#include&lt;bits/stdc++.h&gt;using namespace std;int get_sg(int s,int c)&#123; int q=sqrt((double)s); while(q+q*q&gt;=s)&#123; q--; &#125; if(c&gt;q)return s-c; else return get_sg(q,c);&#125;int main()&#123; int n,cas=0; while(scanf("%d",&amp;n)&amp;&amp;n)&#123; int s,c; printf("Case %d:\n",++cas); int ans=0; while(n--)&#123; scanf("%d%d",&amp;s,&amp;c); ans^=get_sg(s,c); &#125; if(ans)puts("Yes"); else puts("No"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>尼姆博弈</tag>
        <tag>sg函数</tag>
        <tag>组合游戏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1846 Brave Game（巴什博弈）]]></title>
    <url>%2Fa4b21e43%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1846 Problem Description十年前读大学的时候，中国每年都要从国外引进一些电影大片，其中有一部电影就叫《勇敢者的游戏》（英文名称：Zathura），一直到现在，我依然对于电影中的部分电脑特技印象深刻。今天，大家选择上机考试，就是一种勇敢（brave）的选择；这个短学期，我们讲的是博弈（game）专题；所以，大家现在玩的也是“勇敢者的游戏”，这也是我命名这个题目的原因。当然，除了“勇敢”，我还希望看到“诚信”，无论考试成绩如何，希望看到的都是一个真实的结果，我也相信大家一定能做到的~ 各位勇敢者要玩的第一个游戏是什么呢？很简单，它是这样定义的：1、 本游戏是一个二人游戏;2、 有一堆石子一共有n个；3、 两人轮流进行;4、 每走一步可以取走1…m个石子；5、 最先取光石子的一方为胜； 如果游戏的双方使用的都是最优策略，请输出哪个人能赢。 Input输入数据首先包含一个正整数C(C&lt;=100)，表示有C组测试数据。每组测试数据占一行，包含两个整数n和m（1&lt;=n,m&lt;=1000），n和m的含义见题目描述。 Output如果先走的人能赢，请输出“first”，否则请输出“second”，每个实例的输出占一行。 Sample Input123223 24 3 Sample Output12firstsecond 题解：巴什博弈：只有一堆n个物品，两个人轮流从这堆物品中取物，规定每次至少取一个，最多取m个。最后取光者得胜。 若n=m+1，由于一次最多只能取m个，所以无论先手拿几个，后手都能够一次拿走剩下的，先手必败 所以必胜情况就是：n=（m+1）r+s，（r为任意自然数，s≤m),那么先手先拿走s个物品，然后如果后手拿走k（≤m)个，那么先手再拿走m+1-k个，凑成一组（m+1）就行，保证留给后手的永远是（m+1）的倍数，那么先手必胜 所以结论是n%(m+1)!=0,先手必胜，反之后手胜 感觉博弈里很多都是根据对方的动作凑成一组一组，蛮妙的 代码：1234567891011121314#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int t; cin&gt;&gt;t; while(t--)&#123; int m,n; cin&gt;&gt;n&gt;&gt;m; if(n%(m+1)==0)cout&lt;&lt;"second"&lt;&lt;endl; else cout&lt;&lt;"first"&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>巴什博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1849 Rabbit and Grass（尼姆博弈）]]></title>
    <url>%2F6f6ab2c9%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1849 Problem Description大学时光是浪漫的，女生是浪漫的，圣诞更是浪漫的，但是Rabbit和Grass这两个大学女生在今年的圣诞节却表现得一点都不浪漫：不去逛商场，不去逛公园，不去和AC男约会，两个人竟然猫在寝食下棋……说是下棋，其实只是一个简单的小游戏而已，游戏的规则是这样的： 1、棋盘包含1xn个方格，方格从左到右分别编号为0，1，2，…，n-1； 2、m个棋子放在棋盘的方格上，方格可以为空，也可以放多于一个的棋子； 3、双方轮流走棋； 4、每一步可以选择任意一个棋子向左移动到任意的位置（可以多个棋子位于同一个方格），当然，任何棋子不能超出棋盘边界； 5、如果所有的棋子都位于最左边（即编号为0的位置），则游戏结束，并且规定最后走棋的一方为胜者。 对于本题，你不需要考虑n的大小（我们可以假设在初始状态，棋子总是位于棋盘的适当位置）。下面的示意图即为一个1x15的棋盘，共有6个棋子，其中，编号8的位置有两个棋子。 大家知道，虽然偶尔不够浪漫，但是Rabbit和Grass都是冰雪聪明的女生，如果每次都是Rabbit先走棋，请输出最后的结果。 Input输入数据包含多组测试用例，每个测试用例占二行，首先一行包含一个整数m（0&lt;=m&lt;=1000），表示本测试用例的棋子数目，紧跟着的一行包含m个整数Ki(i=1…m; 0&lt;=Ki&lt;=1000)，分别表示m个棋子初始的位置，m=0则结束输入。 Output如果Rabbit能赢的话，请输出“Rabbit Win!”，否则请输出“Grass Win!”，每个实例的输出占一行。 Sample Input123452 3 533 5 60 Sample Output12Rabbit Win!Grass Win! 题解：尼姆博弈水题 因为棋子最后都移动到最左，可以重合，所以一个棋子的可移动次数就是它的位置号也相当于尼姆博弈n堆石子中某一堆的石子数 代码：12345678910111213141516171819#include&lt;bits/stdc++.h&gt;using namespace std;const int N=200005;int main()&#123; int n; while(scanf("%d",&amp;n)&amp;&amp;n)&#123; int sum=0,c[N]; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;c[i]); sum^=c[i]; &#125; if(sum==0)printf("Grass Win!\n"); else&#123; printf("Rabbit Win!\n"); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>尼姆博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 2176 取(m堆)石子游戏（尼姆博弈）]]></title>
    <url>%2F42b4455d%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=2176 Problem Descriptionm堆石子,两人轮流取.只能在1堆中取.取完者胜.先取者负输出No.先取者胜输出Yes,然后输出怎样取子.例如5堆 5,7,8,9,10先取者胜,先取者第1次取时可以从有8个的那一堆取走7个剩下1个,也可以从有9个的中那一堆取走9个剩下0个,也可以从有10个的中那一堆取走7个剩下3个. Input输入有多组.每组第1行是m,m&lt;=200000. 后面m个非零正整数.m=0退出. Output先取者负输出No.先取者胜输出Yes,然后输出先取者第1次取子的所有方法.如果从有a个石子的堆中取若干个后剩下b个后会胜就输出a b.参看Sample Output. Sample Input1234567245 4533 6 955 7 8 9 100 Sample Output1234567NoYes9 5Yes8 19 010 3 题解：尼姆博弈这题判断胜负直接异或就行，若异或结果sum=0则先手败，其余先手必胜 胜要求输出第一步操作后剩余的石子数，若c[i]^sum&lt;c[i]则可行，取得个数为c[i]-c[i]^sum，输出剩余个数即为c[i]^sum 以下我也忘了摘自哪里。。 三堆的时候 用(a,b,c)表示某种局势，首先(0,0,0)显然是必败态，无论谁面对(0,0,0) ，都必然失败；第二种必败态是(0,n,n)，自己在某一堆拿走k（k ≤ n）个物品，不论k为多少，对方只要在另一堆拿走k个物品，最后自己都将面临(0,0,0)的局势，必败。仔细分析一下，(1,2,3)也是必败态，无论自己如何拿，接下来对手都可以把局势变为(0,n,n)的情形 任何奇异局势(a,b,c)都有a XOR b XOR c = 0 如果我们面对的是一个非必败态(a,b,c)，要如何变为必败态呢？假设 a &lt; b &lt; c，我们只要将 c 变为a XOR b，即可。因为有如下的运算结果： a XOR b XOR (a XOR b)=(a XOR a) XOR (b XOR b) = 0 XOR 0 = 0 要将c 变为a XOR b，只要对 c进行 c-(a XOR b)这样的运算即可 定义两个状态，分别为N和P，N代表Next-position，可以理解为先手必胜状态，P代表Previous-position，可以理解为后手必胜状态（或为先手必败）N/P两个状态的关系：（1）无法进行局面转移的状态为P；（2）只要有一种转移方式能将局面变为P，则当前状态为N；（3）任何转移方式都只能使局面变为N，则当前状态为P。（1）最后所有石堆中的石子都为0，此时无法再做任何操作，所以此时是P；（2）在还剩一堆的情况下（无论个数，因为可以随意取），把这一堆都取完，留给对方 的肯定是0个石子，也就是P，所以当前肯定是N；（3）还剩下两堆，且每堆个数为1，因为当前必须要取，而当取完后，通过（2）可知， 留给对方的局 面一定是N，所以当前肯定为P。 对于Nim游戏的各个石堆（a1,a2,a3……an），当且仅当a1^a2^a3^……^an=0时它为P。 论证还是要根据N/P的三个状态关系来： （1）无法移动的局面为所有石堆的石子数都为0，0^0^……^0=0，这个很简单； （2）若当前的局面不为0，即a1^a2^a3^……^an=k，则必定有一个数ai改变ai的值为ai’（或者理解为改变当前某个石堆的状态），能使的a1^a2^a3^……^ai’^……^an=0,证明很简单，通过异或的性质，因为k的二进制最高位（从右往左）为1，可以得出一 定存在某个ai的最高位为1，此时ai&#39;*k&lt;ai，这个也很好理解，当前的最高位由1变为0 ，十进制时ai一定小于ai’。所以，我们可以将ai=ai&#39;*k，此时a1^a2^a3^......^ai&#39;*k ^.......an=0。 （3）若当前某个局面为P，即a1^a2^a3^……^an=0,一定不存在改变某 个ai，使之变为ai’，a1^a2^a3^…….^ai’^……^an=0,因为异或满足消去律，消去后得ai=ai’，由题目可得不能不取，即当前的ai值必须改变，所以此时ai一定不等于ai’。 代码：1234567891011121314151617181920212223#include&lt;bits/stdc++.h&gt;using namespace std;const int N=200005;//c1^c2^...^cn=k,然后c1^c2^...^cn^k=0,那么对那个数执行操作减去（cn-cn^k）,那个数变为cn^k int main()&#123; int n; while(scanf("%d",&amp;n)&amp;&amp;n)&#123; int sum=0,c[N]; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;c[i]); sum^=c[i]; &#125; if(sum==0)printf("No\n"); else&#123; printf("Yes\n"); for(int i=0;i&lt;n;i++)&#123; if((c[i]^sum)&lt;c[i])printf("%d %d\n",c[i],(c[i]^sum)); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>尼姆博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 2177 取(2堆)石子游戏（威佐夫博弈）]]></title>
    <url>%2Feb18b91b%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=2177 Problem Description有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。如果你胜，你第1次怎样取子? Input输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000，且a&lt;=b。a=b=0退出。 Output输出也有若干行，如果最后你是败者，则为0，反之，输出1，并输出使你胜的你第1次取石子后剩下的两堆石子的数量x,y,x&lt;=y。如果在任意的一堆中取走石子能胜同时在两堆中同时取走相同数量的石子也能胜，先输出取走相同数量的石子的情况. Sample Input123451 2 5 84 72 20 0 Sample Output12345678014 73 5010 01 2 题解：威佐夫博弈给出一些明显的必败状态(也就是当你面对这些状态时，只要你的对手够聪明，不犯错，无论你怎么拿，你都是必输的)（0，0）、（1，2）、（3，5）、（4，7）、（6，10）、（8，13）、（9，15）、（11，18）、（12，20）、…… 、（ak，bk） (k = 0, 1, 2, 3,……)。并称这些必败状态为 “奇异局势” 得到a0=b0=0,ak是未在前面出现过的最小自然数,而 bk= ak + k。然后公式化就得到了奇异局势的状态公式:1ak = [ k * (1 + √5) / 2 ] ( [x]表示对x取整 ) 1bk = ak + k 奇异局势有三个性质—— 性质1：每个自然数都包含在且只包含在一个奇异局势中。 性质2：对任意的奇异局势，任何合法的操作都会使其成为非奇异局势，也就是奇异局势的所有后继状态均为非奇异局势。 性质3：任何非奇异局势都可以通过某种合法操作得到奇异局势，即奇异局势的所有后继状态中存在奇异局势。 代码：1234567891011121314151617181920212223242526272829303132#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int a,b; double x=(1+sqrt(5.0))/2.0;//矩阵黄金分割数 while(scanf("%d%d",&amp;a,&amp;b)!=EOF&amp;&amp;(a+b))&#123; if(a&gt;b)&#123; int temp=a;a=b;b=temp; &#125; if((int)((b-a)*x)==a)printf("0\n"); else&#123; int n,m; printf("1\n"); for(int i=1;i&lt;=a;i++)&#123;//一起拿 n=a-i; m=b-i; if((int)((m-n)*x)==n)printf("%d %d\n",n,m); //不用退出循环也可，因为由奇异状态性质，只会有一个i满足 &#125; for(int i=b-1;i&gt;=0;i--)&#123;//从一个中拿，要从多的那堆中拿！ n=a; m=i; if(n&gt;m)&#123; int temp=n;n=m;m=temp; &#125; if((int)((m-n)*x)==n)printf("%d %d\n",n,m); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>威佐夫博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[poj 1704 Georgia and Bob（尼姆博弈，阶梯博弈）]]></title>
    <url>%2Fe9da39f8%2F</url>
    <content type="text"><![CDATA[http://poj.org/problem?id=1704 Georgia and Bob decide to play a self-invented game. They draw a row of grids on paper, number the grids from left to right by 1, 2, 3, …, and place N chessmen on different grids, as shown in the following figure for example: Georgia and Bob move the chessmen in turn. Every time a player will choose a chessman, and move it to the left without going over any other chessmen or across the left edge. The player can freely choose number of steps the chessman moves, with the constraint that the chessman must be moved at least ONE step and one grid can at most contains ONE single chessman. The player who cannot make a move loses the game. Georgia always plays first since “Lady first”. Suppose that Georgia and Bob both do their best in the game, i.e., if one of them knows a way to win the game, he or she will be able to carry it out. Given the initial positions of the n chessmen, can you predict who will finally win the game? InputThe first line of the input contains a single integer T (1 &lt;= T &lt;= 20), the number of test cases. Then T cases follow. Each test case contains two lines. The first line consists of one integer N (1 &lt;= N &lt;= 1000), indicating the number of chessmen. The second line contains N different integers P1, P2 … Pn (1 &lt;= Pi &lt;= 10000), which are the initial positions of the n chessmen. OutputFor each test case, prints a single line, “Georgia will win”, if Georgia will win the game; “Bob will win”, if Bob will win the game; otherwise ‘Not sure’. Sample Input12345231 2 381 5 6 7 9 12 14 17 Sample Output12Bob will winGeorgia will win 题意：从左到右有一排棋子，给出棋子初始位置，每次操作选择一个棋子向左移动，且不能跨过前面的棋子和最左边边缘，一个格子只能放一个棋子，无法移动的输 题解：题面一看很玄乎，但是分析分析这其实就是个单单纯纯的尼姆博弈的模型啊 因为每个棋子不能越过前面的棋子，所以其实开始和结束棋子的顺序已经固定了都是一样的，他们最后移动多少步到哪个地方也都是安排好了的，所以最后肯定会变成1...10...0（1表示有棋子，0表示空格）的状态，所以其实就是相当于n堆取石子游戏，没堆的石子数相当于本题里两个棋子之间的距离，也就是后面棋子能直接移动的步数 这时可能会想到一个问题，如果移动后是11100011这样的情况呢？如果是这样的话，后手只要拿着那个跟先手移动的棋同一对棋，学着先手向左移动就好了，次数都一样，所以实际上转化成的石子数只和两个棋子的间隔有关，和具体的位置无关，最后都会在不影响胜负的情况下达到目标态 所以最后的具体写法是，先把棋子位置排序，从大到小两个两个一对，他们之间的间隔（r-l-1）就是每堆的石子数，这里如果最左边多了一个棋子，把它和位置1（即左边缘）凑成一对就可以 然后就是尼姆博弈异或一下没啥好说的啦～ 查了一下原来这题有学名叫 阶梯博弈 先mark一下 阶梯博弈详解 代码：123456789101112131415161718192021222324252627#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int t,s[1005]; scanf("%d",&amp;t); while(t--)&#123; int n; scanf("%d",&amp;n); for(int i=0;i&lt;n;i++)scanf("%d",&amp;s[i]); sort(s,s+n); int ans; if(n&amp;1)&#123; ans=s[0]-1; for(int i=2;i&lt;n;i+=2)ans^=(s[i]-s[i-1]-1); if(ans==0)cout&lt;&lt;"Bob will win"&lt;&lt;endl; else cout&lt;&lt;"Georgia will win"&lt;&lt;endl; &#125; else&#123; ans=s[1]-s[0]-1; for(int i=3;i&lt;n;i+=2)ans^=(s[i]-s[i-1]-1); if(ans==0)cout&lt;&lt;"Bob will win"&lt;&lt;endl; else cout&lt;&lt;"Georgia will win"&lt;&lt;endl; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>尼姆博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[poj 1740 A New Stone Game（博弈论）]]></title>
    <url>%2F16236ee%2F</url>
    <content type="text"><![CDATA[http://poj.org/problem?id=1740 Alice and Bob decide to play a new stone game.At the beginning of the game they pick n(1&lt;=n&lt;=10) piles of stones in a line. Alice and Bob move the stones in turn.At each step of the game,the player choose a pile,remove at least one stones,then freely move stones from this pile to any other pile that still has stones.For example:n=4 and the piles have (3,1,4,2) stones.If the player chose the first pile and remove one.Then it can reach the follow states.2 1 4 21 2 4 2（move one stone to Pile 2）1 1 5 2（move one stone to Pile 3）1 1 4 3（move one stone to Pile 4）0 2 5 2（move one stone to Pile 2 and another one to Pile 3）0 2 4 3（move one stone to Pile 2 and another one to Pile 4）0 1 5 3（move one stone to Pile 3 and another one to Pile 4）0 3 4 2（move two stones to Pile 2）0 1 6 2（move two stones to Pile 3）0 1 4 4（move two stones to Pile 4）Alice always moves first. Suppose that both Alice and Bob do their best in the game.You are to write a program to determine who will finally win the game. InputThe input contains several test cases. The first line of each test case contains an integer number n, denoting the number of piles. The following n integers describe the number of stones in each pile at the beginning of the game, you may assume the number of stones in each pile will not exceed 100.The last test case is followed by one zero. OutputFor each test case, if Alice win the game,output 1,otherwise output 0. Sample Input1234532 1 321 10 Sample Output1210 题意：有n堆石头，每次操作选择一堆，移除其中至少一块，然后可以取剩下的石子里的任意个移动到别的任意堆，无法操作的输 题解：首先当n=1时先手必胜，全部移除就好了 n=2时，若a1=a2，则后手只要模仿先手的操作就可以，先手必败；同理若a1！=a2，则先手把两堆变成相等，然后后手必败 n=3时，先手一次操作把第三堆分给一二堆或丢掉，那么就又变成了之前两堆相等的状态，先手必胜 继续推下去，n=4，由于谁面临三堆就必胜，所以双方都想让对方取了那个第四堆然后自己面对三堆状态，而只有在四堆都是1的时候，才会不得不去取第四堆 经过上面分析，先手有极大优势，先手必败的情况只有这种： 后手一直学先手的操作，而一开始注定了总操作数为偶，刚好让先手无路可走 这种情况对应的状态为：石头堆数为偶数，且有n/2对一样的数 判断n/2对是否相等只要排序再比较就可以 代码：1234567891011121314151617181920212223242526272829#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int n; while(scanf("%d",&amp;n)&amp;&amp;n)&#123; int c[15]; for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;c[i]); &#125; if(n&amp;1)&#123; printf("1\n"); continue; &#125; else&#123; sort(c,c+n); int flag=0; for(int i=0;i&lt;n-1;i+=2)&#123; if(c[i]!=c[i+1])&#123; flag=1; break; &#125; &#125; if(flag==0)printf("0\n"); else printf("1\n"); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ACM-ICPC 2015 Changchun Preliminary Contest -- Ponds（拓扑排序）]]></title>
    <url>%2F944a2722%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/29329 Betty owns a lot of ponds, some of them are connected with other ponds by pipes, and there will not be more than one pipe between two ponds. Each pond has a value v. Now Betty wants to remove some ponds because she does not have enough money. But each time when she removes a pond, she can only remove the ponds which are connected with less than two ponds, or the pond will explode. Note that Betty should keep removing ponds until no more ponds can be removed. After that, please help her calculate the sum of the value for each connected component consisting of a odd number of ponds Input FormatThe first line of input will contain a number T(1≤T≤30) which is the number of test cases. For each test case, the first line contains two number separated by a blank. One is the number p(1≤p≤10^4) which represents the number of ponds she owns, and the other is the number m(1≤m≤10^5) which represents the number of pipes. The next line contains p numbers v1，···，vp, where vi(1≤vi≤10^8) indicating the value of pond i. Each of the last m lines contain two numbers a and b, which indicates that pond a and pond b are connected by a pipe. Output FormatFor each test case, output the sum of the value of all connected components consisting of odd number of ponds after removing all the ponds connected with less than two pipes. 样例输入1234567891017 71 2 3 4 5 6 71 41 54 52 32 63 62 7 样例输出121 题目来源ACM-ICPC 2015 Changchun Preliminary Contest 题意：给一个无向图，池塘之间有管道相连，每个池塘有一个权值，现在要拆掉所有度数小于2的池塘，直至不能拆为止，最后求连通个数为奇数的池塘的权值和 题解：删除一个度数为1的结点之后，这个点的边所通向的点的度数也要减一，就可能产生新的度数小于2的点，有点拓扑排序的意思，出现度数小于2的点就存入q，直到q为空，按照题意写就行 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long longconst int N=1000005;int d[N],w[N],u[N],v[N],sum[N];LL ans;vector&lt;vector&lt;int&gt; &gt;tu;bool vis[N];int fa[N];void init(int x)&#123; for(int i=1;i&lt;=x;i++)fa[i]=i; memset(d,0,sizeof(d)); memset(vis,false,sizeof(vis)); memset(sum,0,sizeof(sum)); tu.resize(x+1); tu.clear();&#125;int find(int x)&#123; int tmp=x; while(fa[tmp]!=tmp)tmp=fa[tmp]; fa[x]=tmp; return tmp;&#125;void join(int x,int y)&#123; if(find(x)!=find(y))fa[find(x)]=fa[find(y)];&#125;int main()&#123; int t,n,m; scanf("%d",&amp;t); while(t--)&#123; ans=0; scanf("%d%d",&amp;n,&amp;m); init(n); for(int i=1;i&lt;=n;i++)scanf("%d",&amp;w[i]); for(int i=1;i&lt;=m;i++)&#123; scanf("%d%d",&amp;u[i],&amp;v[i]); d[u[i]]++;d[v[i]]++; tu[u[i]].push_back(v[i]); tu[v[i]].push_back(u[i]); &#125; queue&lt;int&gt;q; for(int i=1;i&lt;=n;i++)&#123; if(d[i]&lt;=1)&#123; vis[i]=true; q.push(i); &#125; &#125; while(!q.empty())&#123; int tmp=q.front(); q.pop(); for(int i=0;i&lt;tu[tmp].size();i++)&#123; int nod=tu[tmp][i]; d[nod]--; if(d[nod]&lt;=1&amp;&amp;vis[nod]==false)&#123; vis[nod]=true; q.push(nod); &#125; &#125; &#125; for(int i=1;i&lt;=m;i++)&#123; if(vis[u[i]]==false&amp;&amp;vis[v[i]]==false)join(u[i],v[i]); &#125; for(int i=1;i&lt;=n;i++)&#123; if(vis[i]==false)sum[find(i)]++; &#125; for(int i=1;i&lt;=n;i++)&#123; if(vis[i]==false&amp;&amp;sum[find(i)]&amp;1)ans+=w[i]; &#125; printf("%lld\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>拓扑排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Minimum Cut（读题。。）]]></title>
    <url>%2F15c1232b%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/29122 Given a simple unweighted graph GG (an undirected graph containing no loops nor multiple edges) with nn nodes and mm edges. Let T be a spanning tree of G. We say that a cut in G respects T if it cuts just one edges of T. Since love needs good faith and hypocrisy return for only grief, you should find the minimum cut of graph G respecting the given spanning tree T. Input FormatThe input contains several test cases. The first line of the input is a single integer t(1≤t≤5) which is the number of test cases. Then tt test cases follow. Each test case contains several lines. The first line contains two integers n(2≤n≤20000) and m(n−1≤m≤200000). The following n-1n−1 lines describe the spanning tree T and each of them contains two integers uu and v corresponding to an edge. Next m−n+1 lines describe the undirected graph G and each of them contains two integers u and v corresponding to an edge which is not in the spanning tree T. Output FormatFor each test case, you should output the minimum cut of graph G respecting the given spanning tree T. 样例输入123456714 51 22 33 41 31 4 样例输出1Case #1: 2 题目来源ACM-ICPC 2015 Shenyang Preliminary Contest 题意：先给一棵生成树，再在此基础上给图，删去树的一个边和图一些边使图不连通，求删去的最少边数 题解：题目不难 读懂了就很水 但是真的是读了好久。。 要使图不连通且只能删树的一个边，就要找树上度数为1的点，然后加上图中和这个点相连的边，求最小的即可 代码：1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;algorithm&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;using namespace std;#define LL long long const int N=20005;const int INF=0x3f3f3f3f;int d1[N],d2[N];int main()&#123; int t; scanf("%d",&amp;t); for(int i=1;i&lt;=t;i++)&#123; int n,m,ans=INF; scanf("%d%d",&amp;n,&amp;m); memset(d1,0,sizeof(d1)); memset(d2,0,sizeof(d2)); int u,v; for(int i=0;i&lt;n-1;i++)&#123; scanf("%d%d",&amp;u,&amp;v); d1[u]++;d1[v]++; &#125; for(int i=n-1;i&lt;m;i++)&#123; scanf("%d%d",&amp;u,&amp;v); d2[u]++;d2[v]++; &#125; for(int i=1;i&lt;=n;i++)&#123; if(d1[i]==1)ans=min(ans,1+d2[i]); &#125; printf("Case #%d: %d\n",i,ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hdu 3371 Connect the Cities（最小生成树）]]></title>
    <url>%2F70032e53%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=3371 Problem DescriptionIn 2100, since the sea level rise, most of the cities disappear. Though some survived cities are still connected with others, but most of them become disconnected. The government wants to build some roads to connect all of these cities again, but they don’t want to take too much money. InputThe first line contains the number of test cases.Each test case starts with three integers: n, m and k. n (3 &lt;= n &lt;=500) stands for the number of survived cities, m (0 &lt;= m &lt;= 25000) stands for the number of roads you can choose to connect the cities and k (0 &lt;= k &lt;= 100) stands for the number of still connected cities. To make it easy, the cities are signed from 1 to n.Then follow m lines, each contains three integers p, q and c (0 &lt;= c &lt;= 1000), means it takes c to connect p and q. Then follow k lines, each line starts with an integer t (2 &lt;= t &lt;= n) stands for the number of this connected cities. Then t integers follow stands for the id of these cities. OutputFor each case, output the least money you need to take, if it’s impossible, just output -1. Sample Input12345678916 4 31 4 22 6 12 3 53 4 332 1 22 1 33 4 5 6 Sample Output11 题解：最小生成树 当时tle无数次 最后同一段代码看人品卡过去。。？什么操作？？ 现在测了两次都是748ms 最后求gen的时候不要find(i)==i，直接fa[i]==ik个那段读入的时候用while(num–)，或许真的while比for快一点？？ 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include&lt;stdio.h&gt;#include&lt;algorithm&gt;using namespace std;const int N=505;struct Edge&#123; int u,v; double cap;&#125;Edge[N*N];//边集 int m,ans; int fa[N];int find(int x)&#123; if(x!=fa[x])fa[x]=find(fa[x]); return fa[x];&#125;void join(int x,int y)&#123; int a=find(x),b=find(y); if(a==b)return; else&#123; fa[a]=b; &#125;&#125; bool cmp(struct Edge a,struct Edge b)&#123; return a.cap&lt;b.cap;&#125;void kruskal()&#123; sort(Edge+1,Edge+m+1,cmp);//按边的最小代价排序 for(int i=1;i&lt;=m;i++)&#123; int fx=find(Edge[i].u),fy=find(Edge[i].v); if(fx==fy)continue; ans+=Edge[i].cap;//u，v不在一棵树上，就加上这条边 join(fx,fy); &#125;&#125;int main()&#123; int t; scanf("%d",&amp;t); while(t--)&#123; int n,k; scanf("%d%d%d",&amp;n,&amp;m,&amp;k); for(int i=1;i&lt;=n;i++)fa[i]=i;; for(int i=1;i&lt;=m;i++)&#123; int p,q,c; scanf("%d%d%d",&amp;p,&amp;q,&amp;c); Edge[i].u=p; Edge[i].v=q; Edge[i].cap=c; &#125; for(int i=1;i&lt;=k;i++)&#123; int num,a,tmp; scanf("%d%d",&amp;num,&amp;a); num--;tmp=a; while(num--)&#123; scanf("%d",&amp;a); if(fa[tmp]!=fa[a])join(tmp,a); tmp=a; &#125; &#125; ans=0; kruskal(); int gen=0; for(int i=1;i&lt;=n;i++)&#123; if(fa[i]==i)&#123; gen++; &#125; &#125; if(gen==1)printf("%d\n",ans); else printf("-1\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1879 继续畅通工程（最小生成树）]]></title>
    <url>%2F340b38ab%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1879 Problem Description省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可）。现得到城镇道路统计表，表中列出了任意两城镇间修建道路的费用，以及该道路是否已经修通的状态。现请你编写程序，计算出全省畅通需要的最低成本。 Input测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( 1&lt; N &lt; 100 )；随后的 N(N-1)/2 行对应村庄间道路的成本及修建状态，每行给4个正整数，分别是两个村庄的编号（从1编号到N），此两村庄间道路的成本，以及修建状态：1表示已建，0表示未建。 当N为0时输入结束。 Output每个测试用例的输出占一行，输出全省畅通需要的最低成本。 Sample Input1234567891011121331 2 1 01 3 2 02 3 4 031 2 1 01 3 2 02 3 4 131 2 1 01 3 2 12 3 4 10 Sample Output123310 题解：给出一些有的和没有的边 有的边直接join 没有的加入边集 跑一遍kruskal 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;bits/stdc++.h&gt;using namespace std;const int N=105;struct Edge&#123; int u,v; double cap;&#125;Edge[N*N];//边集 int n,num,cnt,ans; int fa[N];int find(int x)&#123; if(x!=fa[x])fa[x]=find(fa[x]); return fa[x];&#125;void join(int x,int y)&#123; int a=find(x),b=find(y); if(a==b)return; else&#123; fa[a]=b; &#125;&#125; bool cmp(struct Edge a,struct Edge b)&#123; return a.cap&lt;b.cap;&#125;void kruskal()&#123; sort(Edge+1,Edge+cnt,cmp);//按边的最小代价排序 for(int i=1;i&lt;=cnt-1;i++)&#123; int fx=find(Edge[i].u),fy=find(Edge[i].v); if(fx==fy)continue; ans+=Edge[i].cap;//u，v不在一棵树上，就加上这条边 join(fx,fy); &#125;&#125;int main()&#123; while(scanf("%d",&amp;n))&#123; if(n==0)break; for(int i=1;i&lt;=n;i++)fa[i]=i; num=n*(n-1)/2; cnt=1; for(int i=1;i&lt;=num;i++)&#123; int a,b,c,d; scanf("%d%d%d%d",&amp;a,&amp;b,&amp;c,&amp;d); if(d==0)&#123; Edge[cnt].u=a; Edge[cnt].v=b; Edge[cnt].cap=c; cnt++; &#125; else if(d==1)&#123; join(a,b); &#125; &#125; ans=0; kruskal(); printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
        <tag>kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1875 畅通工程再续（最小生成树）]]></title>
    <url>%2F5c944241%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1875 Problem Description相信大家都听说一个“百岛湖”的地方吧，百岛湖的居民生活在不同的小岛中，当他们想去其他的小岛时都要通过划小船来实现。现在政府决定大力发展百岛湖，发展首先要解决的问题当然是交通问题，政府决定实现百岛湖的全畅通！经过考察小组RPRush对百岛湖的情况充分了解后，决定在符合条件的小岛间建上桥，所谓符合条件，就是2个小岛之间的距离不能小于10米，也不能大于1000米。当然，为了节省资金，只要求实现任意2个小岛之间有路通即可。其中桥的价格为 100元/米。 Input输入包括多组数据。输入首先包括一个整数T(T &lt;= 200)，代表有T组数据。每组数据首先是一个整数C(C &lt;= 100),代表小岛的个数，接下来是C组坐标，代表每个小岛的坐标，这些坐标都是 0 &lt;= x, y &lt;= 1000的整数。 Output每组输入数据输出一行，代表建桥的最小花费，结果保留一位小数。如果无法实现工程以达到全部畅通，输出”oh!”. Sample Input123456782210 1020 2031 12 21000 1000 Sample Output121414.2oh! 题解：最小生成树 加了边的限制 只要在加边前判断一下边长是否合法就行 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;bits/stdc++.h&gt;using namespace std;const int N=105;struct Edge&#123; int u,v; double cap;&#125;Edge[N*N];//边集 struct Node&#123; int x,y;&#125;Node[N];//点集 int n,num,ed,cnt;double ans; int fa[N];double distance_(int a,int b)&#123; return sqrt((Node[a].x-Node[b].x)*(Node[a].x-Node[b].x)+(Node[a].y-Node[b].y)*(Node[a].y-Node[b].y));&#125;int find(int x)&#123; if(x!=fa[x])fa[x]=find(fa[x]); return fa[x];&#125;void join(int x,int y)&#123; int a=find(x),b=find(y); if(a==b)return; else&#123; fa[a]=b; &#125;&#125; bool cmp(struct Edge a,struct Edge b)&#123; return a.cap&lt;b.cap;&#125;void kruskal()&#123; sort(Edge,Edge+cnt,cmp);//按边的最小代价排序 for(int i=1;i&lt;=cnt-1;i++)&#123; int fx=find(Edge[i].u),fy=find(Edge[i].v); if(fx==fy)continue; ans+=Edge[i].cap;//u，v不在一棵树上，就加上这条边 join(fx,fy); ed++; &#125;&#125;int main()&#123; int t; scanf("%d",&amp;t); while(t--)&#123; scanf("%d",&amp;n); for(int i=1;i&lt;=n;i++)&#123; scanf("%d%d",&amp;Node[i].x,&amp;Node[i].y); fa[i]=i; &#125; cnt=1; ed=0; for(int i=1;i&lt;=n-1;i++)&#123; for(int j=i+1;j&lt;=n;j++)&#123; if(distance_(i,j)&gt;=10.0&amp;&amp;distance_(i,j)&lt;=1000.0)&#123;//生成边集的时候就把不要的排除了 Edge[cnt].u=i; Edge[cnt].v=j; Edge[cnt].cap=distance_(i,j); cnt++; &#125; &#125; &#125; ans=0; kruskal(); if(ed==n-1)printf("%.1f\n",ans*100); else printf("oh!\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
        <tag>kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1863 畅通工程（最小生成树）]]></title>
    <url>%2Ff9161795%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1863 Problem Description省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可）。经过调查评估，得到的统计表中列出了有可能建设公路的若干条道路的成本。现请你编写程序，计算出全省畅通需要的最低成本。 Input测试输入包含若干测试用例。每个测试用例的第1行给出评估的道路条数 N、村庄数目M ( &lt; 100 )；随后的 N行对应村庄间道路的成本，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间道路的成本（也是正整数）。为简单起见，村庄从1到M编号。当N为0时，全部输入结束，相应的结果不要输出。 Output对每个测试用例，在1行里输出全省畅通需要的最低成本。若统计数据不足以保证畅通，则输出“?”。 Sample Input12345673 31 2 11 3 22 3 41 32 3 20 100 Sample Output123? 题解：给出边 求最小生成树 如果无法连通 输出“?” 因为要判断最后是否连通 所以用kruskal 最后只要先记录一个点的父亲 然后判断剩余点是否全部和它相同即可 不满足连通条件的情况： （点&lt;=边+1）的不行 最后所有结点不在一个根的不行 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;using namespace std;const int N=105;struct Edge&#123; int u,v; int cap;&#125;Edge[N*N];//边集 int n,ans,num; int fa[N];int find(int x)&#123; if(x!=fa[x])fa[x]=find(fa[x]); return fa[x];&#125;void join(int x,int y)&#123; int a=find(x),b=find(y); if(a==b)return; else&#123; fa[a]=b; &#125;&#125; bool cmp(struct Edge a,struct Edge b)&#123; return a.cap&lt;b.cap;&#125;void kruskal()&#123; sort(Edge,Edge+num,cmp);//按边的最小代价排序 for(int i=1;i&lt;=num;i++)&#123; int fx=find(Edge[i].u),fy=find(Edge[i].v); if(fx==fy)continue; ans+=Edge[i].cap;//u，v不在一棵树上，就加上这条边 join(fx,fy); &#125;&#125;int main()&#123; while(scanf("%d%d",&amp;num,&amp;n)!=EOF)&#123; if(num==0)&#123; break; &#125; for(int i=1;i&lt;=n;i++)&#123; fa[i]=i; &#125; int p,q,w; for(int i=1;i&lt;=num;i++)&#123; scanf("%d%d%d",&amp;p,&amp;q,&amp;w); Edge[i].u=p; Edge[i].v=q; Edge[i].cap=w; &#125; ans=0; kruskal(); int flag=1; for(int i=2;i&lt;=num;i++)&#123; if(find(i)!=find(1))&#123; flag=0;break; &#125; &#125; if(num&lt;n-1)printf("?\n"); else if(flag==1)printf("%d\n",ans); else printf("?\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
        <tag>kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1301 Jungle Roads（最小生成树）]]></title>
    <url>%2Fb01398e8%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1301 Problem Description The Head Elder of the tropical island of Lagrishan has a problem. A burst of foreign aid money was spent on extra roads between villages some years ago. But the jungle overtakes roads relentlessly, so the large road network is too expensive to maintain. The Council of Elders must choose to stop maintaining some roads. The map above on the left shows all the roads in use now and the cost in aacms per month to maintain them. Of course there needs to be some way to get between all the villages on maintained roads, even if the route is not as short as before. The Chief Elder would like to tell the Council of Elders what would be the smallest amount they could spend in aacms per month to maintain roads that would connect all the villages. The villages are labeled A through I in the maps above. The map on the right shows the roads that could be maintained most cheaply, for 216 aacms per month. Your task is to write a program that will solve such problems. The input consists of one to 100 data sets, followed by a final line containing only 0. Each data set starts with a line containing only a number n, which is the number of villages, 1 &lt; n &lt; 27, and the villages are labeled with the first n letters of the alphabet, capitalized. Each data set is completed with n-1 lines that start with village labels in alphabetical order. There is no line for the last village. Each line for a village starts with the village label followed by a number, k, of roads from this village to villages with labels later in the alphabet. If k is greater than 0, the line continues with data for each of the k roads. The data for each road is the village label for the other end of the road followed by the monthly maintenance cost in aacms for the road. Maintenance costs will be positive integers less than 100. All data fields in the row are separated by single blanks. The road network will always allow travel between all the villages. The network will never have more than 75 roads. No village will have more than 15 roads going to other villages (before or after in the alphabet). In the sample input below, the first data set goes with the map above. The output is one integer per line for each data set: the minimum cost in aacms per month to maintain a road system that connect all the villages. Caution: A brute force solution that examines every possible set of roads will not finish within the one minute time limit. Sample Input123456789101112139A 2 B 12 I 25B 3 C 10 H 40 I 8C 2 D 18 G 55D 1 E 44E 2 F 60 G 38F 0G 1 H 35H 1 I 353A 2 B 10 C 40B 1 C 200 Sample Output1221630 题解：一看图就是个最小生成树。。 注意回车要用getchar()搞掉 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;bits/stdc++.h&gt;using namespace std;const int N=30;struct Edge&#123; int u,v; double cap;&#125;Edge[N*N];int n,ans,cnt; int fa[N];int find(int x)&#123; if(x!=fa[x])fa[x]=find(fa[x]); return fa[x];&#125;void join(int x,int y)&#123; int a=find(x),b=find(y); if(a==b)return; else&#123; fa[a]=b; &#125;&#125; bool cmp(struct Edge a,struct Edge b)&#123; return a.cap&lt;b.cap;&#125;void kruskal()&#123; sort(Edge,Edge+cnt,cmp); for(int i=0;i&lt;cnt;i++)&#123; int fx=find(Edge[i].u),fy=find(Edge[i].v); if(fx==fy)continue; ans+=Edge[i].cap; join(fx,fy); &#125;&#125;int main()&#123; while(scanf("%d",&amp;n)!=EOF)&#123; if(n==0)break; for(int i=1;i&lt;N;i++)fa[i]=i; cnt=0; for(int i=1;i&lt;n;i++)&#123; char x,y; int xnum,c; getchar(); scanf("%c %d",&amp;x,&amp;xnum); while(xnum--)&#123; getchar(); scanf("%c %d",&amp;y,&amp;c); Edge[cnt].u=(int)(x-'A'+1); Edge[cnt].v=(int)(y-'A'+1); Edge[cnt].cap=c; cnt++; &#125; &#125; ans=0; kruskal(); printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
        <tag>kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1233 还是畅通工程（最小生成树）]]></title>
    <url>%2Fd655b5fc%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1233 Problem Description某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。 Input测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100 )；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。当N为0时，输入结束，该用例不被处理。 Output对每个测试用例，在1行里输出最小的公路总长度。 Sample Input12345678910111231 2 11 3 22 3 441 2 11 3 41 4 12 3 32 4 23 4 50 Sample Output1235 题解：最小生成树 写的Kruskal 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;bits/stdc++.h&gt;using namespace std;const int N=105;struct Edge&#123; int u,v; int cap;&#125;Edge[N*N];//边集 int n,ans,num; int fa[N];void init()&#123; for(int i=1;i&lt;=n;i++)&#123; fa[i]=i; &#125;&#125;int find(int x)&#123; if(x!=fa[x])fa[x]=find(fa[x]); return fa[x];&#125;void join(int x,int y)&#123; int a=find(x),b=find(y); if(a==b)return; else&#123; fa[a]=b; &#125;&#125; bool cmp(struct Edge a,struct Edge b)&#123; return a.cap&lt;b.cap;&#125;void kruskal()&#123; sort(Edge,Edge+num,cmp);//按边的最小代价排序 for(int i=0;i&lt;num;i++)&#123; int fx=find(Edge[i].u),fy=find(Edge[i].v); if(fx==fy)continue; ans+=Edge[i].cap;//u，v不在一棵树上，就加上这条边 join(fx,fy); &#125;&#125;int main()&#123; while(scanf("%d",&amp;n)!=EOF&amp;&amp;n)&#123; num=n*(n-1)/2; init(); int p,q,w; for(int i=0;i&lt;num;i++)&#123; scanf("%d%d%d",&amp;p,&amp;q,&amp;w); Edge[i].u=p; Edge[i].v=q; Edge[i].cap=w; &#125; ans=0; kruskal(); printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
        <tag>kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1162 Eddy's picture（最小生成树）]]></title>
    <url>%2F438d787%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1162 Problem DescriptionEddy begins to like painting pictures recently ,he is sure of himself to become a painter.Every day Eddy draws pictures in his small room, and he usually puts out his newest pictures to let his friends appreciate. but the result it can be imagined, the friends are not interested in his picture.Eddy feels very puzzled,in order to change all friends ‘s view to his technical of painting pictures ,so Eddy creates a problem for the his friends of you.Problem descriptions as follows: Given you some coordinates pionts on a drawing paper, every point links with the ink with the straight line, causes all points finally to link in the same place. How many distants does your duty discover the shortest length which the ink draws? InputThe first line contains 0 &lt; n &lt;= 100, the number of point. For each point, a line follows; each following line contains two real numbers indicating the (x,y) coordinates of the point. Input contains multiple test cases. Process to the end of file. OutputYour program prints a single real number to two decimal places: the minimum total length of ink lines that can connect all the points. Sample Input123431.0 1.02.0 2.02.0 4.0 Sample Output13.41 题意：给n个点的坐标 求最小生成树 只要预处理一下边长就没别的了 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;using namespace std;const int N=105;struct Edge&#123; int u,v; double cap;&#125;Edge[N*N];struct Node&#123; float x,y;&#125;Node[N];int n,num,cnt;double ans; int fa[N];double distance_(int a,int b)&#123; return sqrt((Node[a].x-Node[b].x)*(Node[a].x-Node[b].x)+(Node[a].y-Node[b].y)*(Node[a].y-Node[b].y));&#125;int find(int x)&#123; if(x!=fa[x])fa[x]=find(fa[x]); return fa[x];&#125;void join(int x,int y)&#123; int a=find(x),b=find(y); if(a==b)return; else&#123; fa[a]=b; &#125;&#125; bool cmp(struct Edge a,struct Edge b)&#123; return a.cap&lt;b.cap;&#125;void kruskal()&#123; sort(Edge,Edge+num+1,cmp); for(int i=0;i&lt;=num;i++)&#123; int fx=find(Edge[i].u),fy=find(Edge[i].v); if(fx==fy)continue; ans+=Edge[i].cap; join(fx,fy); &#125;&#125;int main()&#123; while(scanf("%d",&amp;n)!=EOF)&#123; if(n==0)&#123; printf("0\n"); return 0; &#125; for(int i=1;i&lt;=n;i++)&#123; scanf("%f%f",&amp;Node[i].x,&amp;Node[i].y); fa[i]=i; &#125; cnt=0; num=n*(n-1)/2; for(int i=1;i&lt;=n-1;i++)&#123; for(int j=i+1;j&lt;=n;j++)&#123; Edge[cnt].u=i; Edge[cnt].v=j; Edge[cnt].cap=distance_(i,j); cnt++; &#125; &#125; ans=0; kruskal(); printf("%.2f\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
        <tag>kruskal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1102 Constructing Roads(最小生成树)]]></title>
    <url>%2Fe1d4a8b4%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1102Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem DescriptionThere are N villages, which are numbered from 1 to N, and you should build some roads such that every two villages can connect to each other. We say two village A and B are connected, if and only if there is a road between A and B, or there exists a village C such that there is a road between A and C, and C and B are connected. We know that there are already some roads between some villages and your job is the build some roads such that all the villages are connect and the length of all the roads built is minimum. InputThe first line is an integer N (3 &lt;= N &lt;= 100), which is the number of villages. Then come N lines, the i-th of which contains N integers, and the j-th of these N integers is the distance (the distance should be an integer within [1, 1000]) between village i and village j. Then there is an integer Q (0 &lt;= Q &lt;= N * (N + 1) / 2). Then come Q lines, each line contains two integers a and b (1 &lt;= a &lt; b &lt;= N), which means the road between village a and village b has been built. OutputYou should output a line contains an integer, which is the length of all the roads to be built such that all the villages are connected, and this value is minimum. Sample Input12345630 990 692990 0 179692 179 011 2 Sample Output1179 题解：裸的最小生成树的题 两种算法都放上 prim加点 kruskal加边 现在整理以前的代码感觉以前写的好详细。。 代码：Prim 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;bits/stdc++.h&gt;using namespace std;const int N=105;const int INF=0x3f3f3f3f;int n,ans;int map_[N][N],dis[N],vis[N];void prim()&#123; for(int i=1;i&lt;=n;i++)&#123; dis[i]=map_[1][i]; vis[i]=0; &#125; dis[1]=0; vis[1]=1; int k,tmp; for(int i=1;i&lt;=n;i++)&#123; tmp=INF; for(int j=1;j&lt;=n;j++)&#123;//在从i到j还没访问过的j中找出代价最小的 if(!vis[j]&amp;&amp;tmp&gt;dis[j])&#123; k=j; tmp=dis[j]; &#125; &#125; if(tmp==INF)break;//没找到即全部访问过了，prim结束 vis[k]=1;//给k标记已访问 ans+=dis[k]; for(int j=1;j&lt;=n;j++)&#123;//加入从k出发的最短路 if(!vis[j]&amp;&amp;dis[j]&gt;map_[k][j])&#123; dis[j]=map_[k][j]; &#125; &#125; &#125;&#125;int main()&#123; while(scanf("%d",&amp;n)!=EOF)&#123; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=n;j++)&#123; scanf("%d",&amp;map_[i][j]); &#125; &#125; int q,a,b; scanf("%d",&amp;q); while(q--)&#123; scanf("%d%d",&amp;a,&amp;b); map_[a][b]=map_[b][a]=0; &#125; ans=0; prim(); printf("%d\n",ans); &#125; return 0;&#125; Kruskal 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;bits/stdc++.h&gt;using namespace std;const int N=105;struct Edge&#123; int u,v; int cap;&#125;Edge[N*N];int n,ans,cnt;//cnt为边数 int fa[N];void init()&#123; for(int i=1;i&lt;=n;i++)&#123; fa[i]=i; &#125;&#125;int find(int x)&#123; if(x!=fa[x])fa[x]=find(fa[x]); return fa[x];&#125;void join(int x,int y)&#123; int a=find(x),b=find(y); if(a==b)return; else&#123; fa[a]=b; &#125;&#125; bool cmp(struct Edge a,struct Edge b)&#123; return a.cap&lt;b.cap;&#125;void kruskal()&#123; sort(Edge,Edge+cnt,cmp);//按边的最小代价排序 for(int i=0;i&lt;cnt;i++)&#123; int fx=find(Edge[i].u),fy=find(Edge[i].v); if(fx==fy)continue; ans+=Edge[i].cap;//u，v不在一棵树上，就加上这条边 join(fx,fy); &#125;&#125;int main()&#123; while(scanf("%d",&amp;n)!=EOF)&#123; init(); cnt=0; int w; for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=n;j++)&#123; scanf("%d",&amp;w); Edge[cnt].u=i; Edge[cnt].v=j; Edge[cnt].cap=w; cnt++; &#125; &#125; int q,u,v; scanf("%d",&amp;q); while(q--)&#123;//建树 scanf("%d%d",&amp;u,&amp;v); join(u,v); &#125; ans=0; kruskal(); printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
        <tag>kruskal</tag>
        <tag>prim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1198 Farm Irrigation（并查集）]]></title>
    <url>%2F276c371d%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1198 Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem DescriptionBenny has a spacious farm land to irrigate. The farm land is a rectangle, and is divided into a lot of samll squares. Water pipes are placed in these squares. Different square has a different type of pipe. There are 11 types of pipes, which is marked from A to K, as Figure 1 shows. Benny has a map of his farm, which is an array of marks denoting the distribution of water pipes over the whole farm. For example, if he has a map ADCFJKIHE then the water pipes are distributed like Several wellsprings are found in the center of some squares, so water can flow along the pipes from one square to another. If water flow crosses one square, the whole farm land in this square is irrigated and will have a good harvest in autumn. Now Benny wants to know at least how many wellsprings should be found to have the whole farm land irrigated. Can you help him? Note: In the above example, at least 3 wellsprings are needed, as those red points in Figure 2 show. InputThere are several test cases! In each test case, the first line contains 2 integers M and N, then M lines follow. In each of these lines, there are N characters, in the range of ‘A’ to ‘K’, denoting the type of water pipe over the corresponding square. A negative M or N denotes the end of input, else you can assume 1 &lt;= M, N &lt;= 50. OutputFor each test case, output in one line the least number of wellsprings needed. Sample Input 123456782 2DKHF3 3ADCFJKIHE-1 -1 Sample Output 1223 题解：一个并查集好题 水管连通本质上就是集合的合并，最后求有几个集合的问题，很容易想到并查集 只需要对每个地块与右方和下方的地块进行合并即可，合并之前先判断是否能连通，若能连通则合并，不能连通，则不能合并 每个地块的四个方向用数组的01来表示，用位运算来判断可连性 具体见代码注释 还有一种二进制的位运算写法 12345678const int type[11] = &#123;3,6,9,12,10,5,7,11,13,14,15&#125;; if(dir==1)&#123; if(((type[ta]&gt;&gt;3) &amp; 1) &amp;&amp; ((type[tb]&gt;&gt;1) &amp; 1))mark = true; &#125;else&#123; if(((type[ta]&gt;&gt;2) &amp; 1) &amp;&amp; (type[tb] &amp; 1))mark = true; &#125; 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;bits/stdc++.h&gt;using namespace std;const int N=505;const int type[11][4]=&#123; &#123;1,1,0,0&#125;,&#123;0,1,1,0&#125;,&#123;1,0,0,1&#125;,&#123;0,0,1,1&#125;,&#123;0,1,0,1&#125;,&#123;1,0,1,0&#125;,&#123;1,1,1,0&#125;,&#123;1,1,0,1&#125;,&#123;1,0,1,1&#125;,&#123;0,1,1,1&#125;,&#123;1,1,1,1&#125; &#125;;int n,m,num,cnt; int fa[N*N+1];char f[N][N]; int find(int x)&#123; if(x!=fa[x])fa[x]=find(fa[x]); return fa[x];&#125;void join(int x1,int y1,int x2,int y2,int dir)&#123; if(x2&gt;n||y2&gt;m)return;//超出地图不合并 bool flag=false;//标记是否可连通 int t1,t2; t1=f[x1][y1]-'A'; t2=f[x2][y2]-'A'; if(dir==1)&#123; if(type[t1][3]&amp;&amp;type[t2][1])flag=true;//竖直方向 &#125; else&#123; if(type[t1][2]&amp;&amp;type[t2][0])flag=true;//水平方向 &#125; if(flag)&#123;//合并 int a=find((x1-1)*m+y1),b=find((x2-1)*m+y2); if(a!=b)&#123; fa[b]=a; --cnt;//消去一个水井 &#125; &#125;&#125; int main()&#123; while(scanf("%d%d",&amp;n,&amp;m)!=EOF)&#123; if(n==-1&amp;&amp;m==-1)break; for(int i=1;i&lt;=n*m;i++)&#123; fa[i]=i; &#125; cnt=n*m;//初始化，假设所有田里都有水井 for(int i=1;i&lt;=n;i++)&#123; scanf("%s",f[i]+1); &#125; for(int i=1;i&lt;=n;i++)&#123;//统一向右or下合并 for(int j=1;j&lt;=m;j++)&#123; join(i,j,i+1,j,1);//竖直 join(i,j,i,j+1,0);//水平 &#125; &#125; printf("%d\n",cnt); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1856 More is better（并查集）]]></title>
    <url>%2Ffc584b3%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1856 Problem DescriptionMr Wang wants some boys to help him with a project. Because the project is rather complex, the more boys come, the better it will be. Of course there are certain requirements. Mr Wang selected a room big enough to hold the boys. The boy who are not been chosen has to leave the room immediately. There are 10000000 boys in the room numbered from 1 to 10000000 at the very beginning. After Mr Wang’s selection any two of them who are still in this room should be friends (direct or indirect), or there is only one boy left. Given all the direct friend-pairs, you should decide the best way. InputThe first line of the input contains an integer n (0 &lt;= n &lt;= 100000) - the number of direct friend-pairs. The following n lines each contains a pair of numbers A and B separated by a single space that suggests A and B are direct friends. (A != B, 1 &lt;= A, B &lt;= 10000000) OutputThe output in one line contains exactly one integer equals to the maximum number of boys Mr Wang may keep. Sample Input1234567891041 23 45 61 641 23 45 67 8 Sample Output1242 题意：一开始1e7个人，有n对朋友，a和b是朋友 最后剩下的人必须直接或间接是朋友 求剩下人数的最大值 题解：求每个集合中元素的个数，然后求个数的最大值 求集合个数的方法:只需要在合并两个集合时处理一下，让这两个集合的元素个数也合并一下就行了 要注意的一个地方就是：当n=0时特判，没人是朋友，最多选一个人要输出1 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;bits/stdc++.h&gt;using namespace std;const int N=100005;int fa[N],sum[N];int find(int x)&#123; int tmp=x; while(tmp!=fa[tmp])tmp=fa[tmp]; fa[x]=tmp; return tmp;&#125;void join(int x,int y)&#123; int a,b; a=find(x);b=find(y); if(a!=b)&#123; fa[a]=b; sum[b]+=sum[a];//合并集合中元素个数 &#125;&#125;int main()&#123; int n; while(scanf("%d",&amp;n)!=EOF)&#123; if(n==0)&#123; printf("1\n"); continue; &#125; for(int i=1;i&lt;=N;i++)&#123; fa[i]=i; sum[i]=1;//开始时数量的都为1 &#125; int num=0; while(n--)&#123; int a,b; scanf("%d%d",&amp;a,&amp;b); num=a&gt;num?a:num; num=b&gt;num?b:num; join(a,b); &#125; int ans=0; for(int i=1;i&lt;=num;i++)&#123; ans=sum[i]&gt;ans?sum[i]:ans; &#125; printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1232 畅通工程（并查集）]]></title>
    <url>%2F34822d81%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1232 Time Limit: 4000/2000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem Description某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？ Input测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。 注意:两个城市之间可以有多条道路相通,也就是说 3 31 21 22 1这种输入也是合法的 当N为0时，输入结束，该用例不被处理。 Output对每个测试用例，在1行里输出最少还需要建设的道路数目。 Sample Input 1234567891011124 21 34 33 31 21 32 35 21 23 5999 00 Sample Output 1234102998 题解：初始化时每个城镇都没有路，所以总共要连接的路的数量为n-1个，在增加路的过程中，先用并查集判断，如果两个城镇确实不在一个集合，这条路就有用，两个城镇归为一个集合中，要连接的路减一。如果两个城镇之前就已经在一个集合里，增加的这条路就无用，要连接的路不变 代码：12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;const int N=100005;int fa[N];int ed;int find(int x)&#123; int tmp=x; while(tmp!=fa[tmp])tmp=fa[tmp]; fa[x]=tmp; return tmp;&#125;void join(int x,int y)&#123; int a,b; a=find(x);b=find(y); if(a!=b)&#123; fa[a]=b; ed++; &#125;&#125;int main()&#123; int m,n,a,b; while(1)&#123; scanf("%d",&amp;n); if(n==0)break; scanf("%d",&amp;m); ed=0; for(int i=1;i&lt;=n;i++)fa[i]=i; while(m--)&#123; scanf("%d%d",&amp;a,&amp;b); join(a,b); &#125; int k=0,flag=1; int ans=n-1-ed; printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1272 小希的迷宫（并查集）]]></title>
    <url>%2Fd67f02ad%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1272Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others) Problem Description上次Gardon的迷宫城堡小希玩了很久（见Problem B），现在她也想设计一个迷宫让Gardon来走。但是她设计迷宫的思路不一样，首先她认为所有的通道都应该是双向连通的，就是说如果有一个通道连通了房间A和B，那么既可以通过它从房间A走到房间B，也可以通过它从房间B走到房间A，为了提高难度，小希希望任意两个房间有且仅有一条路径可以相通（除非走了回头路）。小希现在把她的设计图给你，让你帮忙判断她的设计图是否符合她的设计思路。比如下面的例子，前两个是符合条件的，但是最后一个却有两种方法从5到达8。 Input输入包含多组数据，每组数据是一个以0 0结尾的整数对列表，表示了一条通道连接的两个房间的编号。房间的编号至少为1，且不超过100000。每两组数据之间有一个空行。整个文件以两个-1结尾。 Output对于输入的每一组数据，输出仅包括一行。如果该迷宫符合小希的思路，那么输出”Yes”，否则输出”No”。 Sample Input123456789106 8 5 3 5 2 6 45 6 0 08 1 7 3 6 2 8 9 7 57 4 7 8 7 6 0 03 8 6 8 6 45 3 5 6 5 2 0 0-1 -1 Sample Output123YesYesNo 题解： 保证图是连通的，且连通分量为1 不存在环（包括自环） 因为这是一个无向图，只要保证 顶点数 = 边数+1 ， 就可以说明是连通的 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;bits/stdc++.h&gt;using namespace std;#define INF 0x3f3f3f3fconst int N=100005;int fa[N];bool vis[N];bool circle;//判断是否成环int ed,v;//边数和顶点数 int find(int x)&#123; int tmp=x; while(tmp!=fa[tmp])tmp=fa[tmp]; fa[x]=tmp; return tmp;&#125;void join(int x,int y)&#123; if(x==y)circle=true; int a,b; a=find(x);b=find(y); if(a!=b)&#123; fa[a]=b; ed++;//多一条边 &#125; else circle=true;//要join(x,y)，而a=b说明 x,y是同一祖先，再连起来就成环了 &#125;int main()&#123; int a,b; while(1)&#123; memset(vis,0,sizeof(vis)); circle=false; ed=0;v=0; for(int i=1;i&lt;N;i++)fa[i]=i; scanf("%d%d",&amp;a,&amp;b); if(a==0&amp;&amp;b==0)&#123;//空树特判 puts("Yes"); continue; &#125; if(a==-1&amp;&amp;b==-1)return 0; vis[a]=true;vis[b]=true; join(a,b); while(1)&#123; scanf("%d%d",&amp;a,&amp;b); if(a==0&amp;&amp;b==0)break; join(a,b); vis[a]=true;vis[b]=true; &#125; int k=0,flag=1; for(int i=1;i&lt;N;i++)&#123; if(vis[i])v++; &#125; if(!circle&amp;&amp;ed+1==v)puts("Yes"); else puts("No"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hdu 1325 Is it a tree？（并查集）]]></title>
    <url>%2Fd2d140b5%2F</url>
    <content type="text"><![CDATA[http://acm.hdu.edu.cn/showproblem.php?pid=1325 InputThe input will consist of a sequence of descriptions (test cases) followed by a pair of negative integers. Each test case will consist of a sequence of edge descriptions followed by a pair of zeroes Each edge description will consist of a pair of integers; the first integer identifies the node from which the edge begins, and the second integer identifies the node to which the edge is directed. Node numbers will always be greater than zero. OutputFor each test case display the line Case k is a tree.&quot; or the lineCase k is not a tree.”, where k corresponds to the test case number (they are sequentially numbered starting with 1). Sample Input12345676 8 5 3 5 2 6 45 6 0 08 1 7 3 6 2 8 9 7 57 4 7 8 7 6 0 03 8 6 8 6 45 3 5 6 5 2 0 0-1 -1 Sample Output123Case 1 is a tree.Case 2 is a tree.Case 3 is not a tree. 题意：按题意判断是不是一棵树 题解：类似hdu1272 无环； 除了根，所有的入度为1，根入度为0； 这个结构只有一个根，空树也是树。 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;using namespace std;#define INF 0x3f3f3f3fconst int N=100005;int fa[N];bool vis[N];bool circle;//判断是否成环int du[N];int find(int x)&#123; int tmp=x; while(tmp!=fa[tmp])tmp=fa[tmp]; fa[x]=tmp; return tmp;&#125;void join(int x,int y)&#123; du[y]++; if(x==y)circle=true; int a,b; a=find(x);b=find(y); if(a!=b)&#123; fa[a]=b; &#125; else circle=true;//要join(x,y)，而a=b说明 x,y是同一祖先，再连起来就成环了 &#125;int main()&#123; int a,b; int cas=1; while(1)&#123; memset(vis,0,sizeof(vis)); memset(du,0,sizeof(du)); circle=false; for(int i=1;i&lt;N;i++)fa[i]=i; scanf("%d%d",&amp;a,&amp;b); if(a==0&amp;&amp;b==0)&#123;//空树特判 printf("Case %d is a tree.\n",cas); cas++; continue; &#125; if(a&lt;0&amp;&amp;b&lt;0)return 0; vis[a]=true;vis[b]=true; join(a,b); while(1)&#123; scanf("%d%d",&amp;a,&amp;b); if(a==0&amp;&amp;b==0)break; join(a,b); vis[a]=true;vis[b]=true; &#125; int gen=0,flag=0; for(int i=1;i&lt;N;i++)&#123; if(vis[i])&#123; if(du[i]&gt;1)&#123; flag=1;break; &#125; else if(du[i]==0)gen++; &#125; &#125; if(!circle&amp;&amp;flag==0&amp;&amp;gen==1)printf("Case %d is a tree.\n",cas); else printf("Case %d is not a tree.\n",cas); cas++; &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[poj 1182 食物链（并查集）]]></title>
    <url>%2Fe612ace7%2F</url>
    <content type="text"><![CDATA[http://poj.org/problem?id=1182 Time Limit: 1000MS Memory Limit: 10000K Description动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。有人用两种说法对这N个动物所构成的食物链关系进行描述：第一种说法是”1 X Y”，表示X和Y是同类。第二种说法是”2 X Y”，表示X吃Y。此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。1） 当前的话与前面的某些真的话冲突，就是假话；2） 当前的话中X或Y比N大，就是假话；3） 当前的话表示X吃X，就是假话。你的任务是根据给定的N（1 &lt;= N &lt;= 50,000）和K句话（0 &lt;= K &lt;= 100,000），输出假话的总数。 Input第一行是两个整数N和K，以一个空格分隔。以下K行每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中D表示说法的种类。若D=1，则表示X和Y是同类。若D=2，则表示X吃Y。 Output只有一个整数，表示假话的数目。 Sample Input12345678100 71 101 1 2 1 22 2 3 2 3 3 1 1 3 2 3 1 1 5 5 Sample Output13 题解：分成三类 所以用 并查集+数组加倍 不知道当时在哪看到的这种数组加倍的写法 反正巨好用 i (i+n) (i+2*n)分别代表abc三个种类 如果a吃b 就分别把三种的a和b的下一个join起来 注意这题不合法的输入也要处理成假话 下面是网上找的带权并查集的写法 但是我还是喜欢数组加倍。。https://blog.csdn.net/sunmaoxiang/article/details/80959300 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;cstdio&gt;using namespace std;const int N=50005;int fa[N*3];int find(int x)&#123; return fa[x]==x?x:fa[x]=find(fa[x]);&#125; void join(int x,int y)&#123; fa[find(x)]=find(y);&#125;int main()&#123; int n,k,ans=0; scanf("%d%d",&amp;n,&amp;k); for(int i=0;i&lt;=3*n;i++)fa[i]=i; for(int i=0;i&lt;k;i++)&#123; int a,b,d; scanf("%d%d%d",&amp;d,&amp;a,&amp;b); if(a&gt;n||b&gt;n||a&lt;1||b&lt;1)&#123; ans++; continue; &#125; else if(d==1)&#123; if(find(a)==find(b+n)||find(a)==find(b+2*n))&#123; ans++; continue; &#125; join(a,b); join(a+n,b+n); join(a+2*n,b+2*n); &#125; else &#123; if(find(a)==find(b)||find(a)==find(b+2*n))&#123; ans++; continue; &#125; else&#123; join(a,b+n); join(a+n,b+2*n); join(a+2*n,b); &#125; &#125; &#125; printf("%d\n",ans);&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>数组加倍</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[poj 1988 Cube Stacking（并查集）]]></title>
    <url>%2F223d29ea%2F</url>
    <content type="text"><![CDATA[http://poj.org/problem?id=1988Time Limit: 2000MS Memory Limit: 30000K DescriptionFarmer John and Betsy are playing a game with N (1 &lt;= N &lt;= 30,000)identical cubes labeled 1 through N. They start with N stacks, each containing a single cube. Farmer John asks Betsy to perform P (1&lt;= P &lt;= 100,000) operation. There are two types of operations:moves and counts. In a move operation, Farmer John asks Bessie to move the stack containing cube X on top of the stack containing cube Y. In a count operation, Farmer John asks Bessie to count the number of cubes on the stack with cube X that are under the cube X and report that value. Write a program that can verify the results of the game. Input Line 1: A single integer, P Lines 2..P+1: Each of these lines describes a legal operation. Line 2 describes the first operation, etc. Each line begins with a ‘M’ for a move operation or a ‘C’ for a count operation. For move operations, the line also contains two integers: X and Y.For count operations, the line also contains a single integer: X. Note that the value for N does not appear in the input file. No move operation will request a move a stack onto itself. OutputPrint the output from each of the count operations in the same order as the input file. Sample Input12345676M 1 6C 1M 2 4M 2 6C 3C 4 Sample Output123102 题意：给n个箱子 1-n排成n列有两种操作： M：将x所在列上的箱子移到y所在列箱子上面 C：求x箱子下有几个箱子 题解：因为有合并两堆箱子的操作 所以想到用并查集 这题巧妙的地方在于如何求解这个箱子下面的箱子数 开两个数组 num[i]记录当前第i列有几个箱子place[i]记录箱子i下面的箱子个数 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;cstdio&gt;using namespace std;const int N=30010;int fa[N],num[N],place[N];int find(int x)&#123; if(fa[x]==x)return x; int temp=fa[x]; fa[x]=find(fa[x]); place[x]+=place[temp]; return fa[x];&#125; void join(int x,int y)&#123; fa[x]=y; place[x]+=num[y]; num[y]+=num[x]; num[x]=0;&#125;int main()&#123; int n; scanf("%d",&amp;n); for(int i=1;i&lt;=30000;i++)&#123; place[i]=0; num[i]=1; fa[i]=i; &#125; for(int i=0;i&lt;n;i++)&#123; char s[5]; scanf("%S",&amp;s); if(s[0]=='M')&#123; int x,y; scanf("%d%d",&amp;x,&amp;y); int x1=find(x),y1=find(y); if(x1!=y1)join(x1,y1); &#125; else if(s[0]=='C')&#123; int x; scanf("%d",&amp;x); find(x); printf("%d\n",place[x]); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Teemo's bad day（并查集）]]></title>
    <url>%2F561c553e%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/29203 Today is a bad day. Teemo is scolded badly by his teacher because he didn’t do his homework.But Teemo is very self-confident, he tells the teacher that the problems in the homework are too simple to solve. So the teacher gets much angrier and says”I will choose a problem in the homework, if you can’t solve it, I will call you mother! “ The problem is that: There is an array A which contains n integers, and an array B which also contains n integers. You can pay one dollar to buy a card which contains two integers a1 and a2, The card can arbitrary number of times transform a single integer a1 to a2 and vise-versa on both array A and Array B. Please calculate the minimum dollars you should pay to make the two array same(For every 1&lt;=i&lt;=n,A[i]=B[i]); Input FormatThe first line of the input contains an integer T(1&lt;=T&lt;=10), giving the number of test cases.For every test case, the first line contains an integer n(1&lt;=n&lt;=500000). The second line contains n integers. The i th integer represents Ai. And the third line contains n integers. The i th integer represents Bi. Output FormatFor each test case, output an integer which means the minimum dollars you should pay in a line. 样例输入1234151 1 2 3 21 2 3 1 1 样例输出12 题意：给两个序列，某一张卡片可以把数a换成数b，次数不限，求把两个序列变成相同需要的最少卡片数 题解：两个数父亲不同就join（a,b），然后ans++ 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;ctype.h&gt;#include &lt;cstdlib&gt;#include &lt;climits&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cmath&gt;#include &lt;deque&gt;#include &lt;vector&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;map&gt;#include &lt;stack&gt;#include &lt;set&gt;#include &lt;numeric&gt;#include &lt;sstream&gt;#include &lt;iomanip&gt;#include &lt;limits&gt;using namespace std;const int N=100005;int fa[N];int find(int x)&#123; int tmp=x; while(fa[tmp]!=tmp)tmp=fa[tmp]; fa[x]=tmp; return tmp;&#125;void join(int x,int y)&#123; if(find(x)!=find(y))fa[find(x)]=fa[find(y)];&#125;int a[N*5],b[N*5];int main()&#123; int t; scanf("%d",&amp;t); while(t--)&#123; int n; scanf("%d",&amp;n); for(int i=1;i&lt;=N;i++)fa[i]=i; for(int i=1;i&lt;=n;i++)scanf("%d",&amp;a[i]); for(int i=1;i&lt;=n;i++)scanf("%d",&amp;b[i]); int ans=0; for(int i=1;i&lt;=n;i++)&#123; int aa=find(a[i]),bb=find(b[i]); if(aa==bb)continue; else&#123; ans++; join(aa,bb); &#125; &#125; printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1365 浴火银河星际跳跃（并查集）]]></title>
    <url>%2F7a72e0ec%2F</url>
    <content type="text"><![CDATA[http://codevs.cn/problem/1365/ 时间限制: 1 s 空间限制: 128000 KB 题目等级 : 黄金 Gold 题目描述 Description小 K 又在玩浴火银河了。。。不过这次他的目的不是跑运输赚钱，而是做任务赚钱。他想知道关于一个任务的两个星系是否可以连通。 输入描述 Input Description第一行，三个数，X,N,MX 表示出现的星系代号的最大值；N 表示有 N 个星际跳跃门;M 表示有 M 个任务。接下来的 N 行描述每个星际跳跃门：每行为两个数字（星系代号），星际跳跃门连通这两个星系（星际跳跃门是可以双向通行的）；接下来的 M 行表示每个任务需要到达的星系，每个任务需要到达两个星系。 输出描述 Output Description共 M 行。第 i 行表示第 i 个任务是否能完成：即两个星系是否能连通。（能→Yes；不能→No） 样例输入 Sample Input5 2 13 54 53 4 样例输出 Sample OutputYes 数据范围及提示 Data Size &amp; Hint最大数据第一行：19999 17542 1664 代码12345678910111213141516171819202122232425262728#include&lt;iostream&gt;using namespace std;const int N=20005;int fa[N];int find(int t)&#123; int tmp=t; while(tmp!=fa[tmp])tmp=fa[tmp]; fa[t]=tmp; return tmp;&#125;int main()&#123; int x,n,m,a,b; cin&gt;&gt;x&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=x;i++)fa[i]=i; for(int i=0;i&lt;n;i++)&#123; cin&gt;&gt;a&gt;&gt;b; int tmpa=find(a),tmpb=find(b); if(tmpa!=tmpb)fa[tmpb]=tmpa; &#125; for(int i=0;i&lt;m;i++)&#123; cin&gt;&gt;a&gt;&gt;b; int tmpa=find(a),tmpb=find(b); if(tmpa==tmpb)cout&lt;&lt;"Yes"&lt;&lt;endl; else cout&lt;&lt;"No"&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1240 莫比乌斯函数（数论）]]></title>
    <url>%2F9c66e3e3%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 莫比乌斯函数，由德国数学家和天文学家莫比乌斯提出。梅滕斯(Mertens)首先使用μ(n)（miu(n)）作为莫比乌斯函数的记号。（据说，高斯(Gauss)比莫比乌斯早三十年就曾考虑过这个函数）。 具体定义如下： 如果一个数包含平方因子，那么miu(n) = 0。例如：miu(4), miu(12), miu(18) = 0。 如果一个数不包含平方因子，并且有k个不同的质因子，那么miu(n) = (-1)^k。例如：miu(2), miu(3), miu(30) = -1,miu(1), miu(6), miu(10) = 1。 给出一个数n, 计算miu(n)。 Input输入包括一个数n，(2 &lt;= n &lt;= 10^9) Output输出miu(n)。 Input示例5 Output示例-1 题解：只有一个输入 直接求因子数就好 不用线筛 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;#define LL long longint mu(int x)&#123; int flag=0,num=0; for(int i=2;i*i&lt;=x;i++)&#123; if(x%i==0)&#123; x/=i; num++; if(x%i==0)&#123; flag=1;//包含平方因子 return 0; &#125; &#125; &#125; if(num&amp;1)return 1; else return -1;&#125;/*o(n)线筛int mu[N],prime[N];bool vis[N];int ji;void init()&#123; mu[1]=1; memset(vis,false,sizeof(vis)); for(int i=2;i&lt;N;i++)&#123; if(!vis[i])&#123; prime[ji++]=i; mu[i]=-1; &#125; for(int j=0;j&lt;ji&amp;&amp;i*prime[j]&lt;N;j++)&#123; vis[i*prime[j]]=true; if(i%prime[j])mu[i*prime[j]]=-mu[i]; else&#123; mu[i*prime[j]]=0; break; &#125; &#125; &#125;&#125;*/int main()&#123; int n; scanf("%d",&amp;n); printf("%d\n",mu(n)); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>莫比乌斯函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1256 乘法逆元（数论）]]></title>
    <url>%2Fc3fd1e79%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 给出2个数M和N(M &lt; N)，且M与N互质，找出一个数K满足0 &lt; K &lt; N且K * M % N = 1，如果有多个满足条件的，输出最小的。 Input输入2个数M, N中间用空格分隔（1 &lt;= M &lt; N &lt;= 10^9) Output输出一个数K，满足0 &lt; K &lt; N且K * M % N = 1，如果有多个满足条件的，输出最小的。 Input示例12 3 Output示例12 题解：数论 —— 扩展欧几里得 ax+by=gcd(a,b) a,b互质 有ax+by=1 ax%b=1%b 记x为inv(a) 则 a*inv(a)%b=1%b 代码：123456789101112131415161718192021222324252627282930313233343536#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;#define LL long longvoid ex_gcd(LL a,LL b,LL &amp;x,LL &amp;y,LL &amp;d)&#123; if(!b)&#123; d=a;x=1;y=0; &#125; else&#123; ex_gcd(b,a%b,y,x,d); y-=x*(a/b); &#125;&#125;LL inv(LL t,LL p)&#123; LL d,x,y; ex_gcd(t,p,x,y,d); return d==1?(x%p+p)%p:-1;&#125;int main()&#123; LL m,n; scanf("%lld%lld",&amp;m,&amp;n); printf("%lld\n",inv(m,n)); return 0;&#125;]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1264 线段相交（计算几何）]]></title>
    <url>%2F33eb241b%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 给出平面上两条线段的两个端点，判断这两条线段是否相交（有一个公共点或有部分重合认为相交）。 如果相交，输出”Yes”，否则输出”No”。 Input第1行：一个数T，表示输入的测试数量(1 &lt;= T &lt;= 1000)第2 - T + 1行：每行8个数，x1,y1,x2,y2,x3,y3,x4,y4。(-10^8 &lt;= xi, yi &lt;= 10^8)(直线1的两个端点为x1,y1 | x2, y2,直线2的两个端点为x3,y3 | x4, y4) Output输出共T行，如果相交输出”Yes”，否则输出”No”。 Input示例12321 2 2 1 0 0 2 2-1 1 1 1 0 0 1 -1 Output示例12YesNo 题解：计算几何判断线段相交模版 注释掉的部分是不包括端点和线段重合的模版 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;#define eps 1e-8#define zero(x) (((x)&gt;0?(x):-(x))&lt;eps)struct point&#123; double x,y,z;&#125;q[4];//叉积double xmult(point p1,point p2,point p0)&#123; return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);&#125;//判三点共线int dots_inline(point p1,point p2,point p3)&#123; return zero(xmult(p1,p2,p3));&#125;//判点是否在线段上，包括端点int dot_online_in(point p,point l1,point l2)&#123; return zero(xmult(p,l1,l2)&amp;&amp;(l1.x-p.x)*(l2.x-p.x)&lt;eps&amp;&amp;(l1.y-p.y)*(l2.y-p.y)&lt;eps);&#125;//判两点在线段同侧,点在线段上返回0int same_side(point p1,point p2,point l1,point l2)&#123; return xmult(l1,p1,l2)*xmult(l1,p2,l2)&gt;eps;&#125;//判两线段相交，包括端点和重合(p14)int intersect_in(point u1,point u2,point v1,point v2)&#123; if(!dots_inline(u1,u2,v1)||!dots_inline(u1,u2,v2)) return !same_side(u1,u2,v1,v2)&amp;&amp;!same_side(v1,v2,u1,u2); return (dot_online_in(u1,v1,v2)||dot_online_in(u2,v1,v2)|| dot_online_in(v1,u1,u2)||dot_online_in(v2,u1,u2));&#125;/*//判两点在线段异侧int opposite_side(point p1,point p2,point l1,point l2)&#123; return xmult(l1,p1,l2)*xmult(l1,p2,l2)&lt;-eps;&#125;//判两线段相交，不包括端点和重合int intersect_ex(point u1,point u2,point v1,point v2)&#123; return opposite_side(u1,u2,v1,v2)&amp;&amp;opposite_side(v1,v2,u1,u2);&#125;*/int main()&#123; int t; scanf("%d",&amp;t); while(t--)&#123; for(int i=0;i&lt;4;i++)scanf("%lf%lf",&amp;q[i].x,&amp;q[i].y); if(intersect_in(q[0],q[1],q[2],q[3]))puts("Yes"); else puts("No"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>计算几何</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1265 四点共面（计算几何）]]></title>
    <url>%2F23c9f6c3%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 给出三维空间上的四个点（点与点的位置均不相同），判断这4个点是否在同一个平面内（4点共线也算共面）。如果共面，输出”Yes”，否则输出”No”。 Input第1行：一个数T，表示输入的测试数量(1 &lt;= T &lt;= 1000)第2 - 4T + 1行：每行4行表示一组数据，每行3个数，x, y, z, 表示该点的位置坐标(-1000 &lt;= x, y, z &lt;= 1000)。 Output输出共T行，如果共面输出”Yes”，否则输出”No”。 Input示例1234511 2 02 3 04 0 00 0 0 Output示例1Yes 题解：计算几何四点共面模版 已经包含四点共线的情况了 如果四点不能共线 那就用两次三点共线判断一下就行 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;#define eps 1e-8#define zero(x) (((x)&gt;0?(x):-(x))&lt;eps)struct point&#123; double x,y,z;&#125;q[4];//叉积point xmult(point u,point v)&#123; point ret; ret.x=u.y*v.z-v.y*u.z; ret.y=u.z*v.x-u.x*v.z; ret.z=u.x*v.y-u.y*v.x; return ret;&#125;//点积double dmult(point u,point v)&#123; return u.x*v.x+u.y*v.y+u.z*v.z;&#125;//矢量差point subt(point u,point v)&#123; point ret; ret.x=u.x-v.x; ret.y=u.y-v.y; ret.z=u.z-v.z; return ret;&#125;//取平面法向量point pvec(point s1,point s2,point s3)&#123; return xmult(subt(s1,s2),subt(s2,s3));&#125;//向量大小double vlen(point p)&#123; return sqrt(p.x*p.x+p.y*p.y+p.z*p.z);&#125;//判三点共线int dots_inline(point a,point b,point c)&#123; return vlen(xmult(subt(a,b),subt(b,c)))&lt;eps;&#125;//判四点共面int dots_onplane(point a,point b,point c,point d)&#123; return zero(dmult(pvec(a,b,c),subt(d,a)));&#125;bool check()&#123; if(dots_onplane(q[0],q[1],q[2],q[3]))return true; return false;&#125;int main()&#123; int t; scanf("%d",&amp;t); while(t--)&#123; for(int i=0;i&lt;4;i++)&#123; scanf("%lf%lf%lf",&amp;q[i].x,&amp;q[i].y,&amp;q[i].z); &#125; if(check())puts("Yes"); else puts("No"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>计算几何</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1298 圆与三角形（计算几何）]]></title>
    <url>%2Fc02d18a7%2F</url>
    <content type="text"><![CDATA[Input第1行：一个数T，表示输入的测试数量(1 &lt;= T &lt;= 10000)，之后每4行用来描述一组测试数据。4-1：三个数，前两个数为圆心的坐标xc, yc，第3个数为圆的半径R。(-3000 &lt;= xc, yc &lt;= 3000, 1 &lt;= R &lt;= 3000）4-2：2个数，三角形第1个点的坐标。4-3：2个数，三角形第2个点的坐标。4-4：2个数，三角形第3个点的坐标。(-3000 &lt;= xi, yi &lt;= 3000） Output共T行，对于每组输入数据，相交输出”Yes”，否则输出”No”。 Input示例12345678920 0 1010 015 015 50 0 100 05 05 5 Output示例12YesNo 题解：判断圆和三角形是否相交 直接判断三角形三条线段和圆是否有交点 上个计算几何模版 最初的思路是分成三种情况考虑 一种是内包含 只要判断三个点是否都在圆内即可 第二种是外包含 要判断三个点都在圆外且圆心到三边距离都大于半径 第三种是下图情况 就不好操作了 所以还是直接用模版啦 然后系统说我编译错误 明明sublime编译通过了的 麻烦诶。。然后用devc++试了下 报了下图的错 查了是因为distance和内置的函数重名了 改改就好了下次注意 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;#define eps 1e-8double a0,b0,r,a1,a2,a3,b1,b2,b3;struct point&#123; double x,y;&#125;q0,q1,q2,q3;double xmult(point p1,point p2,point p0)&#123; return (p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y);&#125;double Distance(point p1,point p2)&#123; return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y));&#125;// 点到直线距离double disptoline(point p,point l1,point l2)&#123; return fabs(xmult(p,l1,l2)/Distance(l1,l2));&#125;// 判断线段和圆相交，包括端点和相切(p33)int intersect_seg_circle(point c,double r0,point l1,point l2)&#123; double t1=Distance(c,l1)-r,t2=Distance(c,l2)-r; point t=c; if(t1&lt;eps||t2&lt;eps)return t1&gt;-eps||t2&gt;-eps; t.x+=l1.y-l2.y; t.y+=l2.x-l1.x; return xmult(l1,c,t)*xmult(l2,c,t)&lt;eps&amp;&amp;disptoline(c,l1,l2)-r&lt;eps;&#125;bool check()&#123; if(intersect_seg_circle(q0,r,q1,q2))return true; if(intersect_seg_circle(q0,r,q1,q3))return true; if(intersect_seg_circle(q0,r,q2,q3))return true; return false;&#125; int main()&#123; int t; scanf("%d",&amp;t); while(t--)&#123; scanf("%lf%lf%lf",&amp;a0,&amp;b0,&amp;r);q0.x=a0;q0.y=b0; scanf("%lf%lf",&amp;a1,&amp;b1);q1.x=a1;q1.y=b1; scanf("%lf%lf",&amp;a2,&amp;b2);q2.x=a2;q2.y=b2; scanf("%lf%lf",&amp;a3,&amp;b3);q3.x=a3;q3.y=b3; if(check())puts("Yes"); else puts("No"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>计算几何</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1384 全排列（STL/dfs）]]></title>
    <url>%2F4b67d3c8%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 给出一个字符串S（可能有重复的字符），按照字典序从小到大，输出S包括的字符组成的所有排列。例如：S = “1312”，输出为： 112311321213123113121321211321312311311231213211 Input输入一个字符串S（S的长度 &lt;= 9，且只包括0 - 9的阿拉伯数字） Output输出S所包含的字符组成的所有排列 Input示例11312 Output示例123456789101112112311321213123113121321211321312311311231213211 题解：题意很简单 就水水的全排列 直接next_permutation就好啦 诶好用 printf竟然tle了 改成 puts() 之后跑了46ms 不过这样太依赖stl了 还是乖乖再写个dfs吧。。 然后又t了。。1900ms+。。把printf改成cout就过了 跑了484ms 不是很懂 printf不是比cout快的嘛？？？ 而且加上输入输出优化之后ios::sync_with_stdio(false);cin.tie(0); 没有跑得更快反而慢了一丢丢 代码：1234567891011121314151617181920212223242526#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;int main()&#123; char s[10]; scanf("%s",s); int len=strlen(s); sort(s,s+len); do&#123; // printf("%s\n",s); puts(s); &#125;while(next_permutation(s,s+len)); return 0;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;char s[10];int ans[10],len;bool vis[10];void dfs(int x)&#123; if(x==len)&#123; for(int i=0;i&lt;len;i++)cout&lt;&lt;ans[i]; cout&lt;&lt;endl; return; &#125; for(int i=0;i&lt;len;i++)&#123; if(!vis[i])&#123; vis[i]=true; ans[x]=s[i]-'0'; dfs(x+1); vis[i]=false; while(i&lt;=len&amp;&amp;s[i]==s[i+1])i++;//去重 &#125; &#125;&#125;int main()&#123; scanf("%s",s); len=strlen(s); sort(s,s+len); memset(vis,false,sizeof(vis)); dfs(0); return 0;&#125;]]></content>
      <categories>
        <category>搜索</category>
      </categories>
      <tags>
        <tag>stl</tag>
        <tag>dfs</tag>
        <tag>全排列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1459 迷宫游戏（Dijkstra）]]></title>
    <url>%2Fa8a8763e%2F</url>
    <content type="text"><![CDATA[基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 你来到一个迷宫前。该迷宫由若干个房间组成，每个房间都有一个得分，第一次进入这个房间，你就可以得到这个分数。还有若干双向道路连结这些房间，你沿着这些道路从一个房间走到另外一个房间需要一些时间。游戏规定了你的起点和终点房间，你首要目标是从起点尽快到达终点，在满足首要目标的前提下，使得你的得分总和尽可能大。现在问题来了，给定房间、道路、分数、起点和终点等全部信息，你能计算在尽快离开迷宫的前提下，你的最大得分是多少么？ Input第一行4个整数n (&lt;=500), m, start, end。n表示房间的个数，房间编号从0到(n - 1)，m表示道路数,任意两个房间之间最多只有一条道路，start和end表示起点和终点房间的编号。第二行包含n个空格分隔的正整数(不超过600)，表示进入每个房间你的得分。再接下来m行，每行3个空格分隔的整数x, y, z (0&lt;z&lt;=200)表示道路,表示从房间x到房间y(双向)的道路,注意，最多只有一条道路连结两个房间, 你需要的时间为z。输入保证从start到end至少有一条路径。 Output一行，两个空格分隔的整数，第一个表示你最少需要的时间，第二个表示你在最少时间前提下可以获得的最大得分。 Input示例12343 2 0 21 2 30 1 101 2 11 Output示例121 6 题解：dijkstra 最短路径问题—Dijkstra算法详解 这题还要在最短路的基础上求权值最大 开个数组记录一下然后和路径一起更新就行 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;const int N=505;const int INF=0x3f3f3f3f;int a[N],cost[N],ans[N];bool vis[N];int n,m,start,endd;vector&lt;int&gt;mp[N];vector&lt;int&gt;t[N];void dij()&#123; int x=start; vis[x]=true; while(x!=endd)&#123; for(int i=0;i&lt;mp[x].size();i++)&#123; int y=mp[x][i]; int tmpcost=cost[x]+t[x][i]; int tmpans=ans[x]+a[y]; if(cost[y]==0||tmpcost&lt;cost[y]||(tmpcost==cost[y]&amp;&amp;tmpans&gt;ans[y]))&#123; //如果x-&gt;y的路在之前还未连通 //或者新路径从x-&gt;y的时间小于原来的，或等于但是权值更大，就更新答案 ans[y]=tmpans; cost[y]=tmpcost; &#125; &#125; int minn=INF,maxx=0; for(int i=0;i&lt;n;i++)&#123; //如果i没有标记过且x-&gt;i目前最优，从i出发继续找 if(!vis[i]&amp;&amp;cost[i]!=0&amp;&amp;(cost[i]&lt;minn||(cost[i]==minn&amp;&amp;ans[i]&gt;maxx)))&#123; minn=cost[i]; maxx=ans[i]; x=i; &#125; &#125; vis[x]=true; &#125;&#125;int main()&#123; scanf("%d%d%d%d",&amp;n,&amp;m,&amp;start,&amp;endd); memset(vis,false,sizeof(vis)); memset(cost,0,sizeof(cost)); for(int i=0;i&lt;n;i++)&#123; scanf("%d",&amp;a[i]); ans[i]=a[i]; &#125; int u,v,w; for(int i=0;i&lt;m;i++)&#123; scanf("%d%d%d",&amp;u,&amp;v,&amp;w); mp[u].push_back(v); mp[v].push_back(u); t[u].push_back(w); t[v].push_back(w); &#125; dij(); printf("%d %d\n",cost[endd],ans[endd]); return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>dijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[F.The Best Path--ACM-ICPC 2016 Qingdao Preliminary Contest]]></title>
    <url>%2F56954db8%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/29370 样例输入12345678910111213141523 23451 22 34 312341 22 32 4 样例输出122Impossible 题目来源ACM-ICPC 2016 Qingdao Preliminary Contest 题解：给一个图，每个点有一个权值，找欧拉通路或者欧拉回路，然后求路径上每个点异或结果的最大值； 首先判断有没有欧拉回路或者通路，用一下定理就好了，有且仅有两个度数为奇数的点则有欧拉通路，没有度数为奇数的点则有欧拉回路； 然后把对异或值有贡献的算上，有贡献的点就是d为奇数的点和（d/2）为奇数的点，因为经过偶数次的点相当于没有贡献； 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;const int N=100005;int n,m,a[N],d[N];int main()&#123; int t,u,v; scanf("%d",&amp;t); while(t--)&#123; int ans=0; memset(d,0,sizeof(d)); scanf("%d%d",&amp;n,&amp;m); for(int i=1;i&lt;=n;i++)scanf("%d",&amp;a[i]); for(int i=0;i&lt;m;i++)&#123; scanf("%d%d",&amp;u,&amp;v); d[u]++;d[v]++; &#125; int num=0; for(int i=1;i&lt;=n;i++)&#123; if(d[i]&amp;1)num++; &#125; if(num==0)&#123; for(int i=1;i&lt;=n;i++)&#123; if((d[i]/2)&amp;1||d[i]&amp;1)ans^=a[i]; &#125; int tmp=ans; for(int i=1;i&lt;=n;i++)&#123; ans=max(ans,tmp^a[i]); &#125; printf("%d\n",ans); &#125; else if(num==2)&#123; for(int i=1;i&lt;=n;i++)&#123; if((d[i]/2)&amp;1||d[i]&amp;1)ans^=a[i]; &#125; printf("%d\n",ans); &#125; else printf("Impossible\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>欧拉路径</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[D.Tea--ACM-ICPC 2016 Qingdao Preliminary Contest]]></title>
    <url>%2F68e48a7a%2F</url>
    <content type="text"><![CDATA[https://nanti.jisuanke.com/t/29368Tea is good. Tea is life. Tea is everything. The balance of tea is a journey of pursuing balance of the universe. Alice knows that. Alice wants to teach you the art of pouring tea. Alice has a pot of tea. The exact volume of tea is not important. The exact volume of tea is at least LL. The exact volume of tea is at most RR. Alice put two empty cups between you and her. Alice wants the two cups filled by almost equal volume of tea. Yours cannot be 11 unit more than hers. Hers cannot be 11 unit more than yours. Alice wants you to pour the tea. Alice wants you to pour until the pot is almost empty. Alice wants no more than 11 unit volume of tea remaining in the pot. You cannot read the residue volume of tea remaining in the pot. You can only know the tea status in the pot, empty or not. Alice does not want you to pour the tea too many times. You better pour as few times as possible. Input FormatThere are multiple cases. For each case, there is one line of two integers LL and RR, separated by single space. Here are some analyses about sample cases. For the first case, pouring 11 unit into one cup will satisfy Alice. For the second case, it is clearly that you cannot only pour once to reach the desired balance, but she can achieve it by pouring twice. First you pour 1.51.5 units into one cup, then you attempt to pour another 1.51.5 units into the other cup. Since the lower bound is 22, at least 0.50.5 unit remains in the pot after the first pouring. If the initial volume is in range [2,\ 3][2, 3], the second cup will have volume in range [0.5,\ 1.5][0.5, 1.5] which is balanced with 1.51.5 unit in the first cup, and at most 11 unit remain after these two attempts. About 10001000 test cases, and 0\le L\le R \le 10^{16}0≤L≤R≤1016 . Output FormatFor each case, there should be a single integer in a single line, the least number of pouring attempts. 样例输入122 22 4 样例输出1212 题目来源ACM-ICPC 2016 Qingdao Preliminary Contest 题解：一开始的策略有点问题，第一杯倒 l/2 第二杯倒 l/2+1 这样不一定是最优的； 举个例子（4 9）这组数据，第一杯2，第二杯3，第一杯2+2，第二杯还需要再加一次； 而第一杯倒（l+1）/2 ，第二杯倒（l+1）/2+1的话，（4 9），第一杯2.5 第二杯3.5 第一杯 2.5 +2，达成要求； 所以最优策略是第一杯倒（l+1）/2 ，第二杯倒（l+1）/2+1 ，然后剩下的轮流加2，直至壶中水小于等于1； 特判几个特殊情况，具体见代码，需要注意的是，如果l=0，那么一开始（0+1）/2=0，显然不倒水是不划算的，所以如果特判结束后l=0则l=1； ###代码：1234567891011121314151617181920212223242526272829#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;#define LL long longint main()&#123; LL l,r; while(~scanf("%lld%lld",&amp;l,&amp;r))&#123; if(r==0||r==1)puts("0"); else if(r==2)puts("1"); else if(l==r||l==r-1)puts("2"); else&#123; if(l==0)l=1; printf("%lld\n",(r-l+2)/2); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2006 飞行员配对(二分图最大匹配,匈牙利算法)]]></title>
    <url>%2F42c39770%2F</url>
    <content type="text"><![CDATA[题目来源： 网络流24题基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 第二次世界大战时期，英国皇家空军从沦陷国征募了大量外籍飞行员。由皇家空军派出的每一架飞机都需要配备在航行技能和语言上能互相配合的2名飞行员，其中1名是英国飞行员，另1名是外籍飞行员。在众多的飞行员中，每一名外籍飞行员都可以与其他若干名英国飞行员很好地配合。如何选择配对飞行的飞行员才能使一次派出最多的飞机。对于给定的外籍飞行员与英国飞行员的配合情况，试设计一个算法找出最佳飞行员配对方案，使皇家空 军一次能派出最多的飞机 。对于给定的外籍飞行员与英国飞行员的配合情况，编程找出一个最佳飞行员配对方案， 使皇家空军一次能派出最多的飞机。 Input第1行有2个正整数 m 和 n。n 是皇家空军的飞行 员总数(n&lt;100);m 是外籍飞行员数。外籍飞行员编号为 1~m;英国飞行员编号为 m+1~n。接下来每行有 2 个正整数 i 和 j，表示外籍飞行员 i 可以和英国飞行员 j 配合。输入最后以 2 个-1 结束。 Output第 1 行是最佳飞行 员配对方案一次能派出的最多的飞机数 M。如果所求的最佳飞行员配对方案不存在，则输出‘No Solution!’。 题解：裸的匈牙利算法求二分图最大匹配 这篇讲的超级生动形象了https://blog.csdn.net/cillyb/article/details/55511666 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;const int N=105;vector&lt;int&gt;g[N];int n,m,ans=0,match[N];bool vis[N];bool dfs(int x)&#123; for(int i=0;i&lt;g[x].size();i++)&#123; int v=g[x][i]; if(!vis[v])&#123; vis[v]=true;//标记已试图匹配 if(match[v]==-1||dfs(match[v]))&#123; //这个点没匹配过或者这个点匹配的可拆 match[v]=x; return true; &#125; &#125; &#125; return false;&#125;int main()&#123; scanf("%d%d",&amp;m,&amp;n); int x,y; while(scanf("%d%d",&amp;x,&amp;y),x!=-1&amp;&amp;y!=-1)&#123; g[x].push_back(y); g[y].push_back(x); &#125; memset(match,-1,sizeof(match)); for(int i=1;i&lt;=m;i++)&#123; memset(vis,false,sizeof(vis)); if(dfs(i))ans++; &#125; printf("%d\n",ans); return 0;&#125;]]></content>
      <categories>
        <category>图论</category>
      </categories>
      <tags>
        <tag>二分图</tag>
        <tag>匈牙利算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac OS下用「hexo+github」搭建个人博客！]]></title>
    <url>%2F3ca6f02%2F</url>
    <content type="text"><![CDATA[这个不是教程 只是搭建过程记录向 记录一下我报错查教程改错报错查教程改错报错查教程改错。。的过程 前面有些步骤在后面有报错然后修正 所以千万不要相信我的步骤 准备工作 安装nodejs和git（这个自己在官网安装就可以） 接着要用npm安装hexo 在终端输入npm install -g hexo-cli 很多报错 可以看见好几个都是permission denied（因为权限不足无法访问）可以看见提示的建议是：Please try running this command again as root/Administrator.所以重新输入sudo npm install -g hexo-cli（sudo：申请root权限）下图表明安装成功 用hexo在本地新建一个博客 新建文件夹然后右键「新建位于文件夹位置的终端窗口」（第一次使用的话可以在【finder-服务-服务偏好设置】中勾选上那一项） 文件夹位置下终端输入 1234hexo i blog//blog是项目名，叫别的也随便cd blog//进入blog文件夹hexo g//编译hexo s//本地预览 （后两句不加sudo的话同样会出现permission denied的问题 所以在开头加上sudo给他权限就可以啦 下面有些地方还会遇到sudo的问题 就不赘述了 报权限不够的错误的话自己加上） 成功后会给出一个链接 一个在本地的博客就这样建好了 点开就可以发现已经有一个博客的大概了 这里用到了4000端口 如果该端口被占用的话可以查一下是什么东西占用了这个端口sudo lsof -i:端口号 如果没有输出表面该端口没有被占用 被占用的话会给出一个进程 里面有一个PID号 如果是没设么用的进程 输入sudo kill -9 pid号结束掉他即可 默认给的是个叫「landscape」的主题 不同主题有不同的功能布局外观 当然也可以自己写个主题出来不过这种是大佬们的操作 我这个小白还是先找个主题用吧。。这里放上一些主题：https://github.com/hexojs/hexo/wiki/Themes 此外知乎上也有关于hexo主题的讨论 设置博客主题 在文件夹打开终端输入git clone加上所选主题的地址 (此处以及后面所说的终端一般都是blog文件夹终端了) git clone https://github.com/iissnan/hexo-theme-next themes/next 打开文件夹下的这个文件 官方名叫站点配置文件 然后找到里面的theme并更改 回到终端输入 123hexo cleanhexo ghero s 点进生成的blog可以看见主题已经换好啦 在[themes/next/config.yml]里配置next 冒号后面是有空格的 后面有些地方也是一样！！！一定要有空格 不然会报很长很长的错！！！ 可以看见备注写了三个方案给你选 然后重新输入以下代码查看效果 123hexo cleanhexo ghero s 这时候这里出现了一个警告 https://github.com/theme-next/hexo-theme-next 我用的这个next主题已经移动到别的地方了 所以问题不大复制一下然后找到这个主题的新的地址 按照上面步骤改一下就行注意要把之前的主题所在文件夹删了 或者生成的时候自己换个不同的文件夹名字 上面是Gemini 还蛮好看蛮直男审美的 就这个吧诶嘿 以上就是在本地建立了一个看得过去的blog了下面要把这个本地blog上传到github 把博客部署到GitHub上 先在GitHub上创建一个新项目 项目名必须按如下格式输入 最后一项选上 创建后点项目的setting 下拉找到github pages 看不懂就翻译了一下 那么发现啦那个网址就是我们要用的现在还是宇宙洪荒混沌初始的状态 接下来要把hexo上的内容部署到github上 打开之前提到过的站点配置文件 把最后几行改成如下格式 在终端输入如下 装个插件 npm install hexo-deployer-git --save emmmmmm???报了一堆错 没事 照他的提示在mac终端输入npm i -g npm更新一下就好了更新成功的界面如下 查一下也可以发现变成 6.3.0 版本了。。这不重要 然后就是最后激动人心的一步了！！！！！ 输入hexo d把它部署到github的网站上去 然后就走上了漫长的报错之路。。 然后又经历了一系列艰苦卓绝我也不知道发生了啥的几个小时的查来查去试来试去！最后 终于突然一下的改好了？？！ emmmmm不废话了先记录下来 大概讲讲我干了些啥 主要问题还是出在站点配置文件上 因为报错的时候一直说这个找不到那个找不到。。你都找不到我哪找得到啊 然后去找了一些有关hexo站点配置的教程 其中这份讲的是比较详细的了 照着这个改了最后那一段 https://blog.csdn.net/xuezhisdc/article/details/53130383 然后输入 1234npm install hexo-deployer-git --save sudo hexo clean sudo hexo g sudo hexo d 还原一下我的小白操作。。最后终端的结果没报错了也没说啥奇奇怪怪得话了就说明成功了 回到github上可以发现 这些东西已经上传到GitHub了 然后就点开github之前给的那个链接 如图 之前的本地网站已经上传了！！撒花！！！！ 补充一点内容：首先是关于博客美化的问题 这个就看到什么好看的功能就往上使就是了 next主题美化教程还是很多哒 还有一些关于目录标签的功能 都很好上手 这篇是一个小小小小小汇总：hexo下各种博客美化和功能插件汇总（内附本博客css样式） 然后就是耍了几天博客会发现一个严重的问题！百度！Google！！竟然查不到我自己的网站 但是吧这个坑已经挖了。。不填怎么行。。网上找一下百度Google递交搜索引擎的教程就好了 github站点在百度的http认证到是无法通过的，原因写在下面了 （不过现在有了自己的域名，这个问题短期内已经得到了解决，具体见这篇文章-&gt;如何给个人博客换上专属免费域名） google的效率倒是相当快操作也很简洁 站点地图也交好了 一觉醒来在google上搜索到自己博客的感觉 还蛮妙2333333 这里在站点地图提交的时候遇到一个问题 此位置的 Sitemap 不允许此网址 是因为之前在站点配置文件里的 url: 那一项没有设置 要改成自己网站的地址 改完后提交站点地图就不会报错了 更新：关于百度http认证无法通过的问题有一次用百度蜘蛛爬了一下，然后发现了抓取失败的原因是被拒绝访问了 解决 Github Pages 禁止百度爬虫的方法与可行性分析 这篇是15年的文章，里面有github support部门的回复的原因 如何解决百度爬虫无法爬取搭建在Github上的个人博客的问题？ 目前的办法可能是要用cdn加速一下0.0，但是去看了一下站点最近的一些指数，索引量抓取频次啥的都有各种数据了，而且百度已经收录了不少博文了，不像刚开始一条直线。。所以暂时先偷个懒吧(/ω＼)]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>mac OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1995 三子棋]]></title>
    <url>%2Fa678482f%2F</url>
    <content type="text"><![CDATA[题目来源： syu校赛基准时间限制：1 秒 空间限制：131072 KB 分值: 0 难度：基础题 小的时候大家一定玩过“井”字棋吧。也就是在九宫格中，只要任意行、列，或者任意连续对角线上面出现三个相同的，就能获胜。现在小明和小花也在玩三子棋，但是他们不是在九宫格里，而是在3×4的格子里面。现在小明先下，但是他知道小花这个人很聪明，他想知道第一步下在哪一个地方最合适，你能帮帮他吗？ Input第一行输入一个整数T，表示数据组数（1&lt;T&lt;10000）；第二行输入两个整数x,y,表示3×4格子里面的一个坐标(x,y)（1&lt;=x&lt;=3,1&lt;=y&lt;=4）； Output每组数据输出最后小明输赢的结果，如果小明一定能赢，第一行输出“Win”,第二行输出小明所需要花的最少步数；如果小明跟小花只能打成平手，第一行输出“Equal”，第二行输出数字0；如果小明不能赢也不能跟小花打成平手，第一行输出“Lose”,第二行输出小花赢小明所需要花的最少步数 题解：抱着作a+b的心态开始刷基础题，结果基础题怎么这么不水呢么。。没想到啥好方法，就自己跟自己下模拟；策略就和一般五子棋差不多，关于最少步数，由于对手也是绝顶聪明的，所以不会让你下在很快赢的地方，其实应该算最多步数的最少步数那个意思。。大概； 棋盘是对称的，所以只要看（1，1）（1，2）（2，1）（2，2）四个点就可以；如下表： 1 2 2 1 3 4 4 3 1 2 2 1 然后结论是对先手来说（1，1）（1，2）（2，2）必胜，（2，1）平局； （1，1）的最短路是6：先手:11-&gt;12-&gt;31-&gt;23-&gt;32形成“双二”再下一步就赢了后手:21-&gt;13-&gt;21-&gt;34-&gt; （1，2）的最短路是4：先手:12-&gt;23-&gt;32形成“双二”再下一步就赢了后手:13-&gt;34-&gt; （2，2）的最短路是4：先手:22-&gt;13-&gt;11形成“双二”再下一步就赢了后手:23-&gt;31-&gt; 代码：123456789101112131415161718192021222324252627#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;fstream&gt;#include &lt;map&gt;#include &lt;queue&gt;#include &lt;string&gt;#include &lt;set&gt;#include &lt;cmath&gt;#include &lt;list&gt;using namespace std;int a[3][4]=&#123;6,4,4,6,0,4,4,0,6,4,4,6&#125;;int main()&#123; int t,x,y; scanf("%d",&amp;t); while(t--)&#123; scanf("%d%d",&amp;x,&amp;y); x--; y--; if(a[x][y]==0)printf("Equal\n0\n"); else printf("Win\n%d\n",a[x][y]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>思维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello-world [Topping]]]></title>
    <url>%2F52e47f72%2F</url>
    <content type="text"><![CDATA[❤️ 从1999至今仍然一事无成 ಥ_ಥ ❤️]]></content>
      <categories>
        <category>瞎折腾(=ﾟωﾟ)ﾉ</category>
      </categories>
  </entry>
</search>
